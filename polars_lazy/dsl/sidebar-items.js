window.SIDEBAR_ITEMS = {"enum":[["AggExpr",""],["Excluded",""],["Expr","Queries consists of multiple expressions."],["Operator",""]],"fn":[["apply_multiple","Apply a function/closure over the groups of multiple columns. This should only be used in a groupby aggregation."],["binary_expr",""],["count","Count expression"],["first","First column in DataFrame"],["last","Last column in DataFrame"],["lit","Create a Literal Expression from `L`"],["map_list_multiple","Apply a function/closure over multiple columns once the logical plan get executed."],["map_multiple","Apply a function/closure over multiple columns once the logical plan get executed."],["ternary_expr",""],["when","Start a when-then-otherwise expression"]],"mod":[["cat",""],["functions","Functions"],["string",""]],"struct":[["SpecialEq","Wrapper type that has special equality properties depending on the inner type specialization"],["StrpTimeOptions",""],["When","Intermediate state of `when(..).then(..).otherwise(..)` expr."],["WhenThen","Intermediate state of `when(..).then(..).otherwise(..)` expr."],["WhenThenThen","Intermediate state of chain when then exprs."]],"trait":[["BinaryUdfOutputField",""],["FunctionOutputField",""],["RenameAliasFn",""],["SeriesBinaryUdf","A wrapper trait for any binary closure `Fn(Series, Series) -> PolarsResult<Series>`"],["SeriesUdf","A wrapper trait for any closure `Fn(Vec<Series>) -> PolarsResult<Series>`"]],"type":[["GetOutput",""]]};