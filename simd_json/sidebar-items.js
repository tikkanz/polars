window.SIDEBAR_ITEMS = {"enum":[["ErrorType","Error types encountered while parsing"],["KnownKeyError","Error for known keys"],["StaticNode","Static tape node"],["ValueType","Types of JSON values"]],"fn":[["to_string","Write a value to a string"],["to_string_pretty","Write a value to a string"],["to_tape","Creates a tape from the input for later consumption"],["to_vec","Write a value to a vector"],["to_vec_pretty","Write a value to a vector"],["to_writer","Write a value to a string"],["to_writer_pretty","Write a value to a string"]],"macro":[["json","Taken from: https://github.com/serde-rs/json/blob/5b5f95831d9e0d769367b30b76a686339bffd209/src/macros.rs Construct a `simd_json::Value` from a JSON literal."],["json_typed","Adapted from: https://github.com/serde-rs/json/blob/5b5f95831d9e0d769367b30b76a686339bffd209/src/macros.rs Constructs a `simd_json::Value` from a JSON literal and allows specifying whether it generates an owned or borrowed variant."],["likely","possible compiler hint that a branch is likely"],["static_cast_i128","static cast to an i64"],["static_cast_i32","static cast to an i32"],["static_cast_i64","static cast to an i64"],["static_cast_i8","static cast to an i8"],["static_cast_u32","static cast to an u32"],["static_cast_u64","static cast to an u64"],["stry","FROM serde-json We only use our own error type; no need for From conversions provided by the standard libraryâ€™s try! macro. This reduces lines of LLVM IR by 4%."],["unlikely","possible compiler hint that a branch is unlikely"]],"mod":[["cow","Reexport of Cow Reexport of Cow"],["prelude","Default trait imports;"],["serde","serde related helper functions"],["value","simd-json JSON-DOM value"]],"struct":[["AlignedBuf","SIMD aligned buffer"],["Deserializer","Deserializer struct to deserialize a JSON"],["Error","Parser error"],["KnownKey","Well known key that can be looked up in a `Value` faster. It achieves this by memorizing the hash."]],"type":[["Result","simd-json Result type"]]};