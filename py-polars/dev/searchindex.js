Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_dummies", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_dummies", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 87, 97, 115, 124, 127, 128, 228, 246, 260, 571, 651, 676, 952], "refer": [0, 29, 99, 100, 103, 133, 246, 408, 435, 494, 571, 850, 914, 952], "input": [0, 60, 89, 99, 100, 103, 128, 129, 140, 151, 179, 193, 199, 213, 223, 226, 246, 253, 260, 365, 383, 403, 415, 428, 465, 517, 520, 522, 524, 525, 526, 527, 538, 539, 547, 548, 551, 560, 571, 582, 585, 595, 602, 627, 634, 639, 645, 649, 667, 676, 806, 829, 831, 952], "output": [0, 25, 27, 29, 30, 31, 32, 70, 103, 119, 128, 152, 153, 164, 174, 181, 190, 193, 219, 223, 246, 255, 260, 406, 407, 414, 514, 520, 528, 547, 558, 571, 582, 603, 604, 613, 617, 618, 627, 645, 648, 651, 667, 676, 941, 952], "seri": [0, 1, 22, 61, 62, 63, 64, 65, 68, 69, 70, 86, 88, 91, 93, 97, 118, 119, 121, 124, 128, 136, 144, 146, 148, 149, 154, 157, 158, 160, 162, 170, 171, 175, 186, 187, 201, 205, 208, 211, 212, 227, 246, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 272, 273, 274, 279, 282, 283, 290, 291, 294, 295, 296, 299, 306, 307, 311, 312, 324, 326, 330, 333, 337, 339, 341, 344, 348, 349, 351, 355, 358, 367, 368, 374, 381, 383, 385, 386, 387, 388, 389, 391, 392, 393, 404, 406, 431, 435, 436, 437, 438, 439, 441, 453, 454, 457, 460, 461, 468, 483, 488, 494, 498, 504, 505, 506, 507, 513, 520, 521, 523, 529, 531, 532, 533, 539, 540, 542, 544, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 559, 560, 561, 562, 563, 571, 582, 599, 645, 650, 667, 946, 948, 951, 953, 956, 957, 958], "datafram": [0, 1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 49, 51, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 112, 113, 114, 117, 119, 120, 244, 245, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 292, 293, 296, 297, 298, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 352, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 544, 547, 548, 549, 550, 551, 552, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 571, 582, 589, 591, 595, 596, 599, 600, 603, 604, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 625, 627, 631, 632, 633, 634, 635, 636, 640, 641, 642, 643, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 675, 676, 695, 713, 723, 738, 739, 803, 848, 895, 898, 910, 911, 921, 930, 931, 941, 952], "lazyfram": [0, 1, 48, 50, 60, 61, 62, 63, 64, 67, 68, 110, 111, 112, 113, 114, 115, 117, 121, 168, 180, 246, 296, 371, 571, 582, 666, 959], "express": [0, 65, 67, 70, 119, 121, 122, 128, 129, 140, 142, 144, 151, 177, 181, 189, 193, 199, 213, 223, 226, 228, 246, 253, 255, 256, 257, 259, 260, 270, 276, 278, 296, 308, 309, 310, 313, 319, 321, 325, 345, 361, 365, 368, 371, 375, 377, 378, 381, 383, 387, 390, 395, 398, 399, 404, 405, 406, 407, 408, 412, 413, 414, 415, 419, 421, 425, 427, 428, 430, 431, 432, 433, 438, 452, 453, 454, 456, 458, 463, 465, 469, 477, 478, 494, 500, 501, 504, 510, 511, 513, 516, 517, 521, 522, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 546, 547, 548, 551, 553, 555, 556, 557, 558, 560, 561, 564, 570, 582, 585, 589, 594, 595, 596, 599, 602, 621, 627, 629, 630, 631, 632, 634, 639, 645, 646, 649, 651, 667, 676, 693, 695, 727, 728, 729, 737, 746, 770, 793, 806, 868, 875, 889, 897, 898, 952], "extend": [0, 89, 246, 368, 571, 582, 675, 793, 952], "function": [0, 29, 61, 62, 63, 64, 69, 87, 93, 99, 100, 103, 110, 120, 128, 133, 139, 146, 173, 180, 181, 210, 214, 217, 218, 228, 246, 256, 260, 296, 319, 349, 362, 363, 364, 406, 407, 428, 430, 441, 442, 443, 444, 445, 446, 448, 449, 450, 462, 508, 518, 519, 520, 531, 532, 539, 540, 542, 547, 555, 571, 582, 613, 617, 620, 642, 651, 667, 676, 713, 737, 774, 787, 788, 789, 790, 803, 848, 856, 870, 871, 877, 882, 935, 952], "data": [0, 1, 5, 15, 18, 28, 29, 30, 34, 51, 60, 61, 63, 68, 71, 76, 77, 81, 83, 86, 87, 88, 89, 90, 91, 92, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 117, 118, 120, 121, 122, 127, 128, 130, 131, 141, 150, 151, 152, 164, 165, 166, 168, 179, 180, 184, 189, 190, 197, 204, 209, 210, 223, 225, 244, 246, 257, 260, 297, 305, 324, 350, 358, 361, 377, 378, 382, 389, 391, 398, 405, 425, 427, 435, 451, 452, 462, 494, 508, 510, 511, 517, 525, 546, 558, 571, 582, 587, 588, 596, 602, 603, 620, 631, 632, 645, 667, 675, 676, 714, 721, 726, 730, 743, 745, 783, 803, 850, 866, 867, 877, 882, 914, 933, 934, 935, 936, 938, 943, 951, 952], "type": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 67, 70, 76, 86, 88, 89, 90, 91, 92, 93, 97, 99, 100, 102, 103, 110, 111, 116, 117, 118, 121, 124, 128, 146, 150, 152, 153, 154, 165, 204, 209, 210, 212, 215, 246, 260, 283, 296, 305, 306, 308, 309, 310, 326, 330, 333, 337, 339, 341, 344, 348, 351, 365, 379, 385, 387, 388, 408, 438, 489, 490, 491, 494, 508, 520, 525, 534, 535, 536, 538, 539, 546, 571, 582, 589, 594, 596, 603, 604, 621, 630, 631, 632, 640, 667, 700, 713, 721, 723, 727, 728, 729, 747, 751, 754, 761, 763, 766, 769, 773, 776, 801, 877, 909, 910, 911, 933, 934, 936, 944, 952], "config": [0, 60, 193, 223, 246, 582, 627, 645, 667], "except": [0, 155, 167, 169, 202, 246, 538, 582, 609, 667, 802, 827, 923, 934, 943, 952], "test": [0, 103, 582, 605, 612, 667], "util": [0, 542, 582, 596, 667], "sql": [0, 28, 48, 101, 166, 246, 582], "These": [1, 29, 125, 246, 355, 570, 780], "allow": [1, 29, 51, 76, 87, 110, 112, 113, 114, 115, 121, 122, 127, 164, 167, 168, 189, 190, 191, 210, 215, 225, 246, 345, 437, 452, 494, 571, 608, 609, 613, 617, 631, 632, 640, 646, 667, 770, 852, 867, 869, 914, 935, 952], "you": [1, 12, 29, 33, 60, 86, 88, 89, 90, 92, 97, 99, 100, 103, 104, 108, 110, 117, 124, 128, 137, 141, 164, 167, 177, 189, 190, 206, 209, 214, 228, 246, 260, 278, 308, 309, 310, 371, 383, 406, 408, 437, 442, 443, 444, 445, 446, 448, 449, 450, 479, 482, 494, 521, 531, 540, 571, 589, 592, 605, 609, 612, 630, 632, 651, 667, 675, 676, 695, 727, 728, 729, 806, 852, 899, 902, 914, 934, 943, 952], "regist": [1, 61, 62, 63, 64], "custom": [1, 29, 61, 62, 63, 64, 128, 228, 246, 260, 296, 406, 441, 520, 547, 571, 613, 651, 667, 676, 713, 856, 952], "dedic": [1, 87, 164, 190, 246], "namespac": [1, 245, 570, 582, 666], "underli": [1, 72, 79, 86, 88, 89, 90, 92, 108, 121, 122, 141, 164, 165, 190, 204, 246, 300, 324, 325, 329, 332, 334, 335, 336, 338, 340, 342, 343, 346, 347, 348, 350, 356, 357, 358, 359, 437, 451, 469, 471, 571, 667, 675, 716, 745, 746, 750, 753, 755, 756, 760, 762, 765, 767, 768, 771, 772, 773, 775, 781, 782, 783, 784, 852, 866, 877, 889, 891, 929, 934, 952], "polar": [1, 246, 570, 571, 576, 582, 667, 952, 959, 960], "class": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 91, 119, 120, 209, 210, 246, 571, 576, 582, 667, 933, 934, 952, 959], "without": [1, 5, 69, 93, 102, 105, 109, 111, 115, 217, 218, 246, 260, 319, 349, 442, 443, 444, 445, 446, 448, 449, 450, 557, 571, 642, 667, 737, 743, 774, 803, 848, 952], "requir": [1, 29, 33, 91, 117, 118, 133, 189, 210, 246, 297, 362, 363, 364, 457, 494, 511, 571, 632, 667, 714, 788, 789, 790, 876, 914, 934, 935, 938, 952], "subclass": [1, 246], "mixin": 1, "expr": [1, 60, 61, 62, 63, 64, 65, 68, 70, 140, 142, 144, 166, 167, 177, 181, 189, 193, 223, 246, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 571, 572, 573, 576, 577, 578, 579, 595, 597, 599, 608, 609, 622, 627, 629, 645, 667, 693, 695, 737, 746, 794, 875, 889, 893, 912, 924, 952], "ar": [1, 5, 10, 14, 17, 25, 29, 33, 51, 70, 71, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 115, 117, 118, 120, 121, 125, 127, 128, 129, 133, 137, 139, 142, 146, 151, 152, 153, 164, 167, 168, 173, 174, 179, 189, 190, 193, 199, 205, 210, 213, 218, 219, 223, 226, 246, 256, 296, 315, 317, 318, 322, 323, 349, 355, 360, 362, 363, 364, 383, 385, 387, 388, 389, 391, 392, 393, 396, 408, 428, 435, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 462, 464, 465, 479, 482, 483, 502, 521, 522, 524, 526, 527, 528, 548, 551, 558, 560, 564, 565, 567, 570, 571, 572, 573, 576, 577, 578, 579, 582, 585, 592, 597, 602, 603, 604, 605, 609, 612, 613, 617, 618, 621, 624, 627, 631, 632, 634, 639, 642, 645, 646, 649, 667, 673, 675, 713, 735, 736, 774, 780, 786, 787, 788, 789, 790, 800, 806, 810, 813, 814, 815, 816, 817, 818, 825, 850, 854, 856, 862, 879, 882, 899, 902, 903, 922, 934, 935, 943, 946, 948, 952, 953, 956, 957, 958], "all": [1, 7, 14, 17, 22, 25, 29, 34, 67, 68, 70, 86, 89, 91, 92, 94, 99, 100, 102, 103, 104, 108, 110, 112, 113, 119, 120, 122, 137, 143, 155, 160, 162, 164, 165, 168, 169, 173, 176, 177, 184, 189, 190, 198, 202, 207, 215, 217, 219, 246, 257, 258, 259, 278, 283, 293, 296, 298, 313, 319, 323, 365, 376, 379, 382, 385, 388, 392, 393, 395, 399, 401, 406, 407, 420, 426, 432, 435, 440, 457, 463, 465, 470, 476, 478, 481, 484, 485, 487, 493, 501, 514, 525, 538, 540, 555, 560, 564, 571, 576, 582, 589, 592, 594, 596, 598, 613, 617, 621, 630, 633, 640, 646, 667, 695, 700, 710, 713, 737, 743, 802, 808, 822, 827, 850, 883, 890, 896, 898, 901, 904, 905, 907, 913, 923, 952], "support": [1, 29, 33, 68, 86, 87, 88, 89, 90, 91, 92, 93, 101, 102, 103, 111, 119, 122, 125, 127, 164, 165, 190, 198, 199, 206, 210, 246, 291, 428, 463, 465, 488, 525, 571, 576, 633, 634, 667, 708, 883, 908, 935, 952], "target": [1, 29, 66, 246, 475, 494, 895, 914], "thi": [1, 5, 7, 12, 25, 27, 29, 31, 33, 37, 50, 51, 60, 67, 68, 69, 71, 86, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 133, 137, 138, 139, 141, 146, 151, 152, 153, 154, 158, 160, 162, 164, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 182, 183, 184, 189, 190, 191, 193, 196, 198, 200, 201, 204, 206, 209, 210, 214, 215, 217, 218, 219, 220, 221, 223, 224, 228, 245, 246, 256, 259, 260, 269, 278, 279, 283, 292, 296, 297, 304, 306, 313, 319, 324, 335, 345, 348, 349, 358, 367, 381, 382, 383, 387, 399, 404, 406, 412, 413, 414, 415, 423, 424, 428, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 454, 456, 457, 458, 463, 464, 465, 480, 481, 486, 487, 493, 494, 497, 509, 511, 512, 513, 514, 518, 519, 521, 526, 529, 531, 533, 539, 540, 542, 557, 561, 571, 582, 583, 586, 589, 592, 594, 596, 602, 603, 604, 606, 609, 613, 617, 618, 621, 624, 627, 629, 630, 631, 632, 633, 640, 642, 645, 646, 647, 648, 651, 666, 667, 675, 676, 685, 695, 696, 700, 709, 714, 720, 723, 737, 743, 745, 746, 756, 770, 773, 774, 783, 787, 792, 799, 800, 803, 807, 812, 813, 819, 821, 823, 826, 830, 832, 833, 834, 835, 837, 838, 840, 841, 843, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 860, 863, 864, 865, 867, 870, 871, 872, 875, 876, 877, 878, 883, 884, 886, 900, 901, 906, 907, 913, 914, 917, 918, 921, 922, 929, 931, 933, 934, 935, 937, 938, 940, 942, 943, 952], "featur": [1, 33, 37, 51, 66, 246], "i": [1, 5, 12, 14, 27, 29, 30, 31, 32, 37, 51, 60, 65, 66, 67, 68, 69, 70, 73, 75, 76, 78, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 102, 104, 108, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 123, 127, 128, 137, 139, 147, 150, 151, 152, 153, 154, 155, 158, 159, 161, 163, 164, 165, 167, 168, 169, 171, 173, 174, 177, 179, 180, 181, 189, 190, 191, 198, 199, 200, 201, 202, 204, 210, 214, 215, 217, 218, 219, 220, 228, 245, 246, 253, 256, 258, 259, 260, 270, 278, 281, 291, 295, 296, 319, 325, 334, 345, 349, 355, 362, 363, 364, 367, 379, 381, 383, 396, 406, 408, 415, 428, 435, 437, 439, 442, 443, 444, 445, 446, 448, 449, 450, 452, 453, 454, 458, 459, 462, 463, 464, 465, 467, 469, 470, 475, 476, 478, 480, 481, 483, 486, 487, 488, 491, 493, 494, 497, 514, 515, 519, 521, 525, 526, 528, 529, 531, 532, 533, 540, 546, 548, 551, 553, 557, 558, 559, 561, 563, 564, 571, 589, 592, 594, 596, 602, 603, 604, 607, 609, 611, 613, 617, 618, 621, 630, 631, 632, 633, 634, 635, 640, 642, 643, 648, 651, 667, 674, 675, 676, 695, 698, 708, 712, 737, 746, 755, 770, 774, 780, 787, 788, 789, 790, 792, 800, 801, 802, 803, 805, 807, 809, 819, 820, 821, 823, 824, 825, 827, 848, 850, 852, 854, 867, 868, 869, 870, 871, 872, 878, 879, 882, 883, 886, 889, 890, 895, 896, 898, 900, 901, 903, 906, 907, 908, 911, 913, 917, 923, 929, 934, 935, 941, 942, 943, 952], "primarili": 1, "intend": 1, "us": [1, 9, 11, 12, 17, 22, 23, 27, 28, 29, 33, 51, 60, 69, 70, 87, 89, 90, 92, 94, 95, 97, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 123, 124, 128, 135, 137, 142, 143, 146, 151, 152, 153, 160, 162, 164, 165, 167, 171, 173, 176, 177, 180, 181, 189, 191, 193, 199, 200, 201, 207, 208, 210, 214, 215, 217, 218, 219, 220, 223, 226, 228, 246, 254, 260, 270, 278, 296, 300, 301, 306, 319, 322, 323, 358, 360, 362, 363, 364, 370, 371, 382, 383, 396, 406, 408, 411, 428, 435, 437, 439, 442, 443, 444, 445, 446, 448, 449, 450, 452, 454, 457, 458, 462, 464, 465, 467, 471, 472, 473, 479, 480, 486, 488, 490, 492, 494, 515, 520, 521, 525, 527, 528, 531, 533, 540, 542, 546, 548, 551, 553, 556, 557, 558, 559, 560, 561, 563, 570, 571, 582, 589, 591, 592, 597, 598, 602, 603, 604, 605, 609, 611, 612, 617, 627, 632, 634, 635, 640, 642, 643, 645, 649, 651, 667, 676, 695, 713, 716, 717, 723, 737, 783, 786, 788, 789, 790, 794, 795, 800, 803, 806, 825, 831, 850, 852, 854, 867, 870, 871, 872, 876, 878, 882, 886, 891, 892, 899, 900, 906, 908, 910, 914, 924, 930, 932, 933, 934, 935, 942, 943, 952], "librari": [1, 72, 79, 406, 571, 960], "author": 1, "domain": 1, "specif": [1, 25, 29, 86, 88, 90, 92, 99, 101, 102, 111, 121, 164, 246, 441, 494, 571, 667, 856, 914, 952], "capabl": [1, 29, 246], "which": [1, 17, 26, 27, 29, 30, 31, 32, 33, 60, 61, 62, 63, 64, 89, 99, 100, 101, 102, 103, 110, 111, 117, 129, 137, 141, 152, 153, 213, 215, 246, 256, 296, 368, 383, 385, 388, 389, 391, 392, 393, 415, 442, 443, 444, 445, 446, 448, 449, 450, 483, 564, 571, 585, 592, 594, 603, 604, 631, 632, 639, 640, 648, 667, 675, 793, 806, 810, 814, 815, 816, 817, 818, 870, 903, 952], "mai": [1, 33, 37, 68, 69, 86, 88, 89, 90, 92, 99, 102, 104, 111, 112, 115, 128, 139, 141, 167, 195, 196, 210, 217, 218, 246, 260, 290, 295, 296, 319, 324, 335, 349, 442, 443, 444, 445, 446, 448, 449, 450, 455, 456, 494, 531, 532, 540, 555, 571, 609, 613, 628, 629, 632, 642, 647, 651, 667, 675, 676, 707, 712, 737, 745, 756, 774, 787, 803, 848, 874, 875, 914, 952], "exist": [1, 28, 29, 102, 111, 121, 223, 246, 325, 645, 667, 746], "belong": [1, 152, 246, 603, 667], "core": [1, 91, 210, 246], "cannot": [1, 87, 99, 100, 104, 117, 123, 128, 191, 228, 246, 300, 408, 452, 471, 490, 499, 571, 630, 651, 667, 676, 716, 867, 891, 910, 952], "overrid": [1, 29, 86, 88, 89, 90, 91, 92, 99, 119, 120, 122, 123, 246, 408, 571, 667, 831, 952], "str": [1, 6, 8, 13, 14, 17, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 48, 49, 50, 51, 60, 61, 62, 63, 64, 66, 69, 70, 71, 86, 88, 89, 90, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 122, 129, 132, 134, 135, 136, 137, 138, 139, 140, 144, 145, 146, 148, 150, 151, 152, 153, 155, 157, 160, 162, 164, 166, 167, 170, 171, 172, 173, 174, 175, 177, 179, 181, 183, 185, 186, 187, 188, 189, 190, 191, 195, 196, 198, 199, 200, 201, 202, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 253, 254, 255, 260, 274, 275, 276, 281, 282, 283, 291, 294, 296, 321, 326, 345, 348, 349, 352, 355, 365, 367, 369, 371, 373, 381, 383, 390, 407, 408, 414, 416, 428, 430, 432, 438, 440, 442, 443, 444, 445, 446, 448, 449, 450, 456, 457, 464, 465, 498, 499, 501, 504, 516, 517, 518, 519, 520, 523, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 547, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 571, 577, 585, 589, 590, 591, 592, 594, 595, 596, 599, 601, 602, 603, 604, 606, 608, 609, 617, 618, 621, 623, 624, 625, 629, 630, 631, 632, 633, 634, 639, 640, 641, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 672, 692, 693, 700, 713, 721, 738, 739, 747, 770, 773, 774, 777, 780, 792, 795, 831, 840, 841, 848, 853, 870, 871, 918, 920, 930, 931, 932, 952, 956], "dt": [1, 60, 153, 246, 579, 604, 667, 958], "attempt": [1, 209, 246], "do": [1, 29, 60, 67, 110, 141, 167, 204, 214, 217, 246, 278, 319, 481, 487, 493, 518, 571, 589, 594, 609, 613, 621, 630, 631, 632, 667, 675, 695, 737, 901, 907, 913, 934, 943, 952], "so": [1, 51, 101, 110, 123, 150, 152, 153, 181, 246, 270, 281, 383, 481, 487, 493, 571, 603, 604, 667, 698, 901, 907, 913], "rais": [1, 13, 17, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 117, 118, 189, 246, 295, 300, 414, 469, 471, 483, 494, 546, 712, 716, 889, 891, 903, 914, 934, 943, 952], "an": [1, 5, 25, 28, 29, 37, 61, 63, 64, 65, 67, 70, 72, 76, 77, 79, 86, 99, 100, 101, 102, 103, 105, 108, 110, 112, 120, 121, 122, 128, 130, 131, 139, 142, 144, 146, 152, 153, 164, 165, 167, 177, 181, 187, 189, 204, 209, 217, 223, 228, 246, 255, 256, 260, 276, 278, 281, 295, 296, 300, 305, 308, 309, 310, 314, 315, 316, 317, 318, 319, 325, 358, 368, 371, 395, 406, 407, 415, 433, 441, 442, 443, 444, 445, 446, 448, 449, 450, 469, 471, 476, 494, 504, 510, 521, 525, 537, 542, 546, 555, 556, 557, 560, 564, 571, 582, 587, 588, 589, 594, 596, 599, 603, 604, 609, 613, 621, 630, 645, 646, 651, 667, 676, 693, 695, 698, 712, 716, 721, 726, 727, 728, 729, 730, 733, 734, 735, 736, 737, 746, 783, 787, 793, 856, 857, 858, 859, 860, 861, 863, 864, 865, 870, 871, 889, 891, 896, 914, 934, 943, 952], "attributeerror": 1, "howev": [1, 89, 139, 246, 787, 952], "can": [1, 12, 29, 60, 70, 77, 89, 99, 100, 103, 104, 108, 110, 112, 114, 115, 120, 121, 122, 123, 128, 129, 138, 146, 152, 160, 162, 177, 181, 193, 199, 213, 214, 217, 223, 228, 246, 260, 278, 296, 315, 318, 319, 345, 355, 368, 382, 383, 420, 437, 442, 443, 444, 445, 446, 448, 449, 450, 454, 457, 459, 462, 465, 478, 481, 487, 493, 494, 514, 518, 521, 522, 525, 533, 540, 542, 561, 564, 570, 571, 585, 589, 594, 603, 627, 634, 639, 645, 647, 651, 667, 676, 695, 713, 737, 770, 780, 793, 806, 836, 852, 870, 871, 872, 876, 879, 882, 898, 901, 907, 913, 952], "other": [1, 17, 29, 70, 99, 100, 103, 110, 117, 118, 137, 141, 147, 166, 167, 173, 174, 189, 193, 218, 223, 244, 246, 253, 257, 259, 270, 274, 308, 309, 310, 321, 361, 375, 377, 378, 383, 387, 398, 405, 408, 419, 421, 425, 427, 465, 500, 508, 510, 517, 524, 526, 527, 548, 551, 560, 571, 582, 592, 608, 609, 617, 618, 627, 642, 645, 646, 667, 675, 691, 727, 728, 729, 741, 813, 869, 936, 944, 951, 952], "onli": [1, 17, 25, 29, 51, 60, 66, 68, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 121, 122, 125, 128, 137, 164, 167, 171, 190, 201, 206, 208, 246, 254, 260, 270, 307, 308, 309, 310, 345, 365, 374, 437, 512, 556, 571, 589, 592, 605, 609, 612, 667, 724, 727, 728, 729, 770, 798, 852, 929, 932, 952], "gener": [1, 94, 101, 119, 120, 121, 122, 133, 181, 191, 207, 214, 246, 296, 452, 458, 571, 667, 713, 867, 878, 930, 952], "userwarn": 1, "pl": [1, 7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 571, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 695, 696, 699, 700, 702, 707, 708, 709, 711, 713, 720, 721, 723, 724, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 789, 790, 793, 794, 795, 796, 798, 801, 802, 803, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 826, 830, 831, 832, 833, 834, 835, 836, 837, 838, 844, 845, 846, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 874, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 952], "register_expr_namespac": [1, 61, 63, 64], "greet": 1, "def": [1, 61, 62, 63, 64, 120, 121, 122, 180, 214, 246, 253, 430, 517, 547, 571, 620, 667], "__init__": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 119], "self": [1, 61, 62, 63, 64, 67, 128, 129, 130, 131, 133, 134, 135, 137, 140, 141, 142, 143, 144, 151, 152, 153, 155, 157, 158, 159, 166, 167, 169, 170, 171, 172, 173, 174, 175, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 207, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 298, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 571, 585, 586, 587, 588, 589, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 667, 675, 676, 721, 730, 796, 830, 831, 842, 845, 846, 851, 870, 871, 872, 884, 940, 944, 952], "_expr": [1, 62], "hello": [1, 481, 487, 493, 518, 700, 901, 907, 913], "return": [1, 25, 27, 29, 30, 31, 32, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 78, 80, 85, 86, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 124, 128, 129, 130, 133, 136, 137, 138, 139, 140, 142, 143, 146, 150, 151, 155, 157, 163, 164, 165, 166, 168, 169, 176, 177, 179, 180, 181, 189, 190, 191, 202, 203, 210, 213, 214, 215, 223, 225, 228, 231, 235, 240, 246, 256, 258, 261, 262, 263, 264, 265, 266, 269, 270, 272, 273, 275, 279, 281, 282, 283, 294, 295, 299, 301, 304, 311, 312, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 354, 355, 356, 357, 359, 367, 380, 383, 385, 386, 387, 388, 389, 391, 392, 393, 400, 404, 408, 415, 420, 430, 438, 439, 452, 453, 459, 460, 461, 468, 470, 472, 474, 475, 476, 478, 479, 480, 482, 483, 486, 488, 489, 490, 491, 497, 503, 504, 505, 506, 507, 509, 510, 512, 513, 514, 517, 519, 520, 521, 522, 525, 534, 535, 536, 542, 544, 546, 547, 556, 557, 560, 562, 564, 571, 585, 587, 589, 592, 593, 594, 596, 605, 611, 612, 613, 620, 621, 630, 631, 632, 637, 638, 639, 640, 645, 648, 654, 658, 663, 667, 672, 673, 674, 676, 683, 684, 686, 687, 689, 690, 692, 696, 698, 699, 700, 711, 712, 715, 717, 720, 726, 738, 739, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 787, 792, 800, 802, 803, 808, 810, 811, 813, 814, 815, 816, 817, 818, 822, 824, 827, 830, 831, 836, 848, 854, 855, 867, 868, 869, 871, 879, 888, 889, 890, 892, 894, 895, 896, 898, 899, 900, 902, 903, 906, 908, 909, 910, 911, 914, 917, 923, 925, 937, 939, 940, 944, 952], "lit": [1, 97, 124, 383, 395, 531, 533, 540, 561, 564, 571, 795, 952], "alia": [1, 60, 62, 64, 152, 153, 169, 216, 223, 246, 253, 257, 260, 276, 278, 304, 308, 309, 310, 314, 315, 316, 317, 318, 320, 324, 325, 326, 329, 330, 331, 333, 335, 336, 337, 339, 341, 344, 345, 346, 348, 349, 350, 351, 352, 354, 355, 357, 358, 361, 371, 373, 375, 377, 378, 381, 383, 386, 387, 395, 398, 399, 400, 405, 408, 417, 419, 421, 425, 427, 429, 431, 437, 453, 469, 470, 473, 476, 479, 482, 488, 490, 491, 492, 498, 499, 500, 508, 509, 510, 516, 517, 520, 523, 524, 526, 527, 531, 532, 533, 536, 537, 540, 541, 547, 555, 556, 560, 561, 564, 571, 603, 604, 606, 612, 641, 645, 667, 695, 745, 747, 752, 770, 773, 779, 783, 827, 910, 911, 952], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 481, 487, 493, 700, 901, 907, 913], "select": [1, 28, 60, 61, 62, 63, 65, 98, 99, 100, 101, 102, 104, 108, 110, 115, 128, 163, 167, 177, 180, 189, 198, 211, 216, 219, 246, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 292, 293, 296, 297, 298, 304, 307, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 368, 372, 374, 376, 379, 381, 382, 384, 385, 387, 388, 390, 394, 395, 396, 397, 399, 401, 402, 403, 404, 406, 407, 409, 410, 411, 418, 420, 422, 423, 424, 426, 427, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 480, 481, 483, 486, 487, 489, 490, 491, 493, 495, 496, 498, 499, 501, 502, 505, 506, 507, 509, 511, 512, 513, 514, 515, 518, 519, 520, 521, 522, 523, 525, 526, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 541, 542, 544, 548, 549, 550, 551, 552, 553, 555, 558, 559, 560, 561, 562, 563, 571, 590, 606, 609, 620, 633, 641, 646, 648, 667, 695, 713, 870, 871, 883, 895, 898, 924, 952], "shape": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 83, 86, 88, 89, 90, 91, 92, 93, 94, 97, 110, 115, 121, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 148, 149, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 166, 167, 170, 171, 172, 173, 175, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 191, 193, 195, 196, 198, 199, 200, 201, 202, 203, 205, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 544, 547, 548, 549, 550, 551, 552, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 571, 585, 587, 589, 591, 592, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 627, 628, 629, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 694, 695, 696, 699, 700, 702, 707, 708, 709, 711, 713, 720, 721, 723, 724, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 789, 790, 793, 794, 795, 796, 798, 801, 802, 803, 805, 806, 808, 810, 813, 814, 815, 816, 817, 818, 822, 824, 830, 831, 836, 844, 845, 846, 848, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 870, 871, 874, 878, 879, 880, 881, 883, 884, 885, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 921, 923, 924, 925, 926, 927, 930, 931, 932, 936, 937, 938, 939, 940, 941, 944, 952], "3": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 101, 103, 110, 115, 116, 117, 118, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 253, 254, 255, 256, 260, 269, 270, 271, 275, 276, 277, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 304, 305, 306, 307, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 334, 340, 342, 346, 347, 348, 349, 350, 352, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 419, 420, 421, 425, 426, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 464, 465, 466, 469, 472, 473, 475, 477, 479, 482, 488, 489, 490, 491, 492, 498, 499, 500, 501, 503, 504, 505, 509, 512, 513, 514, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 537, 538, 539, 540, 541, 544, 546, 547, 548, 549, 550, 551, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 571, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 672, 675, 676, 677, 679, 680, 681, 683, 684, 685, 686, 687, 694, 695, 696, 699, 702, 707, 708, 709, 711, 713, 720, 721, 723, 724, 725, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 745, 746, 747, 750, 751, 752, 753, 755, 757, 758, 759, 761, 763, 764, 765, 767, 769, 771, 773, 774, 775, 779, 780, 782, 783, 787, 789, 790, 793, 794, 795, 796, 798, 801, 802, 803, 805, 806, 808, 810, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 825, 826, 830, 831, 832, 833, 834, 835, 836, 837, 838, 844, 845, 846, 848, 849, 850, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 874, 878, 880, 881, 882, 883, 884, 886, 892, 893, 895, 897, 899, 902, 908, 912, 921, 922, 923, 924, 925, 926, 927, 929, 930, 933, 934, 935, 937, 938, 939, 940, 941, 942, 944, 952], "1": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 104, 110, 111, 115, 116, 117, 118, 119, 121, 122, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 571, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 695, 696, 698, 699, 702, 707, 708, 709, 711, 713, 720, 721, 723, 724, 725, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 788, 789, 790, 793, 794, 795, 796, 798, 801, 802, 803, 805, 806, 808, 810, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 824, 826, 830, 832, 833, 834, 835, 836, 837, 838, 844, 845, 846, 848, 849, 850, 853, 854, 855, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 895, 897, 898, 904, 910, 911, 914, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 952], "2": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 71, 86, 88, 89, 90, 91, 92, 93, 94, 101, 110, 115, 116, 117, 118, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 163, 164, 166, 168, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 257, 258, 259, 260, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 325, 326, 330, 332, 333, 335, 336, 337, 339, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 355, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 463, 464, 465, 466, 468, 470, 473, 476, 477, 478, 479, 481, 482, 483, 484, 485, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 544, 546, 547, 548, 549, 550, 551, 552, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 571, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 608, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 672, 675, 676, 678, 682, 683, 684, 685, 686, 687, 694, 695, 696, 699, 700, 702, 707, 708, 709, 711, 713, 720, 723, 724, 725, 726, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 746, 748, 749, 753, 758, 759, 765, 767, 772, 774, 775, 778, 780, 782, 784, 786, 787, 788, 789, 790, 793, 794, 795, 796, 798, 801, 802, 803, 805, 806, 808, 810, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 826, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 844, 845, 846, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 874, 878, 880, 882, 883, 884, 885, 886, 888, 890, 896, 897, 898, 901, 902, 903, 904, 905, 907, 910, 911, 913, 914, 921, 922, 923, 924, 925, 926, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 941, 942, 944, 952], "column_0": [1, 128, 214, 246], "register_dataframe_namespac": [1, 62, 63, 64], "split": [1, 61, 165, 246, 490, 491, 910, 911], "splitfram": [1, 61], "df": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 61, 62, 65, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 110, 120, 121, 122, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 292, 293, 296, 297, 298, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 544, 547, 548, 549, 550, 551, 552, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 571, 604, 641, 642, 648, 651, 654, 663, 667, 695, 713, 723, 895, 898, 905, 910, 911, 931, 952], "_df": [1, 61], "by_alternate_row": 1, "list": [1, 29, 36, 60, 61, 63, 67, 69, 86, 88, 89, 90, 92, 93, 96, 98, 99, 100, 101, 102, 104, 108, 110, 111, 120, 121, 122, 132, 135, 138, 139, 140, 144, 149, 151, 152, 157, 164, 176, 179, 189, 190, 193, 199, 205, 206, 214, 215, 216, 217, 223, 226, 227, 246, 254, 274, 277, 278, 279, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 367, 373, 406, 415, 416, 428, 438, 439, 441, 442, 443, 444, 445, 446, 448, 449, 450, 456, 464, 465, 476, 489, 498, 499, 504, 522, 525, 526, 533, 537, 546, 548, 551, 560, 561, 571, 590, 591, 593, 595, 599, 602, 603, 617, 627, 634, 640, 641, 645, 646, 649, 650, 667, 688, 691, 694, 695, 696, 698, 699, 700, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 725, 738, 787, 792, 796, 799, 803, 813, 848, 854, 856, 857, 858, 859, 860, 861, 863, 864, 865, 868, 896, 909, 924, 933, 952], "with_row_count": [1, 246, 408, 571, 667, 871, 952], "name": [1, 15, 19, 21, 28, 29, 31, 50, 61, 62, 63, 64, 69, 70, 75, 86, 88, 89, 90, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 112, 113, 114, 118, 119, 120, 121, 122, 128, 129, 132, 135, 136, 137, 140, 145, 148, 150, 151, 164, 166, 167, 173, 179, 181, 185, 189, 190, 192, 193, 199, 205, 207, 212, 213, 214, 215, 216, 217, 218, 223, 224, 225, 226, 246, 255, 260, 296, 349, 355, 365, 383, 395, 407, 414, 416, 428, 432, 465, 498, 499, 501, 522, 524, 525, 526, 527, 528, 530, 533, 538, 544, 545, 548, 551, 553, 554, 556, 558, 560, 561, 562, 571, 585, 590, 591, 592, 595, 602, 608, 609, 617, 624, 626, 627, 634, 639, 640, 641, 642, 645, 647, 648, 649, 667, 672, 713, 726, 738, 774, 780, 848, 853, 918, 920, 930, 931, 935, 952], "n": [1, 11, 14, 22, 32, 36, 38, 61, 62, 63, 64, 70, 96, 97, 99, 100, 110, 124, 128, 130, 141, 152, 155, 164, 165, 169, 190, 191, 200, 202, 203, 206, 208, 220, 231, 240, 246, 277, 282, 294, 304, 319, 320, 324, 325, 331, 354, 358, 368, 380, 400, 429, 438, 452, 462, 467, 484, 490, 491, 503, 505, 509, 510, 515, 517, 528, 542, 544, 553, 556, 558, 559, 562, 563, 571, 587, 589, 603, 605, 612, 635, 637, 638, 643, 654, 663, 667, 675, 694, 699, 711, 720, 726, 737, 740, 745, 746, 752, 779, 783, 793, 802, 827, 844, 867, 882, 886, 904, 910, 911, 923, 925, 932, 937, 942, 952], "filter": [1, 61, 102, 110, 111, 115, 137, 160, 161, 162, 228, 246, 473, 492, 516, 521, 540, 571, 592, 596, 606, 651, 667, 870, 952], "col": [1, 27, 29, 60, 61, 62, 63, 65, 90, 92, 110, 120, 121, 128, 140, 144, 151, 152, 153, 161, 163, 177, 180, 189, 193, 199, 216, 223, 226, 246, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 292, 293, 296, 297, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 371, 372, 373, 374, 375, 377, 378, 381, 382, 383, 384, 386, 387, 389, 390, 391, 394, 395, 396, 397, 398, 402, 403, 404, 405, 408, 409, 410, 411, 418, 419, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 524, 526, 527, 531, 532, 533, 536, 539, 540, 541, 542, 543, 548, 551, 554, 555, 561, 564, 571, 595, 599, 602, 603, 604, 606, 620, 627, 634, 641, 645, 646, 649, 667, 695, 713, 723, 770, 854, 870, 871, 895, 898, 914, 952], "0": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 33, 60, 61, 62, 64, 65, 69, 94, 99, 100, 101, 103, 104, 108, 110, 112, 113, 114, 115, 116, 119, 120, 121, 122, 124, 128, 130, 131, 133, 134, 135, 138, 142, 143, 146, 147, 149, 150, 151, 152, 154, 158, 163, 164, 165, 166, 168, 170, 171, 172, 175, 176, 177, 178, 182, 183, 187, 191, 192, 193, 196, 198, 199, 200, 201, 207, 208, 210, 211, 214, 217, 219, 220, 223, 224, 226, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 252, 254, 257, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 276, 278, 281, 287, 296, 305, 307, 309, 310, 311, 312, 314, 319, 322, 323, 332, 336, 337, 339, 340, 344, 350, 351, 361, 362, 363, 364, 366, 367, 368, 369, 370, 374, 375, 377, 378, 379, 382, 385, 388, 389, 391, 392, 393, 395, 396, 398, 402, 403, 405, 406, 408, 409, 410, 411, 418, 419, 421, 423, 424, 425, 426, 427, 429, 430, 431, 434, 435, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 457, 459, 460, 461, 462, 466, 467, 475, 494, 497, 500, 502, 506, 507, 508, 510, 515, 521, 522, 523, 524, 526, 528, 530, 531, 533, 537, 540, 549, 550, 553, 554, 555, 558, 561, 563, 564, 571, 587, 588, 591, 593, 597, 598, 602, 603, 608, 611, 616, 621, 622, 626, 627, 629, 630, 632, 634, 635, 643, 645, 646, 647, 649, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 667, 677, 678, 679, 680, 681, 682, 683, 685, 687, 695, 698, 721, 724, 726, 731, 732, 737, 738, 739, 741, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 768, 769, 775, 776, 786, 788, 789, 790, 792, 794, 798, 801, 803, 810, 812, 814, 815, 816, 817, 818, 824, 825, 830, 833, 834, 844, 848, 849, 850, 856, 858, 859, 861, 862, 863, 865, 867, 879, 880, 881, 885, 886, 888, 895, 898, 917, 926, 927, 930, 935, 936, 940, 942, 943, 952], "drop": [1, 89, 128, 136, 137, 215, 223, 246, 277, 320, 322, 323, 494, 571, 592, 640, 645, 667, 694, 740, 742, 743, 952], "aaa": [1, 29, 246, 498, 499], "bbb": [1, 29, 246, 498, 499], "ccc": [1, 29, 246, 498, 499], "ddd": [1, 29, 246, 498, 499], "eee": [1, 29, 246], "fff": 1, "column": [1, 14, 15, 18, 19, 21, 29, 31, 51, 60, 61, 68, 69, 70, 73, 75, 86, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 127, 128, 129, 135, 136, 137, 138, 140, 145, 148, 150, 151, 152, 153, 157, 158, 164, 166, 167, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 192, 193, 199, 200, 201, 205, 207, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 226, 246, 256, 258, 260, 269, 274, 279, 292, 295, 296, 325, 329, 332, 334, 335, 336, 338, 340, 342, 343, 346, 347, 350, 356, 357, 359, 365, 367, 371, 373, 383, 395, 408, 413, 414, 416, 428, 432, 436, 438, 439, 442, 443, 444, 445, 446, 448, 449, 450, 457, 464, 465, 474, 490, 491, 494, 501, 516, 518, 519, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 571, 585, 591, 592, 593, 595, 602, 603, 604, 608, 609, 613, 614, 615, 616, 617, 619, 620, 622, 624, 626, 627, 634, 635, 636, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 667, 673, 674, 691, 696, 709, 712, 738, 748, 749, 750, 753, 755, 756, 760, 762, 765, 767, 768, 771, 772, 775, 778, 781, 782, 784, 792, 848, 854, 876, 894, 910, 911, 921, 930, 931, 952], "txt": [1, 110], "utf8": [1, 9, 17, 51, 71, 89, 93, 99, 100, 110, 119, 138, 139, 140, 146, 192, 209, 246, 283, 367, 408, 468, 472, 475, 476, 478, 479, 488, 489, 490, 491, 494, 525, 527, 571, 593, 595, 626, 667, 700, 777, 792, 823, 888, 892, 895, 896, 898, 899, 908, 909, 910, 911, 914, 952], "register_lazyframe_namespac": [1, 61, 62, 64], "dtypeoper": [1, 63], "ldf": [1, 63, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663], "_ldf": [1, 63], "upcast_integer_typ": [1, 63], "with_column": [1, 63, 153, 180, 246, 253, 260, 270, 278, 305, 306, 308, 309, 310, 315, 318, 320, 361, 375, 377, 378, 379, 382, 383, 386, 389, 391, 392, 393, 395, 398, 405, 408, 419, 421, 425, 428, 429, 430, 431, 473, 479, 482, 484, 485, 488, 490, 491, 492, 494, 497, 500, 508, 510, 517, 520, 521, 524, 527, 533, 537, 547, 561, 564, 571, 604, 620, 667, 695, 723, 914], "tp": [1, 63], "cast": [1, 62, 63, 71, 86, 146, 152, 153, 180, 210, 223, 246, 259, 306, 317, 318, 324, 408, 427, 430, 437, 477, 478, 497, 502, 508, 527, 571, 603, 604, 620, 645, 667, 723, 735, 736, 745, 852, 897, 898, 922, 931, 936, 952], "int64": [1, 29, 31, 62, 63, 93, 97, 99, 124, 138, 146, 152, 153, 180, 192, 204, 210, 246, 317, 318, 330, 333, 337, 339, 341, 344, 351, 365, 430, 437, 477, 502, 508, 521, 525, 538, 560, 571, 593, 603, 604, 620, 626, 648, 667, 735, 736, 751, 754, 761, 763, 766, 769, 776, 852, 869, 922, 934, 935, 936, 952], "int8": [1, 63, 146, 246, 317, 318, 502, 571, 735, 736, 740, 831, 855, 922, 940, 952], "int16": [1, 63, 317, 318, 502, 571, 735, 736, 831, 922, 932, 952], "int32": [1, 63, 86, 89, 93, 121, 122, 152, 153, 165, 246, 305, 335, 359, 508, 571, 603, 604, 667, 756, 784, 830, 936, 952], "b": [1, 26, 27, 30, 33, 51, 63, 68, 71, 86, 88, 89, 90, 91, 92, 93, 94, 103, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 157, 158, 160, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 253, 255, 259, 260, 271, 274, 278, 283, 285, 298, 305, 306, 313, 321, 322, 323, 365, 369, 370, 371, 373, 376, 379, 382, 383, 385, 388, 389, 390, 391, 392, 393, 395, 399, 401, 407, 420, 426, 428, 430, 432, 440, 457, 463, 465, 474, 477, 484, 501, 512, 514, 516, 518, 519, 520, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 537, 538, 539, 540, 541, 544, 547, 548, 549, 550, 551, 552, 553, 555, 558, 559, 560, 561, 562, 563, 571, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 605, 608, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 675, 695, 723, 739, 741, 786, 787, 795, 806, 813, 823, 853, 869, 894, 897, 904, 921, 935, 939, 952], "4": [1, 14, 22, 26, 27, 29, 30, 33, 51, 60, 61, 62, 63, 64, 65, 68, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 110, 117, 118, 122, 128, 129, 130, 131, 134, 137, 140, 141, 142, 143, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 171, 173, 176, 177, 179, 180, 181, 182, 186, 190, 194, 199, 202, 203, 204, 205, 206, 207, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 257, 259, 260, 271, 276, 277, 278, 279, 282, 290, 291, 294, 298, 304, 305, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 329, 333, 340, 341, 342, 346, 347, 349, 350, 351, 355, 356, 357, 359, 361, 366, 369, 370, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 392, 393, 395, 398, 399, 400, 401, 403, 405, 407, 408, 419, 421, 425, 427, 428, 431, 432, 434, 435, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 453, 455, 456, 459, 463, 464, 465, 466, 469, 479, 480, 482, 483, 486, 488, 490, 491, 494, 498, 499, 500, 501, 503, 504, 505, 508, 509, 510, 517, 520, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 537, 539, 540, 544, 546, 547, 548, 549, 550, 551, 552, 553, 558, 559, 560, 561, 562, 563, 564, 571, 585, 587, 588, 589, 592, 594, 595, 596, 597, 598, 600, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 675, 678, 685, 694, 695, 696, 699, 707, 708, 711, 720, 724, 725, 727, 737, 739, 741, 753, 754, 760, 762, 765, 766, 767, 768, 772, 774, 775, 776, 777, 780, 781, 782, 794, 795, 802, 803, 805, 806, 808, 813, 815, 816, 817, 818, 822, 831, 837, 844, 845, 846, 848, 850, 854, 859, 861, 862, 863, 864, 865, 867, 869, 879, 883, 884, 889, 899, 900, 902, 903, 906, 908, 910, 911, 914, 921, 923, 924, 925, 932, 935, 936, 937, 944, 952], "c": [1, 26, 27, 30, 33, 51, 61, 63, 71, 89, 91, 93, 103, 110, 120, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 144, 145, 146, 147, 149, 150, 151, 152, 155, 157, 158, 165, 166, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 185, 187, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 204, 208, 209, 210, 211, 213, 214, 217, 218, 220, 221, 223, 226, 229, 230, 231, 232, 233, 234, 236, 239, 240, 246, 253, 260, 274, 283, 285, 383, 395, 428, 430, 457, 490, 494, 512, 514, 518, 519, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 539, 540, 541, 544, 547, 548, 549, 550, 551, 552, 553, 558, 559, 561, 562, 563, 571, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 602, 603, 608, 611, 617, 621, 624, 625, 626, 627, 630, 633, 634, 639, 642, 645, 646, 649, 652, 653, 654, 655, 656, 657, 659, 662, 663, 667, 739, 806, 823, 910, 914, 939, 952], "5": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 30, 33, 60, 61, 63, 64, 65, 68, 69, 86, 89, 90, 91, 92, 93, 96, 97, 100, 116, 121, 122, 124, 128, 130, 131, 134, 140, 141, 142, 143, 146, 148, 149, 150, 151, 152, 153, 155, 156, 158, 159, 161, 163, 164, 167, 168, 169, 171, 173, 176, 177, 179, 181, 182, 183, 186, 190, 194, 199, 202, 203, 204, 205, 206, 212, 217, 219, 222, 223, 224, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 253, 254, 257, 276, 278, 279, 282, 287, 293, 294, 304, 305, 306, 307, 308, 309, 310, 319, 320, 321, 325, 326, 330, 348, 350, 351, 352, 356, 364, 365, 368, 374, 375, 377, 378, 380, 383, 386, 389, 391, 392, 393, 395, 398, 400, 401, 419, 421, 427, 428, 429, 432, 434, 435, 439, 440, 441, 442, 443, 445, 449, 451, 453, 459, 465, 470, 478, 479, 482, 483, 497, 500, 501, 503, 505, 509, 510, 520, 523, 524, 526, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 544, 546, 547, 548, 549, 550, 551, 552, 553, 555, 558, 559, 561, 562, 563, 571, 587, 588, 589, 594, 595, 596, 597, 598, 600, 602, 603, 604, 605, 607, 609, 610, 611, 612, 615, 616, 617, 621, 628, 629, 630, 633, 634, 635, 636, 637, 638, 644, 645, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 675, 678, 682, 685, 695, 696, 699, 702, 711, 720, 723, 725, 727, 733, 737, 738, 739, 740, 741, 746, 747, 748, 749, 750, 751, 773, 775, 776, 778, 781, 782, 790, 793, 802, 803, 805, 806, 830, 831, 837, 844, 845, 846, 848, 849, 850, 854, 856, 857, 858, 860, 861, 864, 867, 869, 879, 885, 890, 898, 899, 903, 923, 937, 940, 944, 952], "6": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 86, 89, 90, 91, 92, 94, 128, 132, 135, 136, 137, 138, 140, 141, 144, 145, 147, 148, 149, 150, 152, 153, 155, 157, 158, 159, 161, 163, 164, 166, 170, 171, 172, 173, 175, 178, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 216, 217, 218, 219, 220, 221, 223, 224, 231, 239, 240, 246, 253, 257, 260, 279, 298, 305, 317, 318, 321, 325, 345, 347, 350, 360, 369, 370, 376, 380, 382, 400, 401, 427, 433, 435, 436, 439, 442, 443, 444, 445, 446, 448, 449, 450, 453, 465, 470, 474, 479, 482, 483, 500, 503, 505, 517, 518, 520, 531, 532, 533, 537, 540, 547, 561, 571, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 603, 604, 605, 607, 608, 610, 612, 613, 617, 621, 624, 626, 627, 628, 629, 630, 633, 634, 637, 638, 641, 642, 644, 645, 647, 648, 654, 662, 663, 667, 675, 696, 725, 731, 735, 736, 739, 741, 770, 782, 803, 837, 850, 854, 859, 861, 862, 863, 865, 869, 890, 894, 899, 903, 922, 952], "7": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 70, 132, 133, 134, 135, 136, 138, 140, 144, 145, 147, 152, 153, 155, 157, 159, 166, 170, 171, 172, 175, 178, 183, 185, 187, 189, 191, 192, 193, 195, 196, 198, 200, 201, 202, 203, 208, 209, 210, 211, 217, 218, 219, 220, 221, 246, 253, 257, 318, 325, 329, 346, 348, 349, 355, 357, 359, 366, 380, 382, 400, 408, 427, 439, 443, 449, 465, 503, 505, 520, 531, 532, 540, 547, 561, 571, 590, 591, 593, 595, 599, 603, 604, 605, 607, 608, 612, 622, 624, 626, 627, 637, 638, 642, 648, 667, 682, 746, 750, 756, 774, 780, 782, 831, 854, 864, 952], "float32": [1, 27, 63, 146, 208, 246, 667, 809, 830, 952], "lazi": [1, 63, 68, 70, 97, 110, 121, 124, 167, 180, 246, 260, 296, 521, 542, 571, 582, 608, 609, 646, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 667], "i16": [1, 63, 457, 571, 831, 932, 952], "i32": [1, 63, 86, 89, 93, 121, 193, 246, 305, 335, 359, 457, 483, 564, 571, 627, 667, 756, 784, 830, 903, 952], "f32": [1, 63, 208, 246, 278, 435, 457, 537, 571, 667, 695, 830, 850, 952], "i64": [1, 14, 18, 61, 62, 63, 64, 68, 86, 88, 89, 90, 91, 92, 93, 97, 110, 122, 124, 128, 129, 130, 131, 132, 135, 137, 138, 140, 141, 143, 144, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 162, 163, 166, 167, 170, 173, 175, 179, 180, 181, 182, 185, 186, 187, 188, 191, 193, 195, 196, 198, 199, 201, 202, 203, 205, 211, 213, 214, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 236, 239, 240, 246, 253, 255, 259, 260, 277, 278, 279, 280, 281, 282, 284, 286, 288, 289, 290, 291, 292, 293, 294, 297, 298, 304, 306, 308, 309, 310, 315, 316, 317, 318, 320, 321, 330, 331, 333, 337, 339, 341, 344, 351, 354, 365, 368, 370, 371, 372, 373, 375, 376, 380, 381, 382, 383, 386, 389, 391, 392, 393, 395, 397, 400, 401, 404, 406, 407, 419, 420, 421, 428, 429, 430, 431, 432, 433, 436, 437, 439, 440, 452, 454, 455, 457, 458, 459, 463, 464, 465, 484, 485, 498, 499, 500, 501, 502, 503, 504, 505, 509, 510, 511, 513, 516, 518, 520, 524, 525, 527, 531, 532, 533, 537, 538, 539, 540, 544, 547, 548, 551, 555, 557, 561, 562, 564, 571, 585, 587, 589, 591, 592, 595, 596, 598, 599, 600, 602, 603, 604, 605, 607, 608, 609, 610, 612, 613, 614, 617, 619, 620, 621, 624, 625, 627, 628, 629, 633, 634, 636, 637, 638, 639, 640, 641, 642, 645, 647, 649, 650, 651, 653, 654, 655, 656, 659, 662, 663, 667, 675, 676, 694, 695, 696, 699, 707, 708, 709, 711, 720, 723, 727, 730, 733, 734, 735, 736, 739, 751, 752, 754, 761, 763, 766, 769, 773, 776, 779, 793, 795, 796, 802, 805, 813, 836, 853, 854, 857, 860, 864, 867, 870, 871, 874, 878, 879, 883, 884, 921, 923, 924, 925, 931, 937, 938, 941, 944, 952], "register_series_namespac": [1, 61, 62, 63], "math": [1, 64, 731, 880, 926, 952], "mathshortcut": [1, 64], "": [1, 27, 29, 64, 69, 86, 94, 99, 100, 111, 122, 129, 135, 137, 139, 140, 151, 152, 158, 166, 167, 179, 181, 186, 187, 193, 199, 203, 207, 213, 215, 216, 217, 246, 282, 283, 290, 291, 294, 331, 352, 365, 396, 415, 420, 423, 424, 428, 429, 437, 441, 465, 479, 480, 482, 486, 488, 489, 491, 494, 497, 498, 499, 522, 525, 528, 533, 536, 538, 541, 542, 548, 551, 553, 560, 561, 571, 585, 591, 592, 595, 602, 603, 609, 627, 634, 639, 640, 641, 651, 667, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 696, 699, 700, 702, 707, 708, 709, 711, 720, 721, 724, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 740, 741, 746, 752, 773, 774, 780, 787, 789, 790, 793, 794, 795, 796, 798, 801, 802, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 844, 845, 846, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 874, 878, 879, 880, 881, 883, 884, 886, 889, 890, 892, 893, 894, 896, 897, 899, 900, 901, 902, 903, 904, 906, 907, 908, 911, 912, 913, 914, 917, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 952], "_": [1, 60, 64, 94, 181, 207, 246, 490, 910, 930, 952], "squar": [1, 64, 228, 396, 466, 571, 651, 825, 885, 952], "cube": [1, 64, 431, 571], "s2": [1, 118, 146, 246, 675, 725, 741, 813, 837, 869, 935, 944, 952], "renam": [1, 89, 99, 100, 193, 223, 226, 246, 255, 407, 417, 499, 557, 560, 571, 627, 645, 649, 667, 831, 920, 931, 952], "n2": 1, "in_plac": [1, 157, 197, 221, 246, 851, 853, 877, 884, 952], "true": [1, 5, 9, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 65, 67, 68, 70, 71, 86, 87, 91, 96, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 125, 127, 129, 130, 131, 134, 143, 146, 147, 149, 150, 151, 152, 158, 160, 161, 162, 164, 167, 168, 171, 176, 177, 179, 181, 182, 189, 190, 191, 193, 199, 205, 210, 213, 214, 215, 216, 217, 219, 223, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 254, 256, 257, 258, 259, 260, 270, 275, 292, 295, 300, 305, 314, 315, 316, 317, 318, 334, 349, 350, 355, 360, 361, 362, 363, 364, 377, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 398, 405, 425, 427, 437, 447, 452, 457, 462, 464, 465, 469, 471, 473, 477, 478, 483, 489, 490, 492, 494, 498, 499, 504, 511, 514, 517, 519, 520, 521, 522, 528, 529, 540, 556, 558, 560, 564, 571, 585, 587, 588, 589, 594, 596, 598, 602, 603, 608, 609, 611, 613, 617, 621, 627, 630, 631, 632, 634, 639, 640, 641, 645, 650, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 667, 673, 674, 675, 676, 686, 709, 712, 716, 721, 725, 726, 755, 774, 775, 780, 786, 788, 789, 790, 796, 800, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 825, 837, 845, 846, 852, 862, 869, 882, 884, 889, 891, 893, 897, 898, 903, 909, 910, 912, 914, 934, 935, 943, 944, 952], "s3": [1, 102, 111, 115, 952], "n3": 1, "8": [1, 26, 27, 30, 31, 32, 33, 44, 57, 59, 60, 61, 63, 64, 68, 69, 94, 116, 120, 121, 128, 132, 133, 134, 135, 136, 137, 138, 140, 144, 145, 147, 150, 155, 157, 166, 170, 171, 172, 175, 183, 185, 187, 189, 191, 192, 193, 195, 196, 198, 200, 201, 202, 203, 208, 209, 210, 211, 217, 218, 220, 221, 223, 246, 257, 259, 271, 277, 278, 313, 315, 318, 319, 322, 323, 325, 382, 399, 421, 427, 431, 432, 439, 440, 443, 444, 446, 448, 450, 457, 463, 465, 480, 486, 494, 501, 505, 517, 523, 528, 529, 530, 532, 533, 537, 539, 544, 547, 548, 549, 550, 551, 552, 553, 558, 559, 561, 562, 563, 571, 590, 591, 592, 593, 595, 599, 605, 608, 612, 613, 621, 624, 626, 627, 637, 638, 642, 645, 648, 667, 694, 695, 737, 756, 803, 844, 848, 854, 856, 859, 861, 862, 863, 865, 900, 906, 914, 952], "9": [1, 26, 27, 30, 33, 60, 68, 128, 133, 146, 153, 155, 159, 193, 202, 217, 218, 221, 223, 239, 246, 253, 257, 259, 271, 277, 289, 292, 313, 315, 318, 322, 323, 325, 329, 346, 356, 357, 382, 387, 395, 399, 427, 439, 441, 443, 449, 459, 463, 505, 520, 526, 531, 532, 571, 604, 605, 607, 612, 627, 637, 642, 645, 662, 667, 694, 709, 750, 760, 762, 768, 774, 775, 780, 781, 813, 854, 856, 864, 866, 879, 952], "27": [1, 64, 239, 318, 335, 347, 359, 571, 662, 952], "16": [1, 29, 41, 54, 62, 69, 94, 116, 152, 153, 223, 246, 315, 318, 367, 382, 421, 431, 443, 483, 494, 520, 531, 536, 537, 540, 553, 558, 571, 603, 604, 630, 645, 667, 774, 780, 792, 844, 880, 903, 926, 952], "64": [1, 33, 40, 43, 56, 62, 64, 246, 421, 431, 571, 632, 667, 844, 952], "25": [1, 29, 64, 70, 93, 152, 153, 167, 219, 223, 246, 320, 335, 349, 355, 359, 510, 542, 571, 603, 604, 609, 615, 643, 645, 667, 740, 774, 780, 786, 803, 844, 848, 952], "125": [1, 29, 64, 246, 253, 571, 844, 952], "arg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 180, 210, 246, 430, 522, 541, 571, 620, 667, 676, 934, 935, 952], "ani": [2, 3, 4, 7, 27, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 66, 86, 87, 88, 89, 90, 91, 92, 99, 100, 102, 103, 104, 108, 110, 111, 112, 114, 119, 121, 122, 125, 128, 133, 137, 141, 143, 144, 146, 163, 164, 165, 179, 180, 189, 190, 205, 206, 209, 210, 215, 217, 246, 253, 257, 260, 274, 278, 305, 350, 361, 370, 375, 377, 378, 387, 398, 405, 406, 408, 417, 419, 421, 425, 427, 430, 439, 441, 453, 456, 483, 494, 500, 504, 510, 517, 520, 528, 539, 546, 558, 564, 571, 592, 598, 620, 640, 667, 675, 676, 691, 695, 741, 775, 795, 813, 824, 831, 854, 856, 868, 871, 903, 914, 924, 933, 934, 935, 952], "kwarg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 133, 180, 210, 246, 430, 571, 620, 667, 935, 952], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 571, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 952, 959], "method": [2, 3, 4, 7, 26, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 87, 99, 100, 103, 119, 137, 151, 159, 164, 177, 183, 189, 190, 215, 223, 238, 246, 253, 256, 257, 361, 368, 375, 377, 378, 382, 398, 405, 419, 421, 425, 427, 431, 434, 435, 442, 443, 444, 445, 446, 448, 449, 450, 500, 510, 512, 517, 528, 553, 554, 558, 565, 567, 571, 572, 573, 576, 577, 578, 579, 582, 592, 607, 622, 640, 645, 661, 667, 676, 793, 805, 849, 850, 861, 936, 946, 948, 952, 953, 956, 957, 958], "A": [4, 27, 29, 48, 67, 70, 93, 99, 100, 101, 108, 110, 123, 146, 152, 167, 181, 190, 205, 217, 218, 219, 223, 246, 252, 296, 325, 330, 333, 337, 339, 341, 344, 351, 361, 368, 377, 378, 385, 388, 389, 391, 398, 405, 406, 407, 415, 425, 432, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 469, 470, 475, 476, 478, 484, 485, 497, 501, 526, 537, 541, 571, 603, 609, 624, 642, 645, 667, 713, 746, 751, 754, 761, 763, 766, 769, 776, 793, 856, 857, 858, 860, 863, 864, 865, 889, 890, 895, 896, 898, 904, 905, 914, 917, 952], "encod": [4, 59, 99, 100, 110, 300, 471, 716, 891], "set": [4, 5, 6, 7, 8, 9, 11, 13, 14, 17, 22, 23, 25, 27, 29, 30, 31, 32, 61, 65, 70, 87, 89, 92, 94, 99, 100, 103, 104, 108, 110, 112, 113, 114, 117, 118, 120, 121, 122, 123, 125, 127, 132, 137, 151, 154, 164, 167, 173, 191, 193, 198, 207, 214, 215, 217, 223, 246, 260, 291, 295, 296, 358, 379, 387, 408, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 458, 462, 463, 481, 487, 488, 493, 521, 556, 560, 564, 571, 590, 592, 594, 602, 608, 609, 613, 617, 627, 631, 632, 633, 640, 645, 648, 651, 667, 675, 676, 708, 712, 713, 783, 801, 813, 831, 856, 857, 858, 859, 860, 861, 863, 864, 865, 867, 871, 878, 882, 883, 901, 907, 908, 913, 934, 952], "string": [4, 6, 8, 11, 12, 13, 17, 27, 29, 31, 32, 36, 51, 59, 70, 71, 93, 99, 100, 110, 119, 120, 122, 129, 146, 150, 151, 152, 153, 167, 193, 199, 208, 213, 217, 219, 223, 226, 246, 253, 283, 302, 306, 345, 349, 355, 367, 373, 383, 408, 428, 442, 443, 444, 445, 446, 448, 449, 450, 465, 468, 469, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 522, 524, 526, 527, 541, 548, 551, 560, 571, 585, 594, 601, 602, 603, 604, 609, 627, 634, 639, 645, 648, 649, 667, 700, 718, 723, 770, 774, 780, 792, 806, 887, 888, 889, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 932, 952], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 601, 623, 667], "activ": [5, 9, 15, 16, 18, 19, 20, 21, 24, 278, 695], "bool": [5, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 60, 65, 67, 68, 71, 86, 87, 91, 99, 100, 104, 108, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 127, 129, 130, 131, 143, 144, 146, 147, 149, 150, 151, 152, 157, 158, 160, 161, 162, 167, 179, 181, 191, 197, 199, 205, 210, 213, 214, 215, 216, 219, 221, 223, 230, 232, 233, 236, 246, 256, 257, 258, 259, 260, 269, 275, 276, 278, 292, 295, 297, 300, 305, 314, 315, 316, 317, 318, 319, 334, 350, 360, 361, 362, 363, 364, 377, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 398, 405, 406, 412, 413, 425, 427, 435, 437, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 456, 457, 462, 464, 465, 469, 471, 473, 483, 484, 485, 489, 490, 492, 494, 499, 511, 514, 517, 519, 520, 521, 522, 528, 531, 546, 556, 558, 560, 571, 585, 587, 589, 594, 596, 598, 599, 602, 603, 608, 609, 613, 617, 621, 630, 631, 632, 634, 639, 640, 641, 645, 653, 655, 656, 659, 667, 673, 674, 675, 676, 685, 692, 693, 695, 709, 712, 714, 716, 721, 726, 733, 734, 735, 736, 737, 738, 755, 775, 786, 788, 789, 790, 796, 800, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 845, 846, 848, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 869, 871, 872, 877, 882, 884, 889, 891, 893, 903, 904, 905, 909, 910, 912, 914, 933, 934, 935, 938, 941, 943, 952], "decim": [5, 27, 29, 246, 451, 571, 866, 952], "temporari": 5, "remov": [5, 7, 135, 218, 246, 260, 365, 367, 481, 487, 493, 494, 538, 553, 558, 571, 591, 642, 667, 792, 901, 907, 913, 952], "later": 5, "onc": [5, 99, 100, 103, 123, 127, 128, 191, 226, 246, 260, 452, 571, 586, 649, 667, 676, 867, 952], "stabil": 5, "happen": 5, "being": [5, 69, 99, 100, 110, 115, 217, 218, 246, 260, 319, 349, 442, 443, 444, 445, 446, 448, 449, 450, 537, 571, 642, 667, 737, 774, 803, 848, 952], "consid": [5, 69, 99, 100, 110, 115, 128, 137, 147, 173, 215, 217, 218, 246, 260, 308, 309, 310, 319, 349, 442, 443, 444, 445, 446, 448, 449, 450, 531, 540, 571, 592, 605, 612, 617, 640, 642, 667, 676, 727, 728, 729, 737, 774, 803, 848, 869, 870, 871, 952], "break": [5, 69, 115, 217, 218, 246, 260, 319, 349, 442, 443, 444, 445, 446, 448, 449, 450, 571, 642, 667, 737, 774, 803, 848, 952], "chang": [5, 25, 60, 69, 99, 100, 115, 217, 218, 219, 246, 260, 319, 320, 349, 429, 442, 443, 444, 445, 446, 448, 449, 450, 571, 642, 667, 737, 773, 774, 803, 844, 848, 877, 952], "current": [5, 8, 25, 87, 93, 101, 127, 130, 131, 246, 296, 349, 429, 571, 582, 587, 588, 667, 726, 730, 774, 844, 952], "alpha": [5, 67, 260, 362, 363, 364, 571, 589, 594, 596, 621, 630, 667, 788, 789, 790, 952], "state": [5, 7, 67, 79, 531, 582, 589, 594, 596, 621, 630, 667], "cfg": [6, 7, 8, 14, 125, 193, 223, 246, 627, 645, 667], "previous": 6, "save": [6, 582], "share": [6, 51, 139, 246, 787, 952], "option": [6, 7, 8, 25, 29, 37, 60, 70, 99, 102, 103, 104, 108, 111, 112, 114, 116, 119, 120, 121, 122, 167, 173, 205, 214, 246, 396, 441, 442, 443, 444, 445, 446, 448, 449, 450, 462, 488, 546, 560, 564, 571, 582, 608, 609, 617, 667, 821, 825, 856, 857, 858, 859, 860, 861, 863, 864, 865, 871, 882, 908, 931, 952], "paramet": [6, 10, 11, 12, 13, 14, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 38, 45, 48, 50, 52, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 127, 128, 129, 130, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 164, 165, 166, 167, 169, 171, 173, 174, 176, 177, 179, 180, 181, 183, 185, 186, 187, 189, 190, 191, 193, 195, 196, 198, 199, 200, 201, 202, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 228, 231, 238, 240, 246, 253, 255, 257, 259, 260, 269, 274, 275, 276, 277, 278, 281, 282, 283, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 331, 345, 348, 349, 350, 354, 355, 358, 360, 361, 362, 363, 364, 365, 368, 370, 371, 375, 376, 377, 378, 379, 380, 382, 383, 387, 396, 398, 400, 402, 405, 406, 407, 408, 419, 421, 425, 427, 428, 429, 430, 431, 434, 435, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 497, 498, 499, 500, 503, 504, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 540, 541, 542, 544, 545, 546, 547, 548, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 571, 585, 587, 589, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 608, 609, 612, 613, 617, 618, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 654, 661, 663, 667, 672, 675, 676, 685, 691, 692, 693, 694, 695, 698, 699, 700, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 740, 741, 745, 746, 747, 752, 770, 773, 774, 775, 779, 780, 783, 786, 787, 788, 789, 790, 793, 794, 795, 796, 801, 802, 803, 805, 806, 820, 821, 825, 827, 831, 844, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 878, 882, 883, 884, 886, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 917, 918, 920, 923, 924, 930, 931, 932, 933, 934, 935, 937, 938, 941, 942, 943, 944, 952], "json": [6, 8, 31, 32, 106, 107, 113, 246, 477, 478, 582, 601, 623, 648, 667, 897, 898], "produc": [6, 121, 122, 276, 414, 547, 613, 667, 693], "reset": [7, 125], "default": [7, 12, 25, 26, 27, 29, 30, 31, 32, 33, 65, 86, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 108, 110, 119, 120, 121, 122, 124, 137, 139, 151, 153, 154, 164, 167, 173, 179, 181, 189, 190, 191, 200, 207, 215, 217, 220, 224, 246, 291, 295, 296, 306, 360, 362, 363, 364, 379, 402, 408, 423, 424, 429, 435, 452, 458, 467, 475, 481, 483, 487, 488, 493, 494, 515, 521, 528, 542, 546, 553, 556, 558, 559, 560, 563, 571, 592, 594, 602, 604, 609, 617, 632, 635, 640, 643, 648, 667, 708, 712, 713, 723, 786, 787, 788, 789, 790, 801, 831, 840, 841, 844, 850, 867, 878, 886, 895, 901, 903, 907, 908, 913, 942, 952], "note": [7, 17, 29, 37, 60, 70, 86, 87, 88, 90, 92, 93, 97, 99, 101, 102, 108, 110, 111, 120, 121, 122, 123, 124, 125, 127, 128, 133, 142, 152, 153, 164, 166, 167, 177, 180, 189, 190, 206, 209, 214, 218, 219, 223, 246, 260, 278, 295, 317, 318, 322, 323, 345, 349, 355, 383, 389, 391, 442, 443, 444, 445, 446, 448, 449, 450, 462, 479, 481, 482, 487, 493, 494, 502, 510, 531, 540, 555, 564, 571, 589, 596, 597, 603, 604, 605, 609, 612, 624, 630, 642, 645, 667, 676, 695, 712, 735, 736, 770, 780, 870, 871, 877, 882, 899, 901, 902, 907, 913, 922, 952], "oper": [7, 29, 51, 68, 76, 77, 86, 88, 89, 90, 91, 92, 99, 108, 128, 141, 146, 151, 158, 168, 174, 177, 179, 180, 184, 204, 209, 210, 214, 217, 225, 226, 246, 253, 254, 257, 296, 314, 315, 316, 317, 318, 319, 361, 375, 377, 378, 395, 398, 405, 417, 419, 421, 425, 427, 431, 437, 500, 510, 517, 518, 519, 526, 527, 537, 571, 596, 602, 605, 608, 612, 617, 618, 649, 667, 675, 733, 734, 735, 736, 737, 852, 929, 933, 934, 935, 943, 952], "from": [7, 27, 29, 60, 68, 70, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 134, 135, 139, 141, 150, 152, 153, 164, 165, 167, 168, 173, 185, 189, 191, 193, 214, 215, 217, 219, 246, 314, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 365, 382, 396, 423, 424, 429, 452, 465, 475, 477, 483, 494, 512, 514, 524, 534, 535, 536, 558, 559, 570, 571, 591, 596, 601, 603, 604, 609, 617, 623, 624, 627, 640, 646, 667, 675, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 821, 825, 840, 841, 842, 844, 867, 895, 897, 903, 941, 944, 952], "environ": [7, 25, 123], "local": [7, 102, 111, 748, 749, 778, 845, 846, 952], "non": [7, 29, 37, 60, 91, 165, 173, 193, 218, 223, 246, 383, 429, 441, 442, 443, 444, 445, 446, 448, 449, 450, 470, 476, 524, 526, 527, 548, 551, 560, 571, 617, 627, 642, 645, 667, 713, 806, 844, 856, 857, 858, 859, 860, 861, 863, 864, 865, 890, 896, 934, 952], "env": 7, "back": [7, 60, 141, 210, 246, 428, 571, 675, 935, 952], "valu": [7, 10, 11, 25, 27, 29, 31, 45, 46, 51, 58, 60, 68, 69, 71, 89, 91, 99, 100, 101, 110, 115, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 137, 141, 142, 143, 147, 150, 152, 153, 154, 155, 159, 164, 169, 170, 171, 172, 173, 175, 177, 179, 181, 182, 183, 185, 189, 190, 191, 195, 196, 199, 200, 201, 202, 205, 206, 210, 213, 217, 218, 219, 220, 229, 230, 232, 233, 234, 236, 237, 246, 252, 253, 254, 256, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 276, 277, 280, 281, 282, 284, 286, 287, 288, 290, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 315, 318, 319, 320, 322, 323, 325, 329, 342, 346, 356, 361, 362, 363, 364, 366, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 397, 398, 399, 403, 404, 405, 406, 408, 409, 410, 411, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 431, 434, 435, 438, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 453, 454, 455, 456, 459, 460, 461, 462, 464, 465, 466, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 484, 485, 488, 490, 491, 492, 497, 500, 502, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 517, 519, 524, 527, 529, 531, 532, 533, 539, 540, 546, 548, 549, 550, 551, 552, 555, 556, 561, 564, 571, 585, 592, 597, 598, 603, 604, 606, 607, 614, 615, 616, 617, 619, 622, 624, 628, 629, 634, 635, 636, 639, 642, 643, 648, 652, 653, 655, 656, 657, 659, 660, 667, 671, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689, 690, 693, 694, 697, 698, 699, 701, 703, 704, 705, 707, 711, 714, 716, 717, 718, 719, 723, 724, 727, 728, 729, 731, 732, 737, 738, 739, 740, 742, 743, 746, 750, 767, 771, 781, 787, 788, 789, 790, 793, 794, 795, 798, 800, 801, 802, 803, 805, 806, 808, 810, 811, 813, 814, 815, 816, 817, 818, 822, 827, 831, 832, 833, 835, 836, 838, 840, 841, 842, 843, 844, 847, 848, 849, 850, 856, 857, 858, 859, 860, 861, 863, 864, 865, 867, 868, 869, 870, 871, 874, 875, 879, 880, 881, 882, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 902, 904, 905, 908, 910, 911, 912, 917, 922, 923, 924, 925, 926, 927, 935, 936, 939, 941, 943, 944, 952], "exampl": [7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 100, 101, 102, 103, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 544, 546, 547, 548, 549, 550, 551, 552, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 571, 582, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 695, 696, 699, 700, 702, 707, 708, 709, 711, 713, 720, 721, 723, 724, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 793, 794, 795, 796, 798, 801, 802, 803, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 826, 830, 831, 832, 833, 834, 835, 836, 837, 838, 844, 845, 846, 848, 849, 850, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 874, 878, 879, 880, 881, 883, 884, 886, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 910, 911, 912, 913, 914, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 952], "ascii": [9, 17, 480, 482, 486, 497, 900, 902, 906, 917], "charact": [9, 11, 17, 23, 27, 99, 100, 110, 246, 345, 474, 479, 480, 481, 486, 487, 489, 490, 493, 497, 621, 667, 770, 894, 899, 900, 901, 906, 907, 909, 910, 913, 917], "displai": [9, 10, 11, 14, 16, 20, 22, 29, 246], "tabl": [9, 13, 14, 16, 17, 18, 19, 20, 22, 23, 28, 29, 50, 86, 93, 99, 100, 102, 110, 111, 181, 204, 210, 217, 218, 246, 642, 667, 935, 952], "outlin": 9, "fals": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 29, 31, 33, 60, 65, 67, 70, 87, 91, 99, 100, 103, 104, 108, 110, 113, 114, 117, 118, 119, 120, 121, 122, 127, 129, 130, 131, 134, 146, 147, 149, 150, 151, 152, 157, 158, 160, 161, 162, 164, 167, 168, 171, 176, 177, 179, 181, 182, 189, 190, 191, 197, 199, 205, 210, 213, 214, 215, 219, 221, 223, 229, 230, 232, 233, 234, 236, 239, 246, 256, 257, 258, 260, 269, 275, 278, 292, 295, 297, 314, 315, 316, 317, 318, 319, 334, 350, 360, 361, 362, 363, 364, 377, 378, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 398, 405, 406, 425, 427, 435, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 454, 457, 462, 464, 465, 469, 473, 477, 483, 484, 485, 489, 490, 492, 494, 511, 514, 517, 519, 521, 522, 528, 531, 546, 556, 558, 560, 564, 571, 585, 587, 588, 589, 594, 596, 602, 603, 608, 609, 611, 613, 621, 630, 631, 632, 634, 639, 640, 645, 652, 653, 655, 656, 657, 659, 662, 667, 675, 685, 695, 709, 712, 714, 721, 725, 726, 733, 734, 735, 736, 737, 738, 755, 775, 786, 788, 789, 790, 796, 806, 807, 808, 810, 813, 814, 815, 816, 817, 818, 820, 821, 822, 825, 837, 845, 846, 848, 850, 851, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 869, 872, 877, 882, 884, 889, 893, 897, 903, 904, 905, 909, 910, 912, 914, 933, 934, 935, 938, 941, 943, 944, 952], "revert": 9, "abc": [9, 15, 16, 18, 19, 20, 21, 22, 253, 484, 571, 904], "xyz": [9, 15, 16, 18, 19, 20, 21, 22, 253, 470, 476, 571, 890, 896, 931, 952], "f64": [9, 13, 15, 16, 18, 19, 20, 21, 22, 60, 62, 64, 69, 89, 115, 121, 130, 131, 133, 134, 135, 137, 138, 142, 143, 146, 149, 150, 151, 158, 166, 167, 171, 172, 182, 183, 198, 199, 200, 220, 223, 226, 230, 232, 233, 234, 235, 236, 238, 239, 246, 252, 261, 262, 263, 264, 265, 266, 287, 305, 307, 311, 312, 319, 322, 323, 350, 360, 361, 362, 363, 364, 365, 366, 374, 375, 377, 378, 382, 389, 391, 392, 393, 395, 396, 398, 402, 403, 405, 409, 410, 411, 418, 421, 423, 424, 425, 429, 431, 434, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 460, 461, 462, 466, 467, 506, 507, 510, 515, 523, 524, 526, 528, 530, 538, 549, 550, 553, 558, 559, 563, 571, 587, 591, 592, 597, 598, 602, 608, 609, 615, 616, 622, 634, 635, 643, 645, 646, 649, 653, 655, 656, 657, 658, 659, 661, 662, 667, 677, 678, 679, 680, 681, 682, 724, 731, 732, 737, 738, 739, 775, 789, 790, 794, 798, 803, 844, 848, 856, 858, 859, 861, 862, 863, 865, 866, 880, 881, 885, 926, 927, 940, 952], "fmt": [10, 352, 381, 494, 541, 571, 606, 667, 777, 914], "floatfmt": 10, "mix": [10, 494, 739, 914, 952], "control": [10, 29, 120, 246, 594, 667], "how": [10, 29, 51, 68, 71, 89, 92, 101, 137, 166, 217, 218, 246, 276, 277, 306, 320, 382, 428, 438, 564, 571, 592, 608, 642, 667, 693, 694, 723, 740, 952], "float": [10, 29, 39, 40, 69, 115, 117, 118, 119, 121, 122, 139, 142, 167, 183, 191, 196, 238, 246, 275, 276, 307, 308, 309, 310, 322, 323, 350, 360, 361, 362, 363, 364, 369, 374, 377, 378, 382, 385, 388, 389, 391, 392, 393, 398, 402, 405, 409, 418, 423, 424, 425, 431, 434, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 456, 510, 523, 533, 549, 550, 554, 556, 559, 561, 563, 571, 597, 609, 622, 629, 630, 661, 667, 692, 693, 721, 724, 727, 728, 729, 738, 741, 775, 786, 787, 788, 789, 790, 794, 798, 803, 812, 825, 828, 833, 834, 840, 841, 847, 848, 849, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 870, 871, 882, 886, 922, 942, 952], "point": [10, 29, 39, 40, 121, 122, 142, 152, 168, 246, 307, 322, 323, 350, 369, 374, 389, 391, 451, 452, 571, 597, 603, 613, 624, 667, 724, 775, 794, 798, 812, 866, 867, 952], "full": [10, 36, 66, 99, 100, 102, 110, 111, 613, 667], "format": [10, 13, 17, 27, 29, 93, 98, 99, 100, 110, 115, 140, 150, 164, 173, 190, 206, 244, 246, 349, 352, 483, 494, 519, 595, 601, 617, 648, 667, 777, 903, 914, 951], "number": [10, 11, 12, 14, 22, 23, 27, 29, 33, 60, 80, 86, 88, 90, 92, 96, 97, 99, 100, 103, 110, 113, 120, 121, 123, 124, 129, 130, 139, 140, 142, 143, 155, 164, 165, 168, 169, 176, 177, 191, 195, 196, 200, 202, 213, 217, 220, 229, 231, 240, 246, 270, 277, 282, 290, 294, 296, 298, 304, 313, 319, 320, 332, 335, 340, 342, 350, 356, 357, 359, 362, 363, 364, 368, 370, 376, 380, 389, 391, 399, 400, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 455, 456, 458, 467, 479, 482, 484, 490, 491, 503, 509, 515, 528, 529, 544, 553, 558, 559, 562, 563, 571, 585, 587, 595, 596, 597, 598, 605, 612, 621, 628, 629, 632, 635, 637, 639, 643, 652, 654, 663, 667, 694, 699, 707, 711, 713, 720, 726, 737, 740, 753, 756, 765, 767, 775, 781, 782, 784, 787, 788, 789, 790, 793, 795, 802, 812, 827, 837, 838, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 874, 875, 878, 886, 899, 902, 904, 910, 911, 923, 937, 942, 952], "int": [11, 12, 14, 22, 23, 27, 29, 33, 37, 62, 89, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 119, 120, 121, 122, 123, 124, 128, 129, 130, 139, 142, 143, 145, 154, 155, 156, 158, 164, 165, 167, 169, 170, 171, 175, 176, 177, 187, 189, 191, 194, 195, 196, 198, 200, 201, 202, 203, 208, 211, 213, 217, 220, 222, 224, 231, 240, 246, 253, 275, 276, 277, 281, 282, 290, 291, 294, 295, 296, 298, 304, 308, 309, 310, 319, 320, 362, 363, 364, 368, 369, 370, 376, 379, 380, 400, 427, 429, 431, 435, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 463, 467, 475, 480, 483, 484, 486, 488, 490, 491, 497, 503, 504, 505, 509, 515, 517, 521, 528, 529, 533, 534, 535, 536, 542, 544, 550, 552, 553, 556, 558, 559, 560, 561, 562, 563, 571, 585, 587, 596, 597, 598, 605, 609, 612, 621, 628, 629, 632, 633, 635, 637, 638, 639, 643, 644, 647, 654, 663, 667, 683, 684, 692, 693, 694, 698, 699, 707, 708, 711, 712, 713, 720, 721, 725, 726, 727, 728, 729, 737, 740, 787, 788, 789, 790, 793, 794, 795, 801, 802, 803, 826, 827, 833, 837, 838, 840, 841, 842, 843, 844, 847, 850, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 874, 875, 878, 883, 886, 895, 900, 903, 904, 906, 908, 910, 911, 917, 922, 923, 924, 925, 932, 937, 942, 952], "size": [12, 33, 99, 100, 120, 121, 122, 123, 139, 152, 217, 246, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 521, 571, 603, 632, 667, 787, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 952], "overwrit": [12, 28, 86, 88, 89, 90, 92, 99, 100, 110, 127, 246, 596, 667], "chunk": [12, 33, 96, 99, 100, 108, 110, 112, 113, 114, 121, 122, 141, 165, 176, 246, 259, 436, 571, 632, 667, 675, 725, 799, 837, 851, 929, 952], "stream": [12, 30, 67, 151, 215, 246, 589, 594, 596, 602, 613, 617, 621, 630, 631, 632, 640, 667], "engin": [12, 28, 101, 123, 128, 151, 215, 228, 246, 602, 613, 617, 640, 651, 667, 676, 952], "By": [12, 99, 100, 103, 110, 167, 200, 220, 246, 467, 483, 515, 528, 546, 553, 558, 559, 563, 571, 609, 635, 643, 667, 886, 903, 934, 942, 952], "determin": [12, 29, 58, 60, 68, 89, 92, 99, 100, 103, 108, 110, 114, 128, 146, 152, 153, 164, 165, 214, 219, 246, 296, 306, 334, 408, 414, 438, 442, 443, 444, 445, 446, 448, 449, 450, 462, 571, 603, 604, 667, 713, 723, 755, 803, 831, 882, 952], "schema": [12, 51, 61, 62, 63, 68, 71, 81, 82, 84, 86, 88, 89, 90, 92, 93, 99, 100, 105, 109, 110, 113, 120, 121, 128, 130, 131, 138, 139, 174, 177, 246, 296, 414, 517, 560, 571, 587, 588, 593, 613, 618, 648, 651, 667, 730, 952], "thread": [12, 27, 96, 99, 100, 101, 123, 246, 260, 278, 571, 695], "pool": [12, 123], "For": [12, 29, 101, 102, 103, 111, 141, 153, 166, 167, 228, 246, 296, 305, 362, 363, 364, 415, 437, 462, 531, 540, 541, 571, 604, 609, 651, 667, 675, 788, 789, 790, 852, 882, 934, 952], "some": [12, 25, 29, 89, 99, 100, 110, 137, 246, 592, 667, 813, 952], "dataset": [12, 99, 100, 110, 115, 396, 571, 582, 613, 667, 825, 952], "esp": 12, "when": [12, 14, 16, 20, 29, 33, 51, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 94, 99, 100, 101, 104, 108, 110, 111, 112, 113, 121, 122, 128, 129, 138, 139, 141, 143, 146, 152, 180, 189, 193, 199, 207, 213, 215, 246, 308, 309, 310, 362, 363, 364, 370, 406, 408, 415, 464, 465, 481, 487, 493, 494, 522, 531, 540, 571, 585, 598, 603, 613, 627, 632, 634, 639, 640, 667, 675, 727, 728, 729, 787, 788, 789, 790, 795, 831, 870, 871, 901, 907, 913, 930, 952], "have": [12, 25, 29, 60, 71, 87, 99, 100, 103, 121, 122, 141, 164, 184, 190, 206, 246, 319, 362, 363, 364, 415, 435, 494, 571, 617, 630, 647, 667, 675, 737, 773, 788, 789, 790, 800, 850, 914, 952], "larg": 12, "element": [12, 22, 97, 122, 124, 129, 200, 213, 220, 246, 260, 261, 262, 263, 264, 265, 266, 276, 278, 279, 304, 311, 312, 314, 315, 316, 317, 318, 319, 366, 379, 387, 403, 429, 435, 438, 453, 459, 460, 461, 466, 467, 490, 491, 506, 507, 509, 515, 528, 553, 558, 559, 563, 571, 585, 635, 639, 643, 667, 676, 677, 678, 679, 680, 681, 682, 693, 695, 696, 720, 726, 731, 732, 733, 734, 735, 736, 737, 791, 796, 802, 813, 827, 829, 844, 850, 868, 879, 880, 881, 885, 886, 910, 911, 923, 926, 927, 932, 937, 938, 942, 952], "too": 12, "optimist": 12, "lead": [12, 93, 115, 246, 454, 481, 493, 497, 504, 514, 528, 558, 571, 613, 651, 667, 872, 901, 913, 917, 952], "out": [12, 93, 116, 153, 246, 281, 295, 300, 385, 388, 469, 471, 564, 571, 604, 631, 632, 667, 698, 712, 716, 889, 891], "memori": [12, 33, 68, 86, 87, 90, 91, 92, 99, 100, 104, 108, 110, 112, 113, 114, 127, 128, 141, 197, 228, 246, 436, 457, 571, 632, 651, 667, 675, 676, 851, 876, 877, 952], "error": [12, 72, 99, 100, 110, 189, 246, 283, 295, 300, 305, 395, 469, 471, 477, 478, 494, 571, 651, 700, 712, 716, 721, 889, 891, 897, 898, 914, 952], "row": [12, 17, 22, 27, 29, 31, 33, 60, 61, 63, 78, 80, 85, 89, 90, 92, 93, 99, 100, 103, 104, 108, 110, 112, 113, 114, 117, 120, 121, 128, 129, 130, 137, 141, 144, 146, 150, 152, 154, 155, 160, 162, 164, 165, 167, 168, 169, 173, 177, 191, 198, 202, 203, 206, 208, 213, 215, 217, 218, 224, 228, 231, 240, 246, 260, 270, 279, 367, 380, 400, 429, 439, 463, 465, 474, 503, 522, 531, 532, 540, 544, 548, 551, 555, 562, 564, 571, 585, 587, 589, 592, 596, 599, 600, 603, 605, 609, 610, 612, 613, 617, 632, 633, 637, 638, 639, 640, 642, 647, 651, 654, 663, 667, 675, 696, 792, 802, 844, 854, 883, 894, 923, 952], "per": [12, 27, 29, 120, 121, 129, 150, 177, 178, 199, 213, 235, 237, 238, 246, 260, 278, 281, 295, 465, 522, 571, 585, 634, 639, 658, 660, 661, 667, 695, 698, 712], "everi": [12, 99, 100, 110, 152, 203, 206, 219, 246, 272, 273, 277, 279, 281, 282, 291, 294, 314, 315, 316, 317, 318, 319, 349, 355, 367, 474, 505, 531, 532, 571, 596, 603, 638, 667, 689, 690, 694, 696, 698, 699, 708, 711, 733, 734, 735, 736, 737, 774, 780, 792, 894, 925, 952], "process": [12, 27, 123, 246, 631, 632, 667], "liter": [13, 17, 65, 70, 103, 122, 150, 164, 170, 171, 175, 176, 179, 189, 190, 193, 201, 205, 218, 223, 246, 256, 258, 299, 325, 361, 368, 375, 377, 378, 383, 395, 398, 405, 419, 421, 425, 431, 436, 469, 484, 485, 500, 510, 521, 524, 526, 527, 534, 535, 546, 548, 551, 556, 560, 571, 598, 627, 642, 645, 667, 673, 674, 715, 746, 793, 806, 870, 871, 889, 904, 905, 952], "left": [13, 70, 117, 118, 152, 153, 166, 167, 218, 246, 362, 363, 364, 382, 383, 442, 443, 444, 445, 446, 448, 449, 450, 453, 480, 497, 508, 524, 531, 532, 540, 555, 564, 571, 603, 604, 608, 609, 642, 667, 788, 789, 790, 806, 868, 900, 917, 936, 952], "center": [13, 29, 246, 362, 363, 364, 441, 442, 443, 444, 445, 446, 448, 449, 450, 571, 788, 789, 790, 856, 857, 858, 859, 860, 861, 863, 864, 865, 952], "right": [13, 15, 29, 70, 99, 100, 117, 118, 152, 153, 166, 167, 246, 362, 363, 364, 383, 442, 443, 444, 445, 446, 448, 449, 450, 453, 462, 486, 524, 571, 603, 604, 608, 609, 667, 788, 789, 790, 806, 868, 882, 906, 952], "cell": 13, "align": [13, 29, 60, 246, 497, 917], "keyerror": [13, 17], "recognis": [13, 17, 119], "column_abc": 13, "column_xyz": 13, "visibl": [14, 139, 246, 787, 952], "eg": [14, 22, 29, 246, 349, 494, 510, 571], "rang": [14, 29, 69, 70, 101, 139, 152, 165, 246, 329, 342, 346, 347, 349, 355, 356, 382, 521, 526, 534, 535, 571, 603, 667, 738, 750, 767, 771, 772, 774, 780, 781, 787, 844, 848, 952], "100": [14, 29, 89, 92, 99, 100, 110, 113, 246, 497, 521, 667, 857, 858, 860, 952], "98": [14, 158, 246, 304, 464, 504, 509, 571], "99": [14, 29, 142, 143, 158, 161, 246, 254, 304, 368, 370, 464, 504, 509, 571, 597, 598, 667, 786, 793, 952], "10": [14, 26, 27, 29, 30, 33, 60, 68, 69, 70, 93, 101, 110, 121, 122, 131, 141, 149, 152, 153, 155, 157, 158, 159, 176, 180, 182, 186, 187, 193, 202, 223, 226, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 259, 267, 268, 269, 271, 277, 282, 290, 291, 294, 308, 313, 315, 318, 320, 322, 323, 325, 349, 355, 358, 379, 380, 382, 387, 395, 399, 400, 403, 429, 443, 463, 497, 503, 517, 524, 531, 537, 540, 542, 544, 546, 547, 553, 558, 562, 571, 589, 603, 604, 605, 607, 612, 620, 621, 627, 632, 636, 637, 645, 649, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 667, 676, 694, 699, 707, 708, 711, 727, 738, 740, 746, 780, 783, 786, 802, 813, 827, 829, 844, 870, 871, 923, 952], "95": [14, 254, 571], "96": [14, 254, 571], "97": [14, 158, 246, 254, 571], "move": [15, 362, 363, 364, 442, 443, 445, 449, 571, 788, 789, 790, 857, 858, 860, 864, 952], "inlin": 15, "parenthes": 15, "print": [16, 100, 116, 138, 150, 151, 165, 168, 208, 225, 246, 381, 571, 606, 667, 813, 856, 932, 952], "below": [16, 29, 102, 111, 137, 246, 382, 564, 571, 592, 667], "ascii_ful": 17, "ascii_full_condens": 17, "ascii_no_bord": 17, "ascii_borders_onli": 17, "ascii_borders_only_condens": 17, "ascii_horizontal_onli": 17, "ascii_markdown": 17, "utf8_ful": [17, 60, 93], "utf8_full_condens": [17, 93], "utf8_no_bord": 17, "utf8_borders_onli": 17, "utf8_horizontal_onli": 17, "noth": [17, 470, 475, 476, 478, 890, 895, 896, 898], "none": [17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 46, 50, 60, 69, 70, 71, 86, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 128, 130, 134, 137, 142, 143, 150, 152, 153, 154, 159, 166, 167, 168, 171, 173, 177, 178, 181, 189, 191, 193, 196, 198, 199, 205, 207, 210, 214, 215, 216, 217, 218, 219, 223, 226, 246, 255, 259, 260, 271, 281, 291, 296, 298, 308, 309, 310, 313, 315, 318, 322, 323, 348, 349, 355, 362, 363, 364, 365, 368, 369, 370, 376, 379, 382, 383, 389, 390, 391, 392, 393, 399, 406, 408, 426, 429, 435, 436, 441, 442, 443, 444, 445, 446, 448, 449, 450, 452, 456, 457, 458, 459, 463, 464, 468, 469, 472, 473, 477, 478, 479, 480, 481, 482, 483, 486, 487, 488, 490, 491, 492, 493, 494, 497, 498, 499, 508, 518, 520, 521, 524, 527, 529, 535, 536, 538, 539, 546, 547, 548, 551, 556, 557, 559, 560, 563, 564, 571, 587, 588, 592, 597, 598, 603, 604, 607, 608, 609, 611, 613, 617, 627, 629, 630, 631, 632, 633, 634, 640, 641, 642, 645, 646, 648, 649, 651, 667, 676, 683, 684, 698, 708, 713, 726, 727, 738, 739, 741, 757, 758, 759, 764, 773, 774, 780, 785, 786, 788, 789, 790, 793, 794, 795, 797, 800, 801, 803, 804, 805, 806, 817, 818, 821, 825, 831, 832, 833, 834, 835, 839, 848, 849, 850, 856, 857, 858, 859, 860, 861, 863, 864, 865, 867, 873, 875, 878, 879, 882, 883, 886, 888, 889, 892, 893, 897, 898, 899, 900, 901, 902, 903, 906, 907, 908, 910, 911, 912, 913, 914, 928, 931, 932, 935, 936, 942, 943, 952], "rounded_corn": 17, "style": [17, 29, 181, 246], "border": 17, "line": [17, 29, 99, 100, 103, 110, 150, 160, 162, 246], "includ": [17, 25, 27, 29, 66, 102, 111, 121, 129, 139, 152, 213, 214, 217, 246, 350, 383, 489, 490, 531, 571, 585, 603, 639, 667, 775, 787, 806, 909, 910, 943, 952], "divid": [17, 349, 355, 362, 363, 364, 396, 571, 774, 780, 788, 789, 790, 825, 952], "same": [17, 29, 51, 60, 67, 71, 104, 110, 120, 128, 135, 151, 199, 215, 223, 226, 228, 246, 252, 259, 367, 428, 441, 442, 443, 444, 445, 446, 448, 449, 450, 465, 499, 525, 571, 591, 602, 613, 634, 640, 645, 649, 651, 667, 671, 675, 676, 746, 792, 856, 857, 858, 859, 860, 861, 863, 864, 865, 944, 952], "dens": [17, 150, 246, 435, 571, 850, 952], "space": 17, "horizont": [17, 68, 146, 157, 217, 246, 526, 527, 531, 532, 533, 537, 540, 548, 551, 555, 561], "markdown": 17, "compat": [17, 29, 33, 101, 246, 469, 470, 475, 476, 484, 485, 632, 667], "No": 17, "appli": [17, 27, 29, 68, 110, 119, 121, 122, 146, 180, 246, 329, 332, 334, 335, 336, 338, 340, 342, 343, 346, 347, 350, 356, 357, 359, 363, 364, 406, 430, 441, 442, 443, 445, 449, 494, 517, 518, 519, 521, 531, 532, 540, 547, 555, 571, 605, 612, 613, 620, 667, 748, 749, 750, 753, 755, 756, 760, 762, 765, 767, 768, 771, 772, 775, 778, 781, 782, 784, 789, 790, 856, 857, 858, 860, 864, 914, 952], "round": [17, 29, 62, 93, 246, 307, 374, 506, 571, 724, 798, 952], "corner": [17, 93], "op": [17, 122, 246, 438, 571, 667, 952], "The": [17, 28, 29, 33, 45, 52, 60, 66, 86, 88, 89, 90, 92, 96, 99, 101, 108, 110, 123, 128, 136, 138, 150, 151, 152, 153, 154, 159, 164, 167, 174, 179, 189, 190, 193, 216, 219, 223, 226, 228, 246, 295, 296, 298, 299, 300, 301, 329, 342, 345, 346, 349, 355, 356, 365, 368, 376, 379, 406, 428, 435, 438, 441, 442, 443, 444, 445, 446, 448, 449, 450, 459, 462, 468, 471, 472, 477, 479, 480, 481, 486, 487, 493, 497, 525, 538, 542, 557, 560, 564, 565, 567, 571, 572, 573, 577, 578, 579, 603, 604, 605, 607, 609, 612, 613, 618, 621, 627, 632, 641, 645, 649, 651, 667, 676, 712, 715, 716, 717, 726, 750, 767, 770, 771, 774, 780, 781, 793, 801, 805, 850, 856, 857, 858, 859, 860, 861, 863, 864, 865, 879, 882, 888, 891, 892, 897, 899, 900, 901, 906, 907, 913, 917, 946, 948, 952, 953, 956, 957, 958], "one": [17, 28, 29, 60, 78, 86, 88, 89, 90, 91, 92, 122, 143, 144, 150, 151, 152, 153, 164, 173, 181, 189, 190, 212, 227, 246, 254, 370, 395, 441, 464, 504, 518, 548, 551, 561, 564, 571, 598, 599, 602, 603, 604, 617, 646, 650, 667, 675, 795, 821, 856, 918, 952], "more": [17, 29, 31, 33, 60, 85, 86, 87, 88, 89, 90, 91, 92, 102, 108, 111, 121, 122, 128, 133, 164, 168, 173, 177, 189, 190, 191, 215, 228, 246, 257, 260, 297, 308, 309, 310, 395, 396, 406, 427, 452, 462, 511, 548, 551, 561, 564, 571, 617, 632, 640, 651, 667, 676, 714, 727, 728, 729, 821, 825, 867, 882, 938, 952, 960], "semigraph": 17, "box": [17, 128, 246], "draw": [17, 22, 23], "found": [17, 27, 73, 82, 84, 89, 93, 138, 218, 246, 453, 478, 494, 571, 642, 667, 868, 898, 952], "unicod": 17, "block": [17, 151, 215, 246, 602, 624, 640, 647, 667, 870, 871, 952], "http": [17, 29, 87, 101, 127, 133, 246, 475, 895, 960], "en": [17, 29, 246], "wikipedia": 17, "org": [17, 87, 101, 127, 133, 246], "wiki": 17, "drawing_charact": 17, "box_draw": 17, "hide": [18, 19, 20, 21, 29, 246], "etc": [18, 29, 99, 102, 104, 108, 111, 112, 114, 246, 521, 870, 871, 952], "inform": [20, 66, 102, 111, 133, 246, 308, 309, 310, 396, 462, 571, 621, 667, 727, 728, 729, 825, 882, 952], "separ": [21, 27, 94, 96, 99, 100, 110, 179, 181, 207, 214, 216, 246, 260, 279, 283, 474, 527, 531, 532, 571, 641, 667, 696, 700, 894, 921, 930, 952], "between": [21, 68, 119, 120, 121, 122, 183, 238, 246, 283, 305, 321, 383, 429, 434, 446, 468, 528, 530, 553, 554, 558, 571, 622, 661, 667, 700, 721, 741, 806, 844, 849, 861, 888, 952], "set_tbl_column_data_type_inlin": 21, "max": [22, 29, 33, 121, 122, 123, 134, 143, 151, 152, 153, 181, 246, 308, 309, 315, 370, 428, 435, 442, 454, 491, 571, 598, 602, 603, 604, 632, 667, 713, 727, 728, 733, 739, 795, 850, 857, 872, 911, 952], "both": [22, 27, 51, 70, 101, 152, 153, 166, 167, 174, 189, 246, 259, 383, 442, 443, 444, 445, 446, 448, 449, 450, 571, 603, 604, 608, 609, 618, 667, 806, 952], "width": [23, 29, 99, 100, 246, 480, 486, 497, 667, 900, 906, 917], "char": [23, 51, 71, 482, 902], "enabl": [24, 71, 193, 223, 246, 454, 571, 627, 645, 667, 872, 952], "addit": [24, 29, 89, 102, 111, 119, 120, 135, 140, 151, 179, 193, 199, 216, 223, 226, 246, 253, 365, 368, 428, 465, 522, 524, 525, 526, 527, 538, 548, 551, 557, 560, 571, 591, 595, 602, 627, 634, 641, 645, 649, 667, 793, 952], "verbos": 24, "debug": [24, 93, 589, 596, 613, 667], "log": [24, 62, 304, 360, 421, 431, 509, 571, 720, 786, 937, 952], "if_set": 25, "env_onli": 25, "dict": [25, 29, 33, 61, 63, 66, 86, 88, 89, 90, 91, 92, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 114, 121, 164, 179, 185, 189, 190, 192, 205, 206, 246, 408, 571, 624, 626, 667, 831, 952], "show": [25, 29, 137, 150, 168, 178, 246, 592, 621, 630, 667], "variabl": [25, 94, 123, 173, 207, 246, 617, 667, 930, 952], "restrict": [25, 491, 911], "dictionari": [25, 29, 86, 88, 89, 90, 92, 99, 100, 105, 109, 110, 164, 179, 189, 190, 205, 206, 246, 408, 571, 667, 739, 831, 952], "those": [25, 29, 99, 246, 435, 571, 850, 952], "been": [25, 29, 69, 94, 246, 435, 571, 850, 952], "set_fmt_float": 25, "directli": [25, 121, 122, 362, 363, 364, 571, 667, 788, 789, 790, 952], "via": [25, 99, 100, 103, 110, 112, 113, 114, 164, 190, 246, 260, 571], "set_stat": 25, "all_stat": 25, "file": [26, 27, 30, 31, 32, 33, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 141, 246, 596, 623, 631, 632, 648, 667, 675, 952], "binaryio": [26, 30, 98, 99, 103, 104, 105, 108, 109, 246], "bytesio": [26, 27, 29, 30, 33, 98, 99, 100, 103, 104, 108, 246], "path": [26, 27, 29, 30, 31, 32, 33, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 246, 454, 478, 571, 623, 631, 632, 648, 667, 872, 898, 952], "compress": [26, 30, 33, 246, 631, 632, 667], "avrocompress": [26, 246], "uncompress": [26, 30, 33, 104, 112, 246, 632, 667], "write": [26, 27, 28, 29, 30, 31, 33, 100, 104, 246, 308, 309, 310, 571, 611, 630, 632, 648, 667, 727, 728, 729, 952], "apach": [26, 33, 98, 101, 246], "avro": [26, 98, 246, 582], "should": [26, 27, 29, 30, 31, 32, 33, 86, 88, 90, 92, 94, 97, 102, 110, 119, 120, 122, 124, 127, 128, 135, 152, 164, 167, 189, 190, 206, 207, 216, 228, 246, 254, 260, 278, 306, 319, 358, 365, 389, 391, 441, 442, 443, 444, 445, 446, 448, 449, 450, 453, 462, 525, 538, 545, 546, 564, 571, 591, 603, 608, 609, 613, 630, 631, 632, 641, 648, 651, 667, 676, 695, 723, 737, 783, 856, 857, 858, 859, 860, 861, 863, 864, 865, 868, 882, 952], "written": [26, 27, 29, 30, 31, 32, 33, 246, 631, 632, 648, 667], "snappi": [26, 33, 246, 632, 667], "deflat": [26, 246], "import": [26, 27, 29, 30, 33, 36, 60, 70, 86, 90, 91, 110, 115, 117, 118, 119, 120, 121, 122, 123, 134, 150, 152, 165, 167, 210, 217, 219, 246, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 536, 603, 609, 613, 667, 731, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 810, 814, 815, 816, 821, 856, 880, 926, 952], "pathlib": [26, 27, 30, 33, 110, 246], "foo": [26, 27, 30, 31, 32, 33, 94, 128, 132, 133, 135, 136, 137, 138, 141, 144, 145, 146, 147, 148, 149, 154, 155, 156, 157, 158, 159, 161, 166, 170, 171, 172, 175, 178, 181, 183, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 198, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 214, 215, 216, 220, 221, 222, 225, 246, 255, 275, 280, 281, 284, 285, 308, 309, 310, 345, 380, 381, 400, 439, 455, 456, 468, 470, 472, 474, 476, 481, 487, 489, 491, 493, 495, 496, 503, 505, 518, 521, 523, 525, 528, 529, 530, 539, 543, 544, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 562, 563, 564, 571, 590, 591, 592, 593, 599, 606, 607, 608, 624, 626, 627, 640, 641, 644, 646, 648, 667, 700, 727, 770, 854, 890, 892, 894, 896, 911, 952], "bar": [26, 27, 30, 31, 32, 33, 94, 128, 132, 133, 135, 136, 137, 138, 141, 144, 145, 146, 147, 148, 149, 155, 157, 158, 159, 161, 166, 170, 171, 172, 175, 178, 181, 183, 185, 186, 187, 189, 191, 192, 193, 195, 196, 198, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 215, 216, 220, 221, 225, 246, 255, 285, 381, 462, 472, 474, 489, 491, 518, 523, 525, 528, 529, 530, 539, 544, 548, 549, 550, 551, 552, 553, 557, 558, 559, 562, 563, 564, 571, 590, 591, 592, 593, 599, 606, 607, 608, 624, 626, 627, 640, 641, 644, 648, 667, 700, 882, 892, 894, 911, 952], "ham": [26, 27, 30, 33, 94, 132, 133, 135, 136, 137, 138, 144, 145, 147, 154, 155, 157, 166, 170, 171, 172, 175, 178, 183, 185, 187, 189, 191, 192, 193, 195, 196, 198, 200, 201, 202, 207, 208, 209, 210, 211, 215, 220, 221, 246, 525, 590, 591, 592, 593, 599, 608, 624, 626, 627, 640, 646, 667], "d": [26, 27, 30, 33, 51, 68, 71, 89, 115, 134, 150, 154, 155, 158, 166, 202, 204, 217, 221, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 253, 331, 352, 383, 430, 457, 470, 476, 490, 494, 524, 542, 571, 608, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 667, 752, 777, 806, 890, 896, 910, 914, 952], "e": [26, 27, 30, 33, 51, 71, 87, 99, 100, 103, 104, 108, 112, 114, 134, 150, 155, 202, 204, 217, 246, 253, 260, 360, 365, 383, 402, 408, 457, 462, 538, 564, 571, 611, 624, 667, 786, 806, 869, 882, 934, 952], "dirpath": [26, 27, 30, 33, 110, 246], "new_fil": [26, 27, 30, 33, 246], "has_head": [27, 29, 99, 100, 103, 110, 246], "quot": [27, 99, 100, 110, 246], "batch_siz": [27, 99, 100, 113, 246], "1024": [27, 33, 99, 100, 113, 246, 632, 667], "datetime_format": [27, 246], "date_format": [27, 246, 352], "time_format": [27, 246], "float_precis": [27, 29, 246], "null_valu": [27, 99, 100, 110, 246], "_io": [27, 30, 246], "comma": [27, 246], "csv": [27, 99, 100, 103, 110, 246, 582, 631, 632, 667], "result": [27, 31, 32, 60, 90, 92, 101, 102, 110, 112, 114, 115, 122, 141, 152, 163, 177, 196, 210, 226, 246, 362, 363, 364, 368, 396, 428, 439, 441, 442, 443, 444, 445, 446, 448, 449, 450, 454, 456, 489, 490, 510, 521, 531, 532, 533, 547, 561, 571, 586, 603, 613, 621, 629, 631, 632, 648, 649, 667, 675, 788, 789, 790, 825, 854, 856, 857, 858, 859, 860, 861, 863, 864, 865, 872, 875, 909, 910, 934, 952], "If": [27, 29, 30, 31, 32, 33, 51, 65, 66, 69, 70, 86, 87, 88, 89, 90, 91, 92, 94, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 127, 128, 129, 137, 141, 150, 152, 153, 155, 164, 167, 169, 173, 177, 190, 191, 198, 202, 206, 207, 209, 213, 214, 215, 217, 218, 246, 260, 291, 296, 308, 309, 310, 325, 371, 396, 406, 408, 435, 437, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 458, 462, 463, 477, 479, 481, 482, 487, 488, 489, 490, 491, 493, 494, 518, 519, 520, 521, 528, 529, 531, 540, 546, 548, 551, 556, 558, 560, 564, 571, 585, 592, 594, 603, 604, 608, 609, 613, 617, 624, 632, 633, 639, 640, 642, 648, 651, 667, 675, 676, 708, 727, 728, 729, 738, 746, 800, 802, 803, 825, 827, 848, 850, 852, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 872, 878, 882, 883, 897, 899, 901, 902, 907, 908, 909, 910, 911, 913, 914, 923, 929, 934, 943, 952], "instead": [27, 31, 32, 65, 97, 99, 108, 121, 124, 128, 152, 164, 177, 179, 189, 190, 193, 210, 223, 246, 269, 479, 481, 487, 493, 521, 556, 560, 571, 597, 603, 627, 645, 648, 667, 685, 870, 871, 899, 901, 907, 913, 935, 952], "whether": [27, 70, 90, 92, 122, 246, 334, 350, 412, 413, 454, 571, 613, 667, 755, 775], "header": [27, 29, 33, 93, 99, 100, 103, 110, 138, 181, 214, 246, 632, 667], "field": [27, 52, 82, 84, 89, 216, 246, 296, 408, 477, 490, 491, 499, 531, 532, 547, 560, 571, 641, 667, 713, 910, 911, 920, 921], "symbol": [27, 246], "byte": [27, 99, 100, 103, 104, 105, 108, 109, 110, 139, 246, 299, 302, 303, 479, 482, 632, 667, 715, 718, 719, 787, 899, 902, 952], "specifi": [27, 29, 60, 70, 73, 82, 84, 121, 129, 135, 139, 140, 143, 151, 179, 189, 193, 199, 213, 216, 223, 226, 246, 362, 363, 364, 365, 370, 408, 428, 438, 465, 480, 486, 522, 524, 525, 526, 527, 538, 548, 551, 557, 560, 571, 585, 591, 595, 598, 602, 627, 634, 639, 641, 645, 649, 667, 787, 788, 789, 790, 795, 900, 906, 952], "defin": [27, 29, 36, 70, 119, 120, 121, 128, 152, 153, 177, 180, 228, 246, 260, 295, 383, 430, 442, 443, 444, 445, 446, 448, 449, 450, 520, 546, 560, 571, 603, 604, 620, 651, 667, 676, 712, 806, 952], "chrono": [27, 246, 352, 494, 777, 914], "rust": [27, 33, 79, 104, 108, 128, 228, 246, 651, 676, 952], "crate": [27, 246, 469, 470, 475, 476, 484, 485], "fraction": [27, 117, 118, 191, 246, 350, 429, 452, 494, 571, 775, 844, 867, 952], "second": [27, 70, 152, 153, 167, 219, 246, 345, 349, 355, 442, 443, 444, 445, 446, 448, 449, 450, 494, 535, 536, 564, 571, 603, 604, 609, 667, 770, 774, 780], "precis": [27, 29, 37, 164, 190, 206, 246, 324, 494, 745], "infer": [27, 86, 88, 89, 90, 91, 92, 99, 100, 103, 110, 113, 119, 128, 246, 439, 477, 494, 571, 667, 854, 897, 952], "maximum": [27, 99, 100, 110, 120, 121, 122, 170, 246, 272, 409, 423, 435, 548, 571, 614, 667, 689, 727, 757, 832, 840, 845, 850, 952], "timeunit": [27, 36, 38, 70, 246, 324, 325, 354, 358, 745, 746, 779, 783], "frame": [27, 28, 29, 60, 89, 117, 121, 128, 130, 164, 165, 174, 177, 180, 189, 190, 210, 217, 246, 587, 618, 620, 667, 726, 952], "datetim": [27, 29, 60, 70, 91, 93, 134, 150, 152, 153, 165, 167, 219, 246, 275, 276, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 442, 443, 444, 445, 446, 448, 449, 450, 494, 508, 536, 542, 546, 571, 603, 604, 609, 667, 692, 693, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 821, 840, 841, 871, 914, 936, 952], "place": [27, 129, 136, 157, 158, 186, 195, 196, 199, 213, 221, 246, 269, 283, 290, 455, 456, 464, 571, 585, 628, 629, 634, 639, 667, 685, 700, 707, 851, 853, 874, 875, 884, 952], "float64": [27, 29, 89, 97, 99, 121, 124, 138, 139, 146, 192, 210, 223, 246, 261, 262, 263, 264, 265, 266, 305, 311, 312, 350, 365, 389, 391, 460, 461, 506, 507, 525, 538, 571, 593, 626, 645, 667, 775, 935, 940, 952], "datatyp": [27, 31, 45, 58, 86, 88, 89, 90, 92, 95, 97, 103, 105, 109, 122, 124, 138, 140, 146, 192, 246, 279, 305, 365, 457, 474, 494, 508, 525, 538, 571, 582, 595, 626, 648, 667, 676, 696, 721, 739, 819, 821, 823, 876, 894, 914, 936, 952], "repres": [27, 46, 58, 70, 86, 88, 90, 91, 92, 200, 220, 246, 389, 391, 467, 515, 525, 528, 538, 546, 553, 558, 559, 563, 571, 635, 643, 667, 871, 886, 942, 952], "null": [27, 60, 68, 89, 99, 100, 110, 115, 127, 129, 130, 134, 137, 143, 146, 147, 159, 166, 171, 172, 178, 183, 195, 196, 199, 200, 201, 205, 210, 213, 216, 218, 220, 223, 246, 255, 259, 260, 269, 277, 280, 281, 284, 290, 295, 296, 298, 300, 308, 309, 310, 313, 315, 318, 320, 322, 323, 330, 333, 337, 339, 341, 344, 351, 362, 363, 364, 365, 368, 369, 370, 371, 376, 382, 389, 390, 391, 392, 393, 399, 408, 426, 429, 436, 441, 442, 443, 444, 445, 446, 448, 449, 450, 455, 456, 457, 459, 464, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 482, 483, 486, 488, 490, 491, 492, 497, 498, 499, 508, 516, 518, 524, 526, 527, 538, 560, 564, 571, 585, 587, 592, 598, 607, 608, 628, 629, 634, 639, 641, 642, 645, 646, 648, 667, 676, 685, 694, 707, 712, 713, 716, 726, 727, 740, 743, 751, 754, 761, 763, 766, 769, 776, 788, 789, 790, 793, 795, 800, 817, 818, 843, 844, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 869, 874, 875, 879, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 902, 903, 906, 908, 910, 911, 912, 932, 934, 935, 936, 943, 952], "empti": [27, 77, 89, 99, 100, 103, 110, 130, 131, 161, 173, 246, 557, 587, 588, 617, 667, 726, 730, 809, 952], "table_nam": [28, 29, 246], "connection_uri": [28, 101, 246], "if_exist": [28, 246], "dbwritemod": [28, 246], "fail": [28, 87, 102, 104, 111, 127, 215, 246, 270, 296, 494, 571, 640, 667, 676, 914, 952], "dbwriteengin": [28, 246], "sqlalchemi": [28, 246], "databas": [28, 101, 246, 582], "append": [28, 121, 141, 166, 167, 246, 436, 564, 571, 608, 609, 667, 952], "creat": [28, 29, 69, 70, 86, 90, 92, 111, 120, 121, 122, 130, 131, 152, 153, 178, 181, 219, 223, 246, 325, 349, 355, 436, 488, 514, 521, 526, 534, 535, 536, 571, 587, 588, 594, 603, 604, 645, 667, 726, 730, 738, 743, 746, 774, 780, 842, 848, 851, 908, 934, 952], "connect": [28, 99, 101, 104, 108, 112, 114, 115, 246, 583], "uri": [28, 101, 102, 111, 246], "postgresql": [28, 101, 246, 428, 571], "usernam": [28, 99, 101, 104, 108, 112, 114, 246], "password": [28, 99, 101, 104, 108, 112, 114, 246], "server": [28, 101, 246], "port": [28, 99, 101, 104, 108, 112, 114, 246], "replac": [28, 99, 100, 110, 142, 143, 187, 214, 223, 246, 325, 348, 408, 485, 571, 597, 645, 667, 746, 773, 831, 870, 871, 905, 952], "insert": [28, 99, 100, 104, 108, 110, 112, 113, 114, 158, 186, 214, 216, 246, 453, 468, 497, 571, 641, 667, 868, 888, 917, 952], "mode": [28, 246, 556, 571, 667, 952], "new": [28, 29, 97, 110, 124, 125, 128, 137, 157, 158, 177, 178, 185, 186, 203, 216, 217, 223, 246, 255, 325, 367, 382, 407, 484, 485, 490, 491, 498, 499, 505, 571, 582, 592, 624, 638, 641, 645, 651, 667, 672, 743, 746, 792, 842, 853, 904, 905, 910, 911, 918, 920, 925, 931, 944, 952], "alreadi": [28, 246, 278, 319, 571, 695, 737, 952], "adbc": [28, 101, 246], "workbook": [29, 246], "worksheet": [29, 246], "posit": [29, 135, 140, 151, 179, 193, 199, 216, 223, 226, 246, 362, 363, 364, 365, 428, 465, 483, 522, 524, 525, 526, 527, 538, 548, 551, 557, 560, 571, 591, 595, 602, 627, 634, 641, 645, 649, 667, 788, 789, 790, 903, 952], "tupl": [29, 101, 128, 164, 189, 190, 194, 225, 246, 439, 571, 621, 630, 667, 854, 952], "a1": [29, 61, 63, 246], "table_styl": [29, 246], "column_format": [29, 246], "dtype_format": [29, 246], "oneormoredatatyp": [29, 120, 246, 821, 952], "conditional_format": [29, 246], "conditionalformatdict": [29, 246], "column_tot": [29, 246], "columntotalsdefinit": [29, 246], "column_width": [29, 246], "row_tot": [29, 246], "rowtotalsdefinit": [29, 246], "row_height": [29, 246], "sparklin": [29, 246], "sequenc": [29, 52, 60, 67, 86, 88, 89, 90, 92, 94, 96, 99, 100, 110, 120, 121, 122, 129, 135, 137, 140, 141, 166, 167, 173, 177, 180, 181, 199, 207, 213, 214, 215, 216, 217, 218, 219, 246, 387, 406, 430, 465, 499, 518, 519, 520, 522, 531, 532, 533, 540, 542, 547, 555, 561, 571, 585, 591, 592, 595, 608, 609, 620, 634, 639, 640, 641, 642, 667, 675, 741, 871, 920, 952], "formula": [29, 246, 360, 571, 786, 952], "autofilt": [29, 246], "autofit": [29, 246], "hidden_column": [29, 246], "hide_gridlin": [29, 246], "sheet_zoom": [29, 246], "excel": [29, 103, 246, 582], "object": [29, 30, 33, 70, 87, 88, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 120, 121, 122, 127, 151, 168, 210, 246, 546, 582, 588, 606, 611, 623, 667, 688, 722, 744, 887, 929, 952], "open": [29, 99, 100, 103, 104, 108, 112, 114, 246], "xlsxwriter": [29, 116, 246], "ha": [29, 60, 69, 94, 110, 127, 219, 246, 260, 304, 319, 395, 415, 509, 520, 571, 651, 720, 726, 737, 800, 812, 937, 952], "close": [29, 70, 152, 153, 246, 383, 442, 443, 444, 445, 446, 448, 449, 450, 462, 571, 603, 604, 667, 806, 882, 952], "xlsx": [29, 103, 246], "work": [29, 37, 100, 103, 153, 186, 246, 260, 278, 297, 307, 308, 309, 310, 365, 374, 428, 482, 511, 571, 604, 667, 695, 714, 724, 727, 728, 729, 798, 902, 938, 952], "directori": [29, 108, 246], "sheet1": [29, 246], "valid": [29, 104, 108, 122, 125, 139, 246, 319, 469, 478, 571, 737, 787, 800, 889, 890, 895, 896, 898, 904, 905, 952], "notat": [29, 246], "integ": [29, 41, 42, 43, 44, 54, 55, 56, 57, 120, 121, 152, 153, 246, 307, 350, 374, 375, 437, 442, 443, 444, 445, 446, 447, 448, 449, 450, 483, 517, 521, 542, 571, 603, 604, 667, 683, 684, 724, 775, 798, 852, 862, 871, 903, 952], "medium": [29, 246], "kei": [29, 60, 66, 152, 167, 174, 179, 181, 185, 188, 246, 603, 609, 618, 624, 625, 667], "contain": [29, 60, 66, 88, 91, 93, 102, 111, 117, 129, 137, 165, 177, 181, 213, 246, 260, 387, 408, 470, 473, 475, 476, 478, 491, 492, 571, 585, 592, 621, 639, 667, 831, 837, 890, 893, 895, 896, 898, 911, 912, 929, 952], "follow": [29, 66, 99, 100, 102, 110, 111, 128, 152, 153, 167, 180, 219, 246, 260, 345, 349, 355, 430, 435, 442, 443, 444, 445, 446, 448, 449, 450, 499, 510, 520, 564, 565, 567, 571, 572, 573, 577, 578, 579, 603, 604, 609, 620, 667, 770, 774, 780, 850, 870, 871, 946, 948, 952, 953, 956, 957, 958, 960], "first_column": [29, 246], "last_column": [29, 246], "banded_column": [29, 246], "banded_row": [29, 246], "sheet": [29, 103, 246], "chart": [29, 246, 621, 667], "subsequ": [29, 184, 210, 246, 594, 667], "colnam": [29, 110, 121, 138, 246, 407, 571, 593, 667], "given": [29, 48, 50, 60, 69, 70, 86, 88, 89, 90, 92, 97, 99, 100, 110, 119, 120, 121, 122, 124, 128, 129, 139, 140, 179, 180, 189, 195, 196, 199, 213, 218, 246, 260, 275, 290, 326, 354, 360, 383, 402, 428, 430, 435, 438, 439, 442, 443, 445, 448, 449, 450, 453, 455, 456, 476, 494, 499, 518, 519, 538, 571, 585, 595, 613, 620, 628, 629, 634, 639, 642, 651, 667, 676, 692, 707, 738, 747, 779, 786, 787, 803, 806, 828, 830, 842, 848, 850, 854, 857, 858, 860, 863, 864, 865, 868, 874, 875, 896, 914, 940, 944, 952], "here": [29, 86, 88, 89, 90, 92, 101, 102, 111, 120, 121, 122, 246, 478, 667, 898], "dd": [29, 246], "mm": [29, 246], "yyyi": [29, 246], "00": [29, 70, 152, 167, 219, 246, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 494, 536, 603, 609, 667, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 914], "dtype": [29, 63, 71, 86, 88, 90, 92, 93, 97, 99, 100, 110, 119, 120, 121, 122, 124, 127, 152, 153, 167, 208, 210, 246, 260, 261, 262, 263, 264, 265, 266, 269, 272, 273, 274, 283, 295, 305, 308, 309, 310, 311, 312, 317, 318, 330, 333, 337, 339, 341, 344, 351, 358, 365, 367, 404, 406, 408, 437, 438, 442, 443, 444, 445, 446, 448, 449, 450, 457, 460, 461, 468, 477, 488, 502, 504, 506, 507, 508, 513, 514, 520, 521, 529, 538, 542, 546, 547, 560, 571, 603, 604, 609, 667, 689, 690, 691, 700, 712, 721, 726, 727, 728, 729, 735, 736, 740, 751, 754, 761, 763, 766, 769, 776, 783, 787, 792, 809, 821, 830, 831, 855, 869, 876, 888, 897, 908, 914, 922, 932, 934, 935, 936, 940, 952], "overridden": [29, 86, 88, 90, 92, 123, 246, 667], "basi": [29, 121, 246], "param": [29, 86, 88, 89, 90, 92, 99, 100, 110, 121, 122, 189, 246, 667], "It": [29, 70, 128, 174, 180, 228, 246, 260, 296, 414, 571, 613, 618, 651, 667, 870, 871, 952], "also": [29, 70, 89, 110, 121, 122, 138, 151, 152, 153, 174, 177, 193, 199, 223, 246, 315, 318, 348, 382, 383, 435, 442, 443, 444, 445, 446, 448, 449, 450, 465, 531, 532, 540, 542, 555, 564, 570, 571, 576, 602, 603, 604, 618, 627, 634, 645, 646, 667, 773, 806, 850, 952], "group": [29, 33, 100, 151, 152, 153, 165, 177, 179, 181, 217, 219, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246, 254, 260, 278, 373, 428, 464, 465, 475, 504, 520, 571, 602, 603, 604, 632, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667, 695, 895], "float_dtyp": [29, 246], "simplifi": [29, 67, 246, 589, 594, 596, 621, 630, 631, 632, 667], "uniform": [29, 246], "condit": [29, 65, 137, 144, 189, 246, 473, 492, 540, 564, 592, 599, 667], "suppli": [29, 86, 88, 89, 90, 92, 189, 246, 667], "typenam": [29, 246], "3_color_scal": [29, 246], "data_bar": [29, 246], "make": [29, 52, 68, 86, 91, 99, 100, 101, 104, 108, 112, 114, 152, 153, 174, 177, 184, 219, 246, 363, 364, 408, 438, 490, 497, 571, 603, 604, 618, 667, 789, 790, 803, 831, 910, 917, 952], "icon": [29, 246], "multipl": [29, 67, 68, 99, 100, 110, 112, 113, 114, 120, 122, 129, 135, 139, 141, 144, 151, 152, 157, 165, 179, 181, 193, 199, 213, 223, 226, 246, 295, 412, 415, 420, 421, 428, 439, 442, 443, 444, 445, 446, 448, 449, 450, 465, 522, 525, 531, 532, 540, 547, 548, 551, 555, 564, 571, 585, 591, 599, 602, 603, 627, 634, 639, 645, 649, 667, 675, 712, 787, 836, 854, 952], "singl": [29, 60, 68, 99, 100, 101, 108, 110, 120, 135, 136, 137, 141, 148, 179, 189, 199, 246, 260, 276, 295, 345, 371, 406, 436, 439, 465, 468, 516, 520, 522, 525, 526, 527, 547, 548, 551, 556, 571, 591, 592, 634, 667, 675, 693, 712, 770, 851, 854, 888, 929, 952], "across": [29, 246, 533, 561], "effect": [29, 127, 146, 246, 260, 571, 647, 667], "heatmap": [29, 246], "min": [29, 33, 121, 122, 134, 143, 152, 153, 181, 246, 308, 310, 316, 370, 428, 435, 445, 557, 571, 598, 603, 604, 632, 667, 727, 729, 734, 739, 795, 850, 860, 952], "entir": [29, 246], "final": [29, 60, 114, 246, 362, 363, 364, 571, 596, 667, 788, 789, 790, 952], "made": [29, 246, 934, 952], "up": [29, 52, 101, 164, 167, 190, 206, 246, 260, 307, 497, 571, 608, 609, 613, 667, 724, 917, 952], "abov": [29, 246, 564], "order": [29, 60, 89, 117, 128, 129, 151, 152, 153, 179, 180, 181, 191, 199, 213, 215, 219, 246, 260, 269, 292, 297, 306, 435, 452, 453, 454, 464, 465, 499, 511, 512, 522, 571, 585, 602, 603, 604, 617, 631, 632, 634, 639, 640, 667, 676, 685, 709, 714, 723, 738, 820, 848, 850, 855, 867, 868, 872, 884, 920, 938, 939, 952], "than": [29, 70, 85, 90, 92, 99, 100, 110, 115, 121, 122, 128, 150, 151, 164, 167, 179, 189, 190, 191, 217, 228, 246, 260, 377, 378, 395, 398, 405, 452, 462, 480, 486, 491, 497, 528, 548, 551, 558, 561, 571, 602, 609, 631, 632, 651, 667, 676, 867, 882, 900, 906, 911, 917, 952], "add": [29, 50, 100, 128, 141, 152, 223, 224, 246, 432, 501, 536, 540, 564, 571, 603, 608, 645, 646, 647, 667, 675, 952], "total": [29, 139, 246, 787, 952], "export": [29, 164, 165, 190, 206, 246], "numer": [29, 167, 246, 253, 308, 309, 310, 375, 383, 419, 421, 431, 438, 457, 500, 510, 571, 582, 609, 667, 727, 728, 729, 806, 819, 869, 876, 952], "associ": [29, 60, 246], "sum": [29, 60, 139, 146, 151, 153, 163, 181, 226, 246, 260, 296, 317, 318, 360, 371, 442, 443, 445, 448, 449, 450, 516, 518, 531, 533, 540, 548, 551, 555, 571, 589, 594, 596, 602, 604, 621, 630, 649, 667, 735, 736, 786, 787, 857, 858, 860, 863, 864, 865, 952], "pass": [29, 33, 60, 70, 88, 103, 110, 120, 121, 122, 129, 133, 135, 151, 155, 169, 179, 180, 193, 199, 202, 213, 223, 226, 246, 260, 331, 348, 368, 381, 428, 430, 465, 481, 487, 493, 522, 525, 542, 548, 551, 560, 571, 585, 591, 602, 606, 613, 620, 627, 630, 634, 639, 645, 649, 667, 676, 752, 773, 793, 802, 827, 901, 907, 913, 923, 952], "must": [29, 69, 87, 88, 102, 111, 140, 152, 153, 167, 174, 189, 246, 296, 406, 442, 443, 444, 445, 446, 448, 449, 450, 571, 595, 603, 604, 609, 613, 618, 667, 738, 848, 952], "funcnam": [29, 246], "averag": [29, 246, 362, 363, 364, 435, 571, 788, 789, 790, 850, 952], "count_num": [29, 246], "count": [29, 99, 100, 104, 108, 110, 112, 113, 114, 134, 152, 153, 167, 177, 178, 181, 214, 218, 219, 224, 228, 237, 246, 276, 314, 345, 399, 422, 426, 442, 443, 444, 445, 446, 448, 449, 450, 470, 512, 514, 552, 571, 603, 604, 609, 642, 647, 651, 660, 667, 693, 739, 770, 803, 838, 843, 890, 939, 941, 952], "std_dev": [29, 246], "var": [29, 246, 571, 667, 952], "pixel": [29, 246], "unit": [29, 36, 38, 70, 121, 122, 139, 246, 324, 325, 331, 354, 358, 404, 415, 513, 542, 571, 621, 667, 745, 746, 752, 779, 783, 787, 830, 940, 952], "hand": [29, 99, 100, 110, 246], "side": [29, 152, 153, 246, 383, 442, 443, 444, 445, 446, 448, 449, 450, 453, 571, 603, 604, 667, 806, 868, 952], "call": [29, 100, 121, 122, 128, 151, 168, 245, 246, 260, 315, 318, 571, 583, 602, 666, 667, 676, 952], "ad": [29, 89, 127, 152, 214, 223, 246, 259, 368, 531, 532, 571, 603, 645, 667, 793, 952], "end": [29, 70, 99, 100, 108, 110, 152, 246, 291, 302, 349, 350, 365, 383, 469, 473, 488, 492, 521, 525, 538, 564, 571, 603, 605, 612, 621, 667, 708, 718, 774, 806, 893, 908, 912, 952], "wise": [29, 60, 146, 246, 261, 262, 263, 264, 265, 266, 311, 312, 366, 403, 459, 460, 461, 506, 507, 531, 532, 540, 555, 571, 677, 678, 679, 680, 681, 682, 731, 732, 791, 829, 879, 880, 881, 926, 927, 952], "match": [29, 68, 80, 86, 88, 89, 90, 92, 117, 118, 143, 167, 189, 246, 413, 469, 470, 473, 476, 477, 478, 484, 485, 492, 494, 525, 598, 609, 667, 821, 889, 890, 893, 896, 897, 898, 904, 905, 912, 914, 952], "particip": [29, 246], "distinct": [29, 122, 179, 246, 297, 435, 536, 571, 714, 850, 952], "referenc": [29, 246, 499], "differ": [29, 99, 115, 117, 141, 152, 153, 164, 190, 206, 214, 246, 277, 320, 329, 345, 346, 348, 356, 408, 423, 424, 494, 512, 539, 542, 571, 594, 603, 604, 667, 675, 676, 694, 740, 750, 770, 771, 773, 781, 840, 841, 869, 914, 952], "row_index": [29, 246], "height": [29, 137, 246], "provid": [29, 99, 100, 101, 102, 110, 111, 121, 122, 246, 296, 300, 301, 471, 472, 475, 477, 478, 542, 582, 631, 632, 667, 716, 717, 803, 891, 892, 895, 897, 898, 952, 960], "intersect": [29, 246], "bodi": [29, 246], "start": [29, 70, 98, 99, 100, 104, 108, 110, 112, 113, 114, 123, 151, 152, 168, 198, 219, 224, 246, 291, 303, 329, 331, 332, 334, 335, 340, 342, 346, 347, 349, 350, 354, 355, 356, 357, 359, 365, 383, 463, 469, 473, 488, 492, 521, 525, 531, 538, 540, 564, 571, 602, 603, 621, 633, 647, 667, 708, 719, 745, 747, 750, 752, 753, 755, 760, 762, 765, 767, 768, 771, 772, 773, 774, 775, 777, 779, 780, 781, 782, 783, 784, 806, 883, 893, 908, 912, 952], "zero": [29, 86, 87, 98, 99, 100, 104, 108, 127, 130, 143, 164, 189, 204, 210, 246, 369, 370, 453, 462, 497, 510, 571, 587, 598, 667, 713, 726, 795, 882, 917, 929, 934, 935, 952], "unless": [29, 60, 88, 210, 246, 667, 935, 943, 952], "marker": [29, 246], "compliant": [29, 246], "case": [29, 60, 86, 88, 89, 90, 92, 114, 123, 128, 141, 152, 153, 164, 246, 406, 414, 415, 571, 603, 604, 667, 675, 952], "three": [29, 212, 246, 453, 571], "avail": [29, 96, 102, 111, 120, 245, 246, 435, 565, 567, 570, 571, 572, 573, 576, 577, 578, 579, 582, 583, 596, 666, 667, 850, 946, 948, 952, 953, 956, 957, 958], "insert_befor": [29, 246], "insert_aft": [29, 246], "respect": [29, 246], "direct": [29, 101, 108, 114, 217, 246], "far": [29, 246], "thei": [29, 89, 110, 117, 125, 168, 246, 441, 571, 856, 952], "strongli": [29, 123, 128, 189, 228, 246, 260, 571, 651, 676, 952], "advis": [29, 168, 246, 296], "structur": [29, 77, 81, 83, 141, 180, 246, 430, 571, 620, 667, 675, 952], "your": [29, 99, 100, 117, 118, 128, 164, 193, 223, 226, 246, 260, 571, 589, 605, 612, 613, 627, 645, 649, 667, 676, 952], "wherev": [29, 128, 228, 246, 260, 571, 651, 676, 952], "possibl": [29, 99, 128, 151, 164, 190, 215, 228, 246, 260, 404, 414, 491, 513, 571, 602, 640, 651, 667, 676, 911, 952], "simpl": [29, 177, 246], "colx": [29, 246], "coli": [29, 246], "after": [29, 89, 98, 99, 100, 104, 108, 110, 112, 113, 114, 141, 216, 245, 246, 365, 408, 435, 497, 571, 641, 667, 675, 773, 831, 850, 917, 952], "befor": [29, 99, 110, 123, 125, 141, 152, 167, 216, 246, 317, 318, 319, 408, 429, 441, 442, 443, 444, 445, 446, 448, 449, 450, 497, 502, 571, 603, 606, 609, 641, 667, 675, 735, 736, 737, 831, 844, 856, 857, 858, 859, 860, 861, 863, 864, 865, 917, 922, 952], "most": [29, 86, 99, 100, 110, 246, 415, 420, 429, 491, 514, 571, 836, 844, 911, 941, 952], "mandatori": [29, 246], "return_dtyp": [29, 128, 246, 260, 406, 408, 520, 547, 571, 676, 831, 952], "latter": [29, 141, 246, 675, 952], "appropri": [29, 246, 435, 571, 850, 952], "pure": [29, 246], "actual": [29, 89, 103, 121, 122, 246, 877, 952], "indic": [29, 65, 94, 98, 99, 100, 104, 108, 110, 119, 120, 122, 152, 153, 207, 246, 270, 295, 385, 388, 389, 391, 392, 393, 442, 443, 444, 445, 446, 448, 449, 450, 453, 459, 504, 522, 571, 603, 604, 667, 712, 810, 814, 815, 816, 817, 818, 868, 879, 924, 930, 952], "calcul": [29, 60, 152, 200, 220, 246, 277, 320, 362, 363, 364, 396, 404, 447, 462, 467, 513, 515, 520, 528, 553, 558, 559, 563, 571, 603, 635, 643, 667, 694, 740, 788, 789, 790, 825, 862, 882, 886, 942, 952], "individu": [29, 121, 153, 246, 260, 476, 571, 604, 632, 667, 725, 896, 952], "gridlin": [29, 246], "zoom": [29, 246], "level": [29, 33, 110, 112, 113, 114, 121, 128, 146, 177, 246, 371, 571, 605, 612, 632, 667], "definit": [29, 246, 396, 571, 825, 952], "take": [29, 121, 146, 174, 180, 203, 246, 345, 465, 505, 537, 539, 571, 618, 638, 667, 770, 925, 944, 952], "care": [29, 246, 260, 454, 571, 872, 952], "rel": [29, 102, 111, 117, 118, 246, 345, 362, 363, 364, 571, 770, 788, 789, 790, 952], "see": [29, 101, 102, 103, 111, 117, 118, 121, 122, 133, 166, 180, 246, 308, 309, 310, 352, 370, 382, 396, 406, 462, 555, 571, 727, 728, 729, 777, 825, 882, 952, 960], "readthedoc": [29, 246, 960], "io": [29, 246, 960], "working_with_conditional_format": [29, 246], "html": [29, 87, 101, 127, 133, 246], "similarli": [29, 89, 246], "well": [29, 99, 100, 110, 140, 181, 246, 383, 571, 595, 667, 806, 952], "adjac": [29, 246], "two": [29, 88, 90, 92, 101, 146, 173, 174, 181, 212, 227, 228, 246, 254, 321, 325, 464, 504, 518, 528, 530, 553, 558, 571, 617, 618, 650, 651, 667, 741, 746, 952], "help": [29, 246, 596, 667], "where": [29, 65, 101, 137, 141, 164, 173, 190, 200, 220, 246, 270, 357, 360, 453, 462, 465, 467, 515, 528, 553, 558, 559, 563, 564, 571, 617, 635, 643, 667, 675, 686, 782, 786, 868, 882, 886, 942, 944, 952], "appear": [29, 89, 117, 246, 512, 571, 939, 952], "working_with_sparklin": [29, 246], "inject": [29, 60, 246], "locat": [29, 141, 187, 211, 216, 246, 453, 571, 641, 667, 675, 868, 871, 924, 952], "syntax": [29, 128, 177, 246, 630, 667, 952], "ensur": [29, 71, 121, 122, 151, 179, 189, 246, 383, 514, 571, 602, 613, 667, 934, 941, 952], "correctli": [29, 246], "microsoft": [29, 246], "com": [29, 101, 246, 362, 363, 364, 475, 571, 788, 789, 790, 895, 952], "u": [29, 36, 38, 70, 93, 164, 190, 206, 246, 324, 325, 331, 354, 358, 494, 542, 745, 746, 752, 779, 783], "offic": [29, 246], "f5ed2452": [29, 246], "2337": [29, 246], "4f71": [29, 246], "bed3": [29, 246], "c8ae6d2b276": [29, 246], "instanti": [29, 193, 223, 246, 627, 645, 667], "basic": [29, 246], "random": [29, 120, 121, 122, 154, 191, 246, 379, 435, 452, 458, 571, 801, 850, 867, 878, 952], "date": [29, 36, 60, 70, 99, 100, 101, 110, 115, 134, 150, 152, 153, 165, 167, 246, 275, 276, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 442, 443, 444, 445, 446, 448, 449, 450, 494, 508, 542, 546, 571, 603, 604, 609, 667, 692, 693, 745, 746, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 821, 840, 841, 871, 914, 936, 952], "dtm": [29, 246, 325, 746], "2023": [29, 93, 116, 165, 246, 325, 546, 746], "num": [29, 212, 246, 383, 386, 497, 571, 806, 952], "500": [29, 164, 218, 246, 596, 642, 667, 760, 762, 768, 775, 857, 858, 860, 952], "val": [29, 188, 246, 306, 508, 564, 571, 625, 667, 723], "10_000": [29, 246], "20_000": [29, 246], "30_000": [29, 246], "increas": [29, 99, 108, 246, 319, 571, 737, 952], "b4": [29, 246], "light": [29, 246], "twice": [29, 103, 246], "each": [29, 60, 100, 113, 117, 118, 120, 128, 150, 151, 165, 167, 179, 210, 216, 225, 226, 228, 229, 231, 240, 246, 260, 282, 294, 349, 355, 435, 465, 476, 490, 491, 520, 522, 527, 548, 551, 560, 571, 609, 621, 641, 649, 651, 652, 654, 663, 667, 699, 711, 725, 774, 780, 850, 896, 910, 911, 921, 952], "titl": [29, 246], "explicit": [29, 110, 120, 246, 521, 555], "integr": [29, 246], "multi_fram": [29, 246], "wb": [29, 246], "coordin": [29, 246], "advanc": [29, 246], "len": [29, 69, 120, 121, 165, 246, 314, 439, 480, 486, 497, 571, 738, 848, 854, 900, 906, 917, 952], "min_color": [29, 246], "76933c": [29, 246], "mid_color": [29, 246], "c4d79b": [29, 246], "max_color": [29, 246], "ebf1d": [29, 246], "data_bar_2010": [29, 246], "bar_color": [29, 246], "9bbb59": [29, 246], "bar_negative_color_sam": [29, 246], "bar_negative_border_color_sam": [29, 246], "000": [29, 246], "white": [29, 246], "w": [29, 246, 475, 895], "get_worksheet_by_nam": [29, 246], "fmt_titl": [29, 246], "add_format": [29, 246], "font_color": [29, 246], "4f6228": [29, 246], "font_siz": [29, 246], "12": [29, 60, 69, 70, 93, 152, 153, 167, 219, 246, 317, 325, 332, 335, 342, 347, 349, 355, 359, 429, 457, 532, 534, 535, 547, 571, 603, 604, 605, 609, 612, 630, 637, 667, 676, 738, 746, 767, 774, 780, 866, 952], "ital": [29, 246], "bold": [29, 246], "customis": [29, 246], "trend": [29, 246], "win_loss": [29, 246], "subtl": [29, 246], "tone": [29, 246], "hidden": [29, 246], "id": [29, 228, 246, 484, 485, 512, 514, 571, 651, 939, 952], "q1": [29, 246], "55": [29, 62, 116, 246], "20": [29, 141, 157, 158, 180, 182, 186, 187, 246, 267, 268, 269, 320, 349, 355, 379, 382, 542, 546, 571, 620, 667, 740, 780, 952], "35": [29, 122, 246, 320, 571, 740, 952], "q2": [29, 246], "30": [29, 69, 141, 152, 157, 180, 186, 187, 205, 223, 246, 267, 268, 269, 320, 325, 330, 335, 347, 349, 355, 359, 379, 457, 546, 571, 603, 620, 645, 667, 738, 740, 746, 751, 774, 780, 952], "15": [29, 128, 152, 153, 158, 246, 319, 320, 349, 355, 367, 532, 571, 603, 604, 667, 737, 740, 774, 780, 792, 952], "60": [29, 141, 246, 350, 351, 494, 771, 775, 776, 914], "q3": [29, 246], "50": [29, 141, 246, 308, 309, 310, 349, 355, 571, 727, 780, 952], "40": [29, 141, 180, 246, 349, 355, 379, 571, 620, 667, 756, 780], "80": [29, 246], "q4": [29, 246], "75": [29, 246, 257, 427, 571, 803, 848, 952], "account": [29, 93, 246, 345, 362, 363, 364, 571, 770, 788, 789, 790, 952], "flavour": [29, 246], "integer_dtyp": [29, 193, 246, 627, 667], "0_": [29, 246], "just": [29, 101, 110, 173, 246, 617, 667], "unifi": [29, 246], "multi": [29, 99, 100, 246, 365, 571], "2_color_scal": [29, 246], "95b3d7": [29, 246], "ffffff": [29, 246], "base": [29, 34, 137, 144, 152, 153, 246, 360, 362, 363, 364, 402, 403, 483, 571, 582, 592, 599, 603, 604, 667, 786, 788, 789, 790, 803, 828, 829, 848, 903, 944, 952], "standardis": [29, 246], "z": [29, 93, 120, 121, 139, 160, 162, 166, 173, 246, 253, 257, 274, 306, 379, 427, 438, 494, 571, 608, 617, 633, 667, 723, 795, 914, 952], "score": [29, 246], "conjunct": [29, 246], "a123": [29, 246], "b345": [29, 246], "c567": [29, 246], "d789": [29, 246], "e101": [29, 246], "45": [29, 153, 246, 325, 349, 355, 470, 476, 546, 604, 667, 746, 774, 780, 890, 896], "85": [29, 246], "font": [29, 246], "consola": [29, 246], "standard": [29, 200, 246, 335, 363, 448, 462, 467, 478, 559, 571, 635, 667, 756, 789, 882, 886, 898, 952], "stdev": [29, 246], "ipccompress": [30, 246], "arrow": [30, 72, 86, 101, 104, 112, 204, 246, 631, 667, 929, 934, 952], "ipc": [30, 104, 105, 112, 115, 246, 582], "binari": [30, 246, 299, 301, 302, 303, 519, 715, 717, 718, 719], "feather": [30, 104, 112, 246, 582], "lz4": [30, 33, 246, 631, 632, 667], "zstd": [30, 33, 246, 631, 632, 667], "pretti": [31, 246], "row_ori": [31, 246], "iobas": [31, 32, 106, 107, 246, 623, 648, 667], "serial": [31, 32, 246], "represent": [31, 32, 208, 246, 306, 329, 332, 335, 336, 338, 340, 342, 343, 346, 347, 350, 356, 357, 359, 508, 571, 594, 611, 667, 723, 750, 753, 755, 756, 760, 762, 765, 767, 768, 771, 772, 775, 781, 782, 784, 932, 936, 952], "orient": [31, 61, 63, 90, 92, 246, 667], "slower": [31, 90, 92, 128, 151, 179, 219, 228, 246, 602, 651, 667, 676, 952], "common": [31, 246, 576], "write_ndjson": [31, 246], "newlin": [32, 107, 113, 246], "delimit": [32, 94, 99, 100, 107, 110, 113, 181, 207, 246, 468, 888, 930, 952], "parquetcompress": [33, 246], "compression_level": [33, 246, 632, 667], "statist": [33, 99, 100, 108, 114, 134, 246, 363, 364, 396, 442, 443, 444, 445, 446, 447, 448, 449, 450, 462, 571, 632, 667, 739, 789, 790, 825, 862, 882, 952], "row_group_s": [33, 246, 632, 667], "use_pyarrow": [33, 99, 104, 108, 246, 632, 667, 933, 934, 952], "pyarrow_opt": [33, 102, 108, 111, 246], "parquet": [33, 108, 109, 114, 246, 582, 632, 667], "gzip": [33, 246, 632, 667], "lzo": [33, 246, 632, 667], "brotli": [33, 246, 632, 667], "choos": [33, 246, 631, 632, 667], "good": [33, 164, 246, 631, 632, 667], "perform": [33, 77, 87, 99, 100, 104, 108, 110, 112, 113, 114, 127, 128, 152, 153, 167, 184, 228, 246, 260, 428, 571, 603, 604, 609, 631, 632, 647, 651, 667, 676, 952], "fast": [33, 246, 368, 454, 571, 631, 632, 667, 793, 872, 952], "decompress": [33, 246, 631, 632, 667], "backward": [33, 143, 167, 246, 298, 370, 571, 598, 609, 632, 667, 795, 952], "guarante": [33, 87, 99, 100, 215, 246, 596, 632, 640, 667], "deal": [33, 164, 246, 435, 494, 571, 632, 667, 850, 914, 952], "older": [33, 246, 632, 667], "reader": [33, 96, 99, 100, 104, 108, 246, 583, 632, 667], "higher": [33, 183, 238, 246, 434, 446, 554, 571, 622, 632, 661, 667, 849, 861, 952], "mean": [33, 99, 100, 104, 108, 110, 134, 143, 151, 181, 226, 246, 367, 370, 443, 462, 475, 523, 571, 598, 602, 613, 632, 649, 667, 739, 792, 795, 800, 858, 882, 895, 952], "smaller": [33, 139, 246, 596, 632, 667, 787, 952], "disk": [33, 104, 246, 630, 631, 632, 667], "11": [33, 116, 153, 246, 322, 323, 335, 345, 349, 355, 382, 429, 449, 463, 497, 517, 525, 561, 571, 589, 604, 605, 612, 621, 632, 637, 667, 676, 770, 774, 780, 856, 952], "22": [33, 246, 349, 355, 358, 494, 525, 632, 667, 774, 780, 783, 914], "extra": [33, 99, 102, 103, 104, 108, 111, 112, 114, 141, 246, 632, 667, 675, 952], "comput": [33, 67, 68, 74, 139, 151, 167, 210, 215, 226, 238, 246, 252, 261, 262, 263, 264, 265, 266, 286, 287, 288, 311, 312, 314, 315, 316, 317, 318, 321, 360, 366, 396, 402, 403, 420, 428, 429, 433, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 459, 460, 461, 462, 466, 506, 507, 522, 528, 530, 537, 553, 558, 571, 602, 606, 608, 609, 632, 640, 646, 649, 661, 667, 671, 677, 678, 679, 680, 681, 682, 703, 704, 705, 731, 732, 733, 734, 735, 736, 741, 786, 787, 791, 825, 828, 829, 836, 844, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 879, 880, 881, 882, 885, 926, 927, 935, 952], "reduc": [33, 99, 100, 108, 110, 112, 113, 114, 233, 234, 236, 239, 246, 457, 540, 571, 632, 656, 657, 659, 662, 667, 833, 847, 876, 922, 952], "pressur": [33, 108, 113, 114, 246, 457, 571, 632, 667, 876, 952], "improv": [33, 104, 112, 246, 632, 667], "speed": [33, 246, 260, 571, 632, 667], "minimum": [33, 120, 121, 122, 146, 175, 246, 362, 363, 364, 418, 424, 435, 551, 571, 619, 632, 667, 727, 764, 788, 789, 790, 841, 846, 850, 952], "implement": [33, 87, 127, 128, 228, 246, 260, 571, 651, 676, 870, 871, 952], "v": [33, 69, 139, 246, 453, 571, 738, 868, 952], "At": [33, 246], "moment": [33, 133, 246, 396, 462, 571, 825, 882, 952], "argument": [33, 99, 102, 108, 111, 133, 135, 140, 151, 152, 153, 171, 179, 180, 181, 193, 199, 201, 210, 216, 219, 223, 226, 246, 349, 355, 365, 383, 428, 430, 442, 443, 444, 445, 446, 448, 449, 450, 465, 481, 487, 493, 494, 522, 524, 525, 526, 527, 538, 548, 551, 557, 560, 571, 591, 595, 602, 603, 604, 620, 627, 634, 641, 645, 649, 667, 774, 780, 806, 901, 907, 913, 935, 952], "pyarrow": [33, 86, 91, 99, 102, 104, 108, 111, 115, 116, 165, 204, 209, 210, 246, 583, 929, 933, 934, 935, 952], "write_t": [33, 246], "calendar": [35, 36, 152, 153, 167, 219, 246, 335, 345, 349, 355, 359, 442, 443, 444, 445, 446, 448, 449, 450, 571, 603, 604, 609, 667, 756, 770, 774, 780, 784], "time": [36, 38, 66, 67, 70, 93, 99, 100, 110, 141, 152, 153, 167, 219, 246, 274, 275, 276, 296, 304, 324, 325, 326, 331, 345, 348, 354, 358, 494, 508, 509, 526, 527, 536, 542, 556, 571, 589, 603, 604, 609, 621, 667, 675, 691, 693, 720, 745, 746, 747, 752, 770, 773, 779, 783, 914, 936, 937, 952], "time_unit": [36, 38, 70, 93, 324, 325, 331, 354, 358, 542, 745, 746, 752, 773, 779, 783], "time_zon": [36, 70, 93, 326, 348, 747, 773], "m": [36, 38, 70, 324, 325, 331, 352, 354, 358, 494, 536, 542, 745, 746, 752, 777, 779, 783, 914], "zone": [36, 70, 99, 100, 110, 326, 348, 747, 773], "zoneinfo": 36, "run": [36, 67, 128, 151, 168, 215, 228, 246, 260, 278, 319, 557, 571, 589, 594, 596, 602, 613, 617, 621, 630, 631, 632, 640, 651, 667, 676, 695, 737, 952, 959], "available_timezon": 36, "attribut": [36, 37, 38, 45, 119, 246, 565, 567, 572, 573, 577, 578, 579, 667, 946, 948, 953, 956, 957, 958], "128": [37, 62, 844, 952], "bit": [37, 39, 40, 41, 42, 43, 44, 54, 55, 56, 57, 437, 469, 571, 852, 889, 952], "neg": [37, 152, 155, 169, 195, 196, 198, 202, 246, 290, 291, 455, 456, 463, 488, 571, 603, 628, 629, 633, 647, 667, 707, 708, 802, 827, 874, 875, 883, 908, 923, 952], "scale": [37, 139, 246, 787, 952], "experiment": [37, 69, 115, 193, 217, 218, 223, 246, 319, 349, 442, 443, 444, 445, 446, 448, 449, 450, 571, 627, 642, 645, 667, 737, 774, 803, 848, 952], "progress": 37, "expect": [37, 78, 80, 85, 260, 520, 571, 611, 613, 667, 848, 952], "delta": [38, 102, 111, 200, 220, 246, 467, 515, 528, 553, 558, 559, 563, 571, 582, 635, 643, 667, 886, 942, 952], "32": [39, 42, 55, 62, 153, 163, 246, 421, 457, 571, 604, 667, 741, 771, 844, 861, 952], "sign": [41, 42, 43, 44, 345, 437, 497, 571, 770, 852, 917, 952], "inner": [45, 51, 71, 166, 218, 246, 283, 321, 571, 608, 642, 648, 667, 700, 741, 952], "polarsdatatyp": [45, 97, 99, 100, 105, 109, 110, 119, 121, 122, 124, 128, 138, 246, 260, 305, 365, 406, 408, 477, 520, 521, 525, 538, 546, 547, 571, 593, 667, 676, 721, 831, 897, 952], "pythondatatyp": 45, "nest": [45, 51, 139, 246, 582, 787, 952], "arrai": [45, 86, 90, 99, 100, 108, 139, 204, 209, 210, 246, 274, 285, 286, 287, 288, 289, 292, 293, 301, 308, 309, 310, 314, 315, 316, 317, 318, 403, 442, 443, 445, 448, 449, 450, 454, 470, 472, 475, 476, 478, 537, 571, 667, 691, 702, 703, 704, 705, 706, 709, 710, 717, 727, 728, 729, 733, 734, 735, 736, 741, 787, 829, 857, 858, 860, 863, 864, 865, 872, 877, 890, 892, 895, 896, 898, 929, 934, 935, 943, 952], "within": [45, 117, 118, 167, 246, 465, 571, 609, 667], "wrap": [47, 93, 383, 571], "arbitrari": [47, 121], "python": [47, 70, 99, 100, 116, 128, 164, 190, 206, 228, 246, 260, 325, 406, 520, 564, 571, 576, 651, 676, 746, 757, 758, 759, 764, 933, 952], "queri": [48, 67, 101, 104, 110, 112, 113, 114, 141, 168, 180, 246, 296, 408, 478, 571, 589, 594, 596, 605, 612, 621, 630, 647, 651, 667, 675, 898, 952, 959], "pars": [48, 99, 100, 103, 110, 112, 113, 129, 151, 193, 199, 213, 223, 226, 246, 383, 428, 465, 477, 483, 494, 522, 524, 526, 527, 542, 548, 551, 560, 571, 585, 602, 627, 634, 639, 645, 649, 667, 806, 897, 903, 914, 952], "transform": [48, 128, 246, 406, 495, 496, 571], "lf": [50, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 667], "under": [50, 61, 62, 63, 64, 565, 567, 572, 573, 577, 578, 579, 946, 948, 953, 956, 957, 958], "context": [51, 123, 177, 246, 254, 260, 278, 371, 414, 464, 465, 514, 520, 529, 539, 542, 557, 570, 571, 582, 646, 667, 695], "manag": [51, 582], "categor": [51, 71, 94, 166, 207, 208, 246, 306, 408, 508, 571, 722, 723, 936, 952], "temporarili": [51, 123, 152, 153, 246, 603, 604, 667], "cach": [51, 67, 71, 104, 110, 112, 114, 408, 442, 443, 444, 445, 446, 448, 449, 450, 494, 571, 589, 594, 596, 621, 630, 667, 914], "categori": [51, 69, 71, 306, 723, 738, 803, 848, 952], "until": [51, 168, 246], "finish": [51, 74, 141, 246, 675, 952], "global": [51, 71, 121, 408, 571], "invalid": [51, 99, 100, 110, 477, 478, 483, 510, 571, 897, 898, 903], "outermost": 51, "exit": [51, 125], "df1": [51, 60, 68, 71, 117, 141, 147, 210, 221, 246], "color": [51, 71, 228, 651], "red": [51, 71, 228, 651], "green": [51, 71, 228, 651], "blue": [51, 71], "orang": [51, 71, 132, 229, 230, 232, 233, 234, 236, 238, 239, 246, 652, 653, 655, 656, 657, 659, 661, 662], "uint8": [51, 71, 119, 208, 246, 317, 318, 408, 502, 517, 571, 735, 736, 922, 952], "df2": [51, 60, 68, 71, 117, 141, 147, 210, 221, 246], "yellow": [51, 71], "black": [51, 71, 128, 246], "join": [51, 60, 67, 71, 167, 218, 246, 382, 428, 571, 589, 594, 596, 609, 621, 630, 642, 646, 667], "succe": [51, 99, 100, 110], "df_join": [51, 71], "cat": [51, 69, 71, 208, 246, 469, 495, 496, 508, 527, 567, 571, 738, 803, 848, 889, 948, 952], "u8": [51, 71, 94, 207, 208, 246, 408, 517, 571, 930, 952], "schemadict": [52, 86, 88, 89, 90, 91, 92, 110, 192, 246, 560, 613, 626, 651, 667], "composit": 52, "dai": [53, 70, 152, 153, 165, 167, 219, 246, 331, 335, 342, 345, 346, 347, 349, 354, 355, 356, 357, 359, 442, 443, 444, 445, 446, 448, 449, 450, 534, 535, 536, 571, 603, 604, 609, 667, 770, 771, 774, 780, 782], "unsign": [54, 55, 56, 57, 437, 571, 852, 952], "could": [58, 74, 137, 152, 246, 305, 531, 540, 571, 592, 603, 667, 721, 952], "static": [58, 651], "utf": 59, "descend": [60, 129, 199, 213, 246, 269, 292, 435, 454, 464, 465, 522, 571, 585, 634, 639, 667, 685, 709, 820, 850, 872, 884, 952], "union": [60, 67, 68, 179, 246, 589, 594, 596, 621, 630, 667, 741, 813, 871, 952], "uniqu": [60, 119, 120, 122, 162, 177, 237, 246, 271, 386, 394, 422, 494, 512, 514, 552, 571, 660, 667, 687, 739, 811, 822, 838, 914, 939, 941, 952], "fill": [60, 68, 97, 124, 142, 143, 196, 217, 246, 298, 315, 318, 369, 370, 376, 382, 442, 443, 445, 448, 449, 450, 456, 480, 486, 497, 541, 571, 597, 598, 629, 646, 667, 794, 795, 842, 857, 858, 860, 863, 864, 865, 875, 900, 906, 917, 952], "sort": [60, 61, 117, 129, 152, 153, 167, 174, 180, 181, 213, 219, 231, 240, 246, 269, 306, 371, 454, 465, 514, 516, 522, 571, 585, 594, 603, 604, 609, 618, 620, 621, 630, 639, 654, 663, 667, 685, 723, 820, 872, 938, 941, 952], "origin": [60, 99, 100, 215, 246, 348, 395, 408, 428, 437, 470, 475, 476, 478, 480, 486, 497, 571, 640, 667, 738, 773, 831, 848, 890, 895, 896, 898, 900, 906, 917, 952], "doe": [60, 80, 86, 88, 89, 90, 92, 93, 99, 100, 102, 103, 110, 111, 115, 117, 118, 141, 165, 189, 190, 215, 223, 246, 358, 408, 512, 539, 571, 596, 613, 640, 645, 667, 675, 783, 800, 831, 877, 943, 952], "receiv": [60, 110, 128, 180, 246, 430, 571, 620, 667], "now": [60, 153, 246, 494, 604, 667], "whose": [60, 167, 181, 246, 365, 538, 571, 609, 667], "post": 60, "constrain": 60, "newli": 60, "boolean": [60, 65, 129, 144, 146, 199, 213, 246, 256, 257, 258, 275, 299, 334, 371, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 427, 465, 477, 516, 517, 522, 560, 571, 585, 599, 634, 639, 667, 673, 674, 686, 692, 715, 755, 796, 806, 807, 808, 810, 811, 813, 814, 815, 816, 817, 818, 822, 845, 846, 870, 889, 944, 952], "2022": [60, 70, 134, 150, 246, 325, 494, 536, 542, 746, 756, 914], "x": [60, 93, 99, 100, 101, 110, 120, 121, 139, 157, 160, 162, 166, 173, 246, 253, 257, 260, 274, 283, 361, 375, 377, 378, 379, 398, 405, 406, 419, 421, 425, 427, 431, 438, 459, 462, 490, 500, 508, 510, 517, 520, 531, 532, 533, 540, 546, 547, 555, 561, 571, 608, 613, 617, 633, 667, 672, 676, 795, 823, 879, 882, 910, 936, 952], "y": [60, 93, 120, 121, 139, 160, 162, 166, 173, 246, 253, 257, 274, 283, 352, 361, 377, 378, 398, 405, 425, 427, 438, 494, 510, 517, 533, 546, 561, 571, 608, 617, 633, 667, 672, 777, 914, 952], "df3": [60, 246], "set_tbl_format": 60, "09": [60, 153, 246, 325, 335, 604, 667, 750], "01": [60, 70, 134, 150, 152, 153, 219, 246, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 494, 536, 603, 604, 667, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 914], "02": [60, 70, 116, 150, 152, 153, 219, 246, 324, 325, 331, 332, 333, 340, 341, 342, 350, 351, 354, 356, 358, 451, 494, 536, 571, 603, 604, 667, 745, 746, 748, 749, 752, 753, 754, 757, 758, 759, 760, 762, 764, 765, 766, 767, 768, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 914], "03": [60, 70, 93, 152, 153, 219, 246, 324, 325, 326, 330, 331, 333, 341, 342, 348, 349, 350, 351, 352, 354, 355, 356, 358, 603, 604, 667, 745, 746, 747, 750, 751, 752, 753, 754, 757, 758, 759, 760, 762, 764, 766, 767, 768, 771, 772, 773, 774, 775, 776, 777, 779, 781, 782, 783], "af1": 60, "af2": 60, "af3": 60, "keep": [60, 99, 100, 110, 215, 218, 219, 246, 395, 408, 524, 571, 640, 642, 667, 738, 831, 848, 952], "easili": [60, 193, 223, 226, 246, 525, 560, 627, 645, 649, 667], "dot": [60, 571, 630, 667, 952], "product": [60, 133, 246, 317, 321, 520, 571, 735, 741, 952], "fill_nul": [60, 142, 246, 494, 571, 597, 646, 667, 914, 952], "167": 60, "47": 60, "callabl": [61, 62, 63, 64, 110, 128, 146, 180, 228, 246, 260, 296, 406, 407, 430, 441, 520, 531, 532, 540, 547, 555, 571, 613, 620, 651, 667, 676, 713, 856, 952], "decor": [61, 62, 63, 64, 121, 122, 128, 246, 260, 571, 676, 952], "access": [61, 62, 63, 64, 164, 189, 190, 246, 408, 571, 646, 667], "by_first_letter_of_column_nam": 61, "f": [61, 100, 134, 150, 165, 204, 214, 217, 246, 253, 260, 296, 457, 474, 494, 520, 526, 547, 571, 713, 894, 914], "fromkei": [61, 63], "by_first_letter_of_column_valu": 61, "starts_with": [61, 469, 473, 893], "slice": [61, 67, 139, 155, 165, 202, 246, 282, 294, 441, 442, 443, 444, 445, 446, 448, 449, 450, 571, 589, 594, 596, 613, 621, 630, 631, 632, 667, 699, 711, 787, 802, 856, 857, 858, 859, 860, 861, 863, 864, 865, 923, 952], "to_seri": [61, 65, 148, 246, 296, 713], "xx": [61, 63], "xy": [61, 63], "yy": [61, 63], "yz": [61, 63], "a2": [61, 63], "b1": [61, 63], "b2": [61, 63], "pow_n": 62, "powersofn": 62, "next": [62, 298, 435, 571, 850, 952], "p": [62, 180, 246, 430, 560, 571, 620, 667], "ceil": [62, 571, 952], "previou": [62, 125, 429, 499, 571, 844, 952], "floor": [62, 571, 952], "nearest": [62, 167, 183, 238, 246, 307, 374, 434, 446, 554, 571, 609, 622, 661, 667, 724, 798, 805, 849, 861, 952], "24": [62, 116, 128, 139, 153, 246, 317, 319, 333, 421, 571, 604, 667, 737, 754, 952], "001": [62, 336, 337, 339, 344, 536, 761, 763, 769], "next_pow2": 62, "prev_pow2": 62, "nearest_pow2": 62, "split_by_column_dtyp": 63, "collect": [63, 67, 110, 111, 115, 168, 204, 246, 260, 387, 521, 526, 542, 560, 571, 585, 591, 592, 595, 596, 597, 598, 599, 600, 602, 603, 605, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 619, 620, 622, 624, 625, 627, 628, 629, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 646, 647, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 667, 813, 952], "31": [64, 325, 329, 330, 342, 356, 494, 534, 535, 542, 546, 746, 750, 751, 914], "42": [64, 153, 154, 246, 604, 667, 801, 952], "961": 64, "1764": 64, "4160": 64, "eager": [65, 152, 217, 246, 521, 542, 556, 560, 570, 582, 603, 667], "evalu": [65, 142, 144, 167, 246, 257, 270, 319, 381, 383, 387, 408, 427, 519, 521, 537, 556, 560, 564, 571, 599, 606, 608, 609, 667, 686, 737, 944, 952], "immedi": [65, 435, 521, 556, 560, 571, 850, 952], "arg_tru": [65, 571, 952], "u32": [65, 152, 178, 224, 229, 237, 239, 246, 254, 267, 268, 269, 270, 271, 272, 273, 276, 285, 313, 314, 329, 332, 336, 340, 342, 346, 347, 350, 356, 357, 399, 408, 422, 426, 435, 453, 470, 479, 482, 508, 512, 522, 529, 552, 571, 603, 647, 652, 660, 662, 667, 685, 686, 687, 702, 721, 750, 753, 760, 762, 765, 767, 768, 771, 772, 775, 781, 782, 803, 850, 890, 899, 902, 936, 939, 941, 952], "build": [66, 87], "wa": 66, "compil": [66, 272, 273, 689, 690], "gate": 66, "info": [66, 102, 111, 116, 334, 755], "otherwis": [66, 123, 174, 193, 246, 300, 308, 309, 310, 362, 363, 364, 437, 469, 471, 564, 571, 618, 627, 667, 676, 716, 727, 728, 729, 788, 789, 790, 852, 870, 871, 889, 891, 952], "version": [66, 69, 94, 102, 111, 116, 367, 494, 553, 555, 558, 571, 792, 952], "depend": [66, 116, 260, 272, 273, 414, 435, 520, 539, 542, 571, 689, 690, 850, 952], "host": [66, 99, 104, 108, 112, 114], "git": 66, "lazy_fram": 67, "type_coercion": [67, 589, 594, 596, 621, 630, 631, 632, 667], "predicate_pushdown": [67, 589, 594, 596, 613, 621, 630, 631, 632, 667], "projection_pushdown": [67, 589, 594, 596, 613, 621, 630, 631, 632, 667], "simplify_express": [67, 589, 594, 596, 621, 630, 631, 632, 667], "no_optim": [67, 589, 596, 613, 621, 631, 632, 667], "slice_pushdown": [67, 589, 594, 596, 613, 621, 630, 631, 632, 667], "common_subplan_elimin": [67, 589, 594, 596, 621, 630, 667], "graph": [67, 168, 246, 606, 646, 667], "parallel": [67, 68, 96, 101, 108, 114, 152, 167, 168, 180, 246, 278, 319, 571, 582, 603, 608, 609, 667, 695, 737, 952], "threadpool": [67, 123], "coercion": [67, 438, 571, 589, 594, 596, 621, 630, 631, 632, 667], "optim": [67, 108, 110, 112, 113, 114, 164, 168, 180, 184, 190, 215, 246, 589, 594, 596, 613, 621, 630, 631, 632, 640, 647, 667], "predic": [67, 110, 112, 113, 114, 115, 144, 189, 246, 371, 516, 540, 571, 589, 594, 596, 599, 613, 621, 624, 630, 631, 632, 647, 667, 796, 870, 871, 952], "pushdown": [67, 589, 594, 596, 613, 621, 624, 630, 631, 632, 647, 667, 870, 871, 952], "project": [67, 110, 112, 113, 114, 260, 464, 465, 571, 589, 594, 596, 613, 621, 624, 630, 631, 632, 648, 667], "turn": [67, 99, 100, 110, 514, 571, 589, 594, 596, 613, 621, 631, 632, 667], "off": [67, 99, 100, 110, 514, 571, 589, 594, 596, 613, 621, 631, 632, 667], "Will": [67, 214, 246, 589, 594, 596, 621, 630, 667, 952], "try": [67, 81, 83, 99, 100, 103, 104, 108, 110, 112, 114, 589, 594, 596, 621, 630, 667], "branch": [67, 589, 594, 596, 621, 630, 667], "subplan": [67, 589, 594, 596, 621, 630, 667], "occur": [67, 276, 420, 435, 571, 589, 594, 596, 621, 630, 667, 693, 836, 850, 952], "part": [67, 86, 490, 491, 589, 594, 596, 621, 630, 646, 667, 750, 753, 760, 762, 765, 767, 768, 775, 784, 910, 911], "fashion": [67, 166, 246, 589, 594, 596, 621, 630, 667], "item": [68, 100, 191, 246, 275, 281, 283, 367, 452, 491, 571, 692, 698, 700, 792, 867, 911, 952], "iter": [68, 129, 151, 152, 153, 164, 165, 179, 189, 190, 193, 199, 213, 214, 223, 225, 226, 246, 319, 365, 428, 465, 522, 524, 525, 526, 527, 538, 548, 551, 557, 560, 564, 571, 585, 602, 603, 604, 627, 634, 639, 645, 649, 667, 737, 952], "concatmethod": 68, "vertic": [68, 141, 217, 221, 246, 468, 548, 551, 888], "rechunk": [68, 86, 91, 99, 100, 104, 108, 110, 112, 113, 114, 141, 246, 571, 675, 725, 837, 952], "aggreg": [68, 99, 100, 108, 146, 152, 170, 171, 172, 175, 177, 181, 182, 183, 200, 201, 217, 220, 226, 227, 230, 232, 246, 254, 371, 401, 406, 428, 441, 442, 443, 444, 445, 446, 448, 449, 450, 514, 531, 532, 533, 540, 545, 548, 551, 555, 561, 571, 603, 613, 614, 615, 616, 619, 622, 635, 636, 643, 649, 650, 653, 655, 667, 856, 857, 858, 860, 863, 864, 865, 952], "concaten": [68, 146, 180, 246, 430, 526, 527, 571, 620, 667, 725, 837, 952], "diagon": [68, 214, 246], "strategi": [68, 99, 119, 120, 121, 122, 143, 152, 166, 167, 176, 246, 260, 296, 370, 571, 598, 603, 608, 609, 667, 713, 795, 952], "vstack": [68, 141, 246], "find": [68, 145, 246, 453, 571, 868, 952], "miss": [68, 99, 100, 110, 142, 246, 298, 362, 363, 364, 376, 382, 389, 391, 558, 571, 597, 667, 788, 789, 790, 943, 952], "stack": [68, 157, 221, 246], "length": [68, 69, 97, 110, 120, 124, 152, 153, 198, 246, 291, 319, 349, 355, 415, 441, 442, 443, 444, 445, 446, 448, 449, 450, 463, 480, 482, 486, 488, 497, 521, 571, 603, 604, 621, 633, 667, 708, 713, 725, 737, 738, 746, 774, 780, 826, 842, 848, 856, 857, 858, 859, 860, 861, 863, 864, 865, 883, 900, 902, 906, 908, 917, 952], "don": [68, 128, 215, 217, 246, 260, 278, 319, 520, 571, 640, 667, 676, 695, 737, 869, 943, 952], "t": [68, 103, 110, 128, 180, 215, 217, 246, 260, 278, 319, 360, 362, 363, 364, 430, 481, 487, 493, 494, 520, 564, 571, 620, 640, 667, 676, 695, 737, 786, 788, 789, 790, 869, 901, 907, 913, 914, 943, 952], "sure": [68, 86, 91, 99, 100, 101, 104, 108, 184, 246, 521], "contigu": [68, 86, 91, 99, 100, 104, 108, 110, 112, 113, 114, 184, 246], "relev": 68, "execut": [68, 168, 246, 278, 586, 613, 621, 667, 695], "df_h1": 68, "l1": 68, "l2": 68, "df_h2": 68, "r1": 68, "r2": 68, "r3": 68, "df_d1": 68, "df_d2": 68, "bin": [69, 483, 517, 565, 571, 738, 803, 848, 903, 946, 952], "label": [69, 441, 442, 443, 444, 445, 446, 448, 449, 450, 571, 621, 667, 738, 848, 856, 857, 858, 859, 860, 861, 863, 864, 865, 952], "break_point_label": [69, 738, 848, 952], "break_point": [69, 738, 803, 848, 952], "category_label": [69, 738, 848, 952], "discret": [69, 277, 320, 360, 571, 694, 738, 740, 786, 803, 848, 952], "deprec": [69, 94, 367, 494, 553, 558, 571, 667, 792, 952], "sinc": [69, 94, 102, 111, 331, 367, 494, 542, 553, 558, 571, 752, 792, 952], "assign": [69, 120, 152, 246, 435, 490, 491, 571, 603, 667, 738, 831, 848, 850, 910, 911, 952], "breakpoint": [69, 738, 848, 952], "inf": [69, 121, 122, 266, 385, 388, 510, 571, 682, 738, 803, 810, 814, 830, 844, 848, 940, 952], "interv": [70, 152, 153, 219, 246, 334, 349, 350, 355, 383, 442, 443, 444, 445, 446, 448, 449, 450, 571, 603, 604, 667, 750, 752, 753, 755, 760, 762, 765, 767, 768, 771, 772, 774, 775, 777, 779, 780, 781, 782, 784, 806, 952], "timedelta": [70, 152, 153, 219, 246, 329, 331, 332, 335, 340, 342, 345, 346, 347, 349, 350, 352, 354, 355, 356, 357, 359, 442, 443, 444, 445, 446, 448, 449, 450, 571, 603, 604, 667, 757, 759, 764, 770, 774, 780, 840, 841, 952], "1d": [70, 152, 153, 167, 219, 246, 324, 333, 341, 345, 349, 355, 358, 442, 443, 444, 445, 446, 448, 449, 450, 546, 571, 603, 604, 609, 667, 745, 752, 754, 757, 758, 759, 764, 766, 770, 774, 777, 779, 780, 782, 783], "closedinterv": [70, 152, 153, 246, 383, 442, 443, 444, 445, 446, 448, 449, 450, 571, 603, 604, 667, 806, 952], "lower": [70, 110, 152, 183, 238, 246, 308, 310, 383, 404, 434, 437, 446, 521, 554, 571, 596, 603, 622, 661, 667, 729, 806, 830, 849, 852, 861, 940, 952], "bound": [70, 99, 100, 139, 152, 246, 281, 295, 308, 309, 310, 383, 404, 513, 521, 571, 603, 667, 698, 712, 728, 729, 787, 806, 830, 940, 952], "upper": [70, 99, 100, 139, 152, 246, 308, 309, 383, 513, 521, 571, 603, 667, 728, 787, 806, 830, 940, 952], "period": [70, 152, 153, 195, 196, 246, 290, 349, 355, 362, 363, 364, 429, 455, 456, 571, 603, 604, 628, 629, 667, 707, 774, 780, 788, 789, 790, 844, 874, 875, 952], "like": [70, 87, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 160, 162, 166, 246, 278, 417, 435, 548, 551, 561, 571, 596, 623, 667, 695, 850, 952], "durat": [70, 167, 219, 246, 330, 333, 337, 339, 341, 344, 351, 358, 508, 571, 609, 667, 751, 754, 761, 763, 766, 769, 776, 783, 936, 952], "3d12h4m25": [70, 152, 153, 167, 219, 246, 349, 355, 603, 604, 609, 667, 774, 780], "hour": [70, 152, 153, 167, 219, 246, 345, 349, 355, 442, 443, 444, 445, 446, 448, 449, 450, 535, 536, 571, 603, 604, 609, 667, 770, 774, 780], "minut": [70, 152, 153, 167, 219, 246, 345, 349, 355, 442, 443, 444, 445, 446, 448, 449, 450, 535, 536, 571, 603, 604, 609, 667, 770, 774, 780], "tempor": [70, 152, 153, 164, 190, 206, 246, 383, 442, 443, 444, 445, 446, 448, 449, 450, 571, 582, 603, 604, 667, 806, 821, 952], "window": [70, 152, 153, 246, 319, 349, 355, 362, 363, 364, 428, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 526, 571, 603, 604, 667, 737, 774, 780, 788, 789, 790, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 952], "timezon": [70, 494, 914], "granular": 70, "finer": 70, "permut": 70, "1mo": [70, 152, 153, 167, 219, 246, 326, 330, 345, 348, 349, 352, 355, 442, 443, 444, 445, 446, 448, 449, 450, 571, 603, 604, 609, 667, 747, 751, 767, 770, 771, 772, 773, 774, 780, 781], "dtrang": 70, "1985": 70, "04": [70, 115, 152, 219, 246, 325, 326, 329, 330, 333, 340, 341, 342, 346, 348, 349, 350, 351, 352, 356, 357, 358, 494, 536, 603, 667, 747, 751, 754, 760, 762, 765, 766, 767, 768, 772, 773, 775, 776, 777, 781, 782, 783, 914], "05": [70, 115, 117, 118, 167, 219, 246, 325, 326, 330, 348, 350, 352, 609, 667, 746, 747, 748, 749, 750, 751, 773, 774, 778, 780, 782], "07": [70, 325, 329, 346, 348, 349, 355, 357, 494, 542, 746, 750, 782, 914], "08": [70, 117, 118, 153, 246, 325, 349, 494, 536, 604, 667, 774, 780, 914], "america": [70, 773], "new_york": [70, 773], "\u03bc": [70, 93, 152, 153, 167, 219, 246, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 494, 542, 603, 604, 609, 667, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 914], "est": [70, 773], "disabl": [71, 164, 246], "equal": [71, 99, 100, 110, 117, 118, 147, 152, 167, 174, 246, 361, 377, 398, 441, 442, 443, 444, 445, 446, 448, 449, 450, 479, 480, 486, 497, 521, 571, 603, 609, 618, 667, 856, 857, 858, 859, 860, 861, 863, 864, 865, 869, 899, 900, 906, 917, 952], "encount": [72, 152, 246, 423, 424, 477, 478, 528, 531, 540, 558, 571, 603, 667, 840, 841, 897, 898, 952], "duplic": [75, 160, 166, 167, 215, 246, 384, 571, 608, 609, 640, 667, 808, 952], "certain": [76, 102, 111, 158, 219, 246, 525, 589, 621, 631, 632, 667, 952], "least": [78, 121, 429, 514, 571, 844, 941, 952], "unexpect": [79, 246], "caus": [79, 87, 99, 100, 110, 127, 141, 246, 675, 952], "panic": 79, "combin": [81, 83, 152, 153, 154, 167, 219, 246, 257, 270, 355, 427, 481, 487, 493, 571, 603, 604, 609, 630, 667, 780, 901, 907, 913], "mismatch": 81, "incompat": 83, "pa": [86, 115], "chunkedarrai": [86, 176, 246, 741, 952], "recordbatch": [86, 165, 246], "schemadefinit": [86, 88, 89, 90, 92, 246, 667], "schema_overrid": [86, 88, 89, 90, 91, 92, 165, 246, 667], "copi": [86, 87, 127, 130, 131, 165, 204, 210, 223, 246, 368, 497, 571, 587, 588, 645, 667, 672, 726, 730, 743, 793, 917, 929, 934, 935, 952], "closest": 86, "pair": [86, 88, 89, 90, 92, 185, 246, 624, 667], "declar": [86, 88, 89, 90, 92, 246, 667], "sever": [86, 88, 89, 90, 92, 246, 667], "wai": [86, 88, 89, 90, 92, 135, 151, 165, 180, 199, 226, 246, 428, 430, 465, 525, 571, 591, 602, 620, 634, 649, 667], "As": [86, 88, 89, 90, 92, 103, 246, 556, 667], "auto": [86, 88, 89, 90, 92, 108, 114, 214, 246, 494, 667], "automat": [86, 88, 89, 90, 92, 93, 99, 100, 101, 110, 121, 122, 123, 193, 223, 246, 408, 481, 487, 493, 494, 571, 627, 645, 667, 831, 901, 907, 913, 914, 952], "equival": [86, 88, 89, 90, 92, 102, 163, 177, 246, 253, 257, 361, 375, 377, 378, 398, 405, 419, 421, 425, 427, 431, 482, 500, 510, 517, 571, 667, 824, 902, 915, 916, 952], "form": [86, 88, 89, 90, 92, 164, 190, 217, 246, 429, 571, 667, 844, 952], "them": [86, 88, 89, 90, 92, 110, 141, 152, 153, 167, 174, 219, 246, 283, 383, 423, 424, 526, 571, 603, 604, 609, 618, 667, 675, 700, 840, 841, 952], "dimens": [86, 88, 90, 92, 246, 439, 571, 667, 854, 952], "construct": [86, 88, 89, 90, 91, 92, 246, 408, 571, 601, 623, 667, 952], "allow_copi": [87, 127], "interchang": [87, 127], "protocol": [87, 101, 127], "__dataframe__": 87, "convers": [87, 127, 165, 210, 246, 494, 582, 914, 933, 934, 935, 952], "detail": [87, 101, 117, 118, 127, 246, 667, 960], "latest": [87, 102, 111, 127, 376, 415, 571], "index": [87, 91, 95, 101, 116, 127, 145, 152, 153, 158, 167, 181, 187, 189, 198, 211, 219, 224, 246, 254, 267, 268, 269, 271, 272, 273, 281, 291, 295, 345, 442, 443, 444, 445, 446, 448, 449, 450, 453, 463, 475, 488, 504, 571, 603, 604, 609, 633, 647, 667, 683, 684, 685, 686, 687, 689, 690, 698, 708, 712, 770, 842, 868, 871, 883, 895, 908, 924, 952], "throw": [87, 305, 477, 478, 571, 721, 897, 898, 952], "runtimeerror": 87, "from_panda": [87, 103], "from_arrow": 87, "effici": [87, 165, 246], "map": [88, 89, 99, 100, 104, 105, 108, 109, 110, 112, 128, 138, 164, 185, 189, 190, 205, 246, 349, 355, 407, 408, 514, 520, 571, 593, 624, 667, 774, 780, 831, 952], "clone": [88, 89, 90, 91, 92, 130, 209, 210, 246, 587, 667, 726, 933, 934, 935, 943, 952], "dimension": [88, 90, 92, 246, 667, 952], "infer_schema_length": [89, 92, 99, 100, 103, 110, 113, 246, 667], "NOT": [89, 117, 118], "typic": [89, 128, 246, 676, 952], "clearer": 89, "load": [89, 91, 102, 111, 246, 582, 605, 612, 667], "want": [89, 128, 141, 177, 246, 260, 308, 309, 310, 371, 406, 408, 442, 443, 444, 445, 446, 448, 449, 450, 531, 540, 571, 589, 605, 612, 667, 675, 676, 727, 728, 729, 934, 952], "_partial_": [89, 246, 667], "omit": [89, 93, 120, 121, 122, 177, 246], "mani": [89, 92, 101, 141, 246, 675, 952], "scan": [89, 92, 99, 100, 108, 110, 111, 112, 113, 114, 115, 596, 605, 612, 667], "slow": [89, 92, 99, 100, 110, 260, 319, 571, 737, 952], "partial": 89, "present": [89, 117, 121, 387, 571, 943, 952], "np": [90, 144, 246, 504, 571, 667, 810, 814, 815, 816, 856, 924, 952], "ndarrai": [90, 144, 209, 246, 504, 571, 667, 741, 868, 871, 924, 934, 952], "numpi": [90, 116, 133, 209, 210, 246, 423, 424, 571, 667, 810, 814, 815, 816, 840, 841, 856, 868, 934, 935, 943, 952], "columnar": [90, 92, 164, 190, 246], "interpret": [90, 92, 99, 100, 110, 246, 667], "yield": [90, 92, 99, 100, 110, 139, 141, 214, 246, 667, 675, 787, 952], "conclus": [90, 92, 246, 667], "nan_to_nul": [91, 246, 667, 952], "include_index": 91, "panda": [91, 103, 116, 210, 246, 508, 571, 667, 935, 936, 952], "datetimeindex": [91, 741, 952], "instal": [91, 99, 100, 101, 104, 108, 116, 133, 209, 210, 246, 630, 667, 935, 952], "nan": [91, 117, 118, 121, 127, 142, 210, 246, 322, 323, 361, 369, 377, 378, 382, 389, 391, 392, 393, 398, 405, 409, 418, 423, 424, 425, 510, 528, 558, 571, 597, 667, 678, 682, 742, 794, 815, 816, 840, 841, 856, 935, 952], "convert": [91, 94, 102, 103, 111, 127, 205, 206, 207, 208, 209, 212, 246, 296, 326, 483, 494, 667, 713, 747, 903, 914, 921, 932, 933, 934, 935, 943, 952], "pd": [91, 103, 508, 571, 936, 952], "pd_df": 91, "pd_seri": 91, "tbl": [93, 96, 100], "reconstruct": 93, "repr": [93, 121, 122], "need": [93, 99, 100, 103, 117, 118, 152, 153, 197, 209, 246, 296, 408, 457, 479, 571, 603, 604, 667, 876, 899, 952], "trim": 93, "whitespac": [93, 481, 487, 493, 901, 907, 913], "prompt": 93, "extract": [93, 329, 330, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 350, 351, 356, 357, 359, 430, 476, 477, 478, 571, 748, 749, 750, 751, 753, 754, 756, 760, 761, 762, 763, 765, 766, 767, 768, 769, 771, 772, 775, 776, 778, 781, 782, 784, 896, 897, 898], "to_init_repr": [93, 246, 952], "handl": [93, 99, 100, 110, 115, 277, 320, 497, 571, 694, 740, 917, 952], "truncat": [93, 152, 246, 603, 621, 667], "identifi": [93, 173, 179, 215, 246, 617, 640, 667], "compound": 93, "struct": [93, 177, 193, 212, 216, 223, 246, 296, 408, 477, 490, 491, 514, 531, 532, 533, 547, 571, 627, 641, 645, 667, 713, 897, 910, 911], "neither": [93, 191, 246], "though": 93, "plan": [93, 167, 168, 246, 586, 594, 601, 608, 609, 623, 630, 648, 667], "source_ac": 93, "source_cha": 93, "ident": [93, 130, 131, 246, 587, 588, 667, 726, 730, 952], "timestamp": [93, 348, 542, 773], "tor_id": 93, "nnel_id": 93, "asia": [93, 748, 749, 778], "tokyo": 93, "123456780": 93, "9876543210": 93, "56": [93, 506, 571], "59": [93, 116, 325, 340, 350, 535, 746, 765, 775], "663053": 93, "jst": 93, "803065983": 93, "2055938745": 93, "38": [93, 121], "18": [93, 153, 246, 318, 349, 355, 358, 382, 395, 571, 604, 621, 667, 783], "050545": 93, "source_actor_id": 93, "source_channel_id": 93, "dummi": [94, 207, 246, 930, 952], "to_dummi": [94, 246, 952], "foo_1": [94, 207, 246], "foo_2": [94, 207, 246], "bar_3": [94, 207, 246], "bar_4": [94, 207, 246], "ham_a": [94, 207, 246], "ham_b": [94, 207, 246], "datatypeclass": 95, "get": [95, 105, 109, 123, 129, 132, 138, 148, 149, 152, 153, 155, 156, 160, 162, 169, 176, 189, 192, 194, 198, 202, 213, 222, 231, 240, 246, 254, 267, 268, 269, 271, 280, 284, 285, 297, 314, 315, 316, 317, 318, 331, 372, 380, 384, 386, 394, 397, 400, 409, 410, 411, 414, 416, 418, 423, 424, 434, 463, 467, 479, 482, 502, 503, 511, 515, 539, 544, 548, 549, 550, 551, 559, 562, 563, 571, 585, 590, 593, 600, 603, 604, 605, 610, 612, 626, 633, 637, 639, 644, 654, 663, 667, 683, 684, 685, 686, 687, 697, 701, 702, 714, 725, 733, 734, 735, 736, 752, 799, 802, 806, 808, 811, 822, 827, 832, 834, 835, 837, 840, 841, 845, 846, 849, 883, 886, 899, 902, 923, 929, 930, 938, 942, 943, 952], "uint32": [95, 116, 139, 246, 269, 272, 273, 285, 329, 332, 336, 338, 340, 342, 343, 346, 347, 350, 356, 357, 438, 470, 479, 482, 504, 508, 571, 686, 689, 690, 702, 721, 750, 753, 760, 762, 765, 767, 768, 771, 772, 775, 781, 782, 787, 869, 890, 936, 952], "regular": [95, 164, 189, 190, 219, 246, 365, 525, 538, 548, 551, 561, 571], "uint64": [95, 154, 246, 272, 273, 379, 437, 571, 689, 690, 801, 852, 952], "bigidx": 95, "read": [96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 141, 246, 406, 564, 571, 596, 601, 623, 667, 675, 952], "batch": [96, 100, 113, 613, 667], "over": [96, 99, 100, 102, 110, 121, 128, 141, 164, 165, 189, 190, 214, 225, 228, 246, 260, 319, 370, 382, 406, 407, 441, 442, 443, 444, 445, 446, 448, 449, 450, 520, 531, 532, 540, 547, 555, 571, 651, 675, 676, 737, 856, 857, 858, 860, 864, 952], "fetch": [96, 110, 168, 246, 587, 589, 605, 612, 667], "ideal": 96, "read_csv_batch": [96, 583], "tpch": [96, 100], "tables_scale_100": [96, 100], "lineitem": [96, 100, 101], "try_parse_d": [96, 99, 100, 110], "In": [97, 102, 111, 114, 121, 122, 124, 128, 139, 141, 152, 153, 177, 246, 260, 414, 571, 603, 604, 667, 675, 787, 851, 952], "probabl": [97, 124, 360, 571, 786, 952], "n_row": [98, 99, 100, 104, 108, 110, 112, 113, 114, 165, 246, 596, 667], "accept": [98, 99, 100, 102, 104, 108, 129, 140, 151, 193, 199, 213, 223, 226, 246, 253, 365, 383, 428, 465, 517, 522, 524, 525, 526, 527, 538, 548, 551, 560, 571, 585, 595, 602, 627, 634, 639, 645, 649, 667, 806, 952], "stop": [98, 99, 100, 104, 108, 110, 112, 113, 114, 329, 331, 332, 334, 335, 340, 342, 346, 347, 349, 350, 354, 355, 356, 357, 359, 745, 747, 750, 752, 753, 755, 760, 762, 765, 767, 768, 771, 772, 773, 774, 775, 777, 779, 780, 781, 782, 783, 784], "textio": 99, "new_column": [99, 100, 103, 110, 186, 246], "comment_char": [99, 100, 110], "quote_char": [99, 100, 110], "skip_row": [99, 100, 110], "missing_utf8_is_empty_str": [99, 100, 110], "ignore_error": [99, 100, 110], "n_thread": [99, 100], "8192": 99, "csvencod": [99, 100, 110], "low_memori": [99, 100, 108, 110, 113, 114], "storage_opt": [99, 102, 104, 108, 111, 112, 114], "skip_rows_after_head": [99, 100, 110], "row_count_nam": [99, 100, 104, 108, 110, 112, 113, 114], "row_count_offset": [99, 100, 104, 108, 110, 112, 113, 114], "sample_s": [99, 100], "eol_char": [99, 100, 110], "we": [99, 100, 103, 110, 167, 246, 278, 483, 546, 564, 609, 613, 667, 676, 695, 803, 848, 903, 952], "handler": [99, 100, 103], "g": [99, 100, 102, 103, 104, 108, 111, 112, 114, 217, 246, 253, 260, 365, 457, 538, 571, 624, 667, 869, 934, 952], "builtin": [99, 100, 103], "stringio": [99, 100], "fsspec": [99, 100, 104, 108, 111, 112, 114, 116], "remot": [99, 100, 104, 108], "first": [99, 100, 103, 110, 113, 128, 150, 152, 155, 167, 169, 176, 180, 181, 202, 208, 214, 215, 219, 231, 246, 269, 271, 278, 281, 282, 319, 345, 349, 380, 386, 400, 408, 430, 453, 465, 475, 477, 478, 484, 485, 524, 531, 540, 544, 564, 571, 589, 603, 605, 609, 612, 620, 640, 646, 654, 667, 685, 695, 698, 699, 713, 737, 739, 770, 774, 802, 811, 827, 831, 868, 895, 897, 898, 904, 905, 923, 932, 952], "autogener": [99, 100, 110], "column_x": [99, 100, 110], "enumer": [99, 100, 110, 165, 246], "shorter": [99, 100], "remain": [99, 100, 110, 139, 246, 260, 490, 491, 571, 613, 667, 787, 910, 911, 952], "comment": [99, 100, 110], "instanc": [99, 100, 110, 121, 122, 141, 146, 246, 296, 305, 415, 442, 443, 444, 445, 446, 448, 449, 450, 531, 540, 571, 613, 647, 667, 675, 721, 952], "special": [99, 100, 110, 676, 952], "escap": [99, 100, 110], "dure": [99, 100, 110, 125, 141, 246, 675, 952], "would": [99, 100, 110, 269, 281, 414, 435, 522, 571, 685, 698, 850, 934, 952], "prefer": [99, 100, 102, 110, 128, 141, 164, 189, 190, 228, 246, 260, 441, 571, 651, 667, 675, 676, 856, 952], "treat": [99, 100, 110, 469, 484, 485, 889, 904, 905], "10000": [99, 165, 246, 497], "check": [99, 100, 110, 117, 118, 147, 161, 163, 246, 256, 258, 275, 299, 302, 303, 383, 387, 469, 473, 492, 571, 613, 667, 673, 674, 692, 715, 718, 719, 807, 809, 812, 813, 819, 820, 821, 823, 824, 869, 889, 893, 912, 952], "might": [99, 100, 110, 123, 260, 414, 512, 571, 935, 952], "issu": [99, 100, 103, 110, 317, 318, 502, 571, 735, 736, 922, 952], "iso8601": [99, 100, 110], "naiv": [99, 100, 110, 325, 746], "alwai": [99, 128, 228, 246, 414, 564, 613, 651, 667, 676, 952], "physic": [99, 100, 167, 246, 306, 508, 571, 586, 608, 609, 667, 723, 936, 952], "cpu": [99, 100], "system": [99, 100], "wrongli": 99, "done": [99, 100, 110, 115, 150, 167, 246, 259, 305, 480, 486, 571, 609, 667, 721, 900, 906, 952], "buffer": [99, 100, 139, 164, 246, 787, 952], "modifi": [99, 100, 110, 123, 125, 157, 164, 221, 246, 270, 348, 358, 571, 773, 783, 853, 915, 916, 952], "lossi": [99, 100, 110], "decod": [99, 100], "im": [99, 100], "usag": [99, 100, 110, 121, 122, 197, 246, 877, 952], "expens": [99, 100, 108, 110, 113, 114, 128, 164, 189, 190, 214, 215, 246, 260, 571, 640, 667, 675, 676, 952], "nativ": [99, 104, 108, 128, 164, 190, 206, 228, 246, 260, 571, 576, 651, 676, 952], "parser": 99, "even": 99, "regard": [99, 528, 558], "sens": [99, 104, 108, 112, 114, 152, 153, 174, 219, 246, 603, 604, 618, 667], "particular": [99, 104, 108, 112, 114, 139, 246, 787, 952], "storag": [99, 102, 104, 108, 111, 112, 114], "skip": [99, 100, 103, 108, 110, 114, 217, 246, 676, 952], "offset": [99, 100, 104, 108, 110, 112, 113, 114, 152, 153, 198, 219, 224, 246, 291, 345, 349, 355, 463, 488, 494, 571, 603, 604, 633, 647, 667, 708, 770, 774, 780, 883, 908, 914, 952], "row_count": [99, 100, 104, 108, 110, 112, 113, 114], "sampl": [99, 100, 228, 246, 462, 571, 651, 882, 952], "estim": [99, 100, 139, 246, 363, 364, 396, 571, 787, 789, 790, 825, 952], "alloc": [99, 100, 139, 184, 246, 787, 952], "scan_csv": [99, 100, 631, 632, 667], "lazili": [99, 100, 110, 111, 112, 113, 114, 408, 571], "glob": [99, 100, 110, 112, 113, 114], "pattern": [99, 100, 110, 112, 113, 114, 164, 246, 413, 469, 470, 475, 476, 484, 485, 870, 871, 889, 890, 895, 896, 904, 905, 952], "store": [99, 108, 141, 164, 190, 246, 675, 952], "continu": [99, 108, 462, 571, 882, 952], "benchmark": [99, 108], "50000": 100, "batchedcsvread": [100, 582], "upon": 100, "creation": 100, "gather": 100, "next_batch": 100, "big": 100, "interest": 100, "seen_group": 100, "big_fil": 100, "while": [100, 102, 103, 111, 121, 122, 164, 173, 214, 246, 617, 667], "df_current_batch": 100, "concat": [100, 725, 837, 952], "partition_df": 100, "partition_bi": [100, 165, 246], "as_dict": [100, 179, 246], "fh": 100, "write_csv": [100, 110, 246], "els": [100, 564], "partition_on": 101, "partition_rang": 101, "partition_num": 101, "dbreadengin": 101, "connectorx": [101, 116], "raw": 101, "partit": [101, 102, 108, 111, 115, 165, 179, 246], "backend": [101, 102, 111], "transfer": 101, "document": [101, 103, 478, 494, 898, 914], "redshift": 101, "mysql": 101, "mariadb": 101, "clickhous": 101, "oracl": 101, "bigqueri": 101, "pleas": 101, "doc": [101, 133, 246], "github": 101, "sfu": 101, "db": 101, "connector": 101, "destin": 101, "sqlite": 101, "develop": [101, 121, 122], "flight_sql": 101, "further": [101, 935, 952], "wide": [101, 150, 173, 217, 246, 617, 667], "adopt": 101, "significantli": 101, "better": [101, 128, 228, 246, 260, 514, 571, 651, 870, 871, 952], "driver": 101, "cpp": 101, "partition_col": 101, "explicitli": [101, 120, 121, 408, 560, 571], "delta_table_opt": [102, 111], "lake": [102, 111, 582], "root": [102, 111, 395, 407, 416, 432, 466, 501, 570, 571, 885, 952], "filesystem": [102, 111], "absolut": [102, 111, 117, 118, 189, 246, 252, 362, 363, 364, 571, 671, 788, 789, 790, 952], "gc": [102, 111], "azur": [102, 111], "deltalak": [102, 111, 116], "cloud": [102, 111, 115], "configur": [102, 111], "authent": [102, 111], "keyword": [102, 108, 111, 133, 180, 189, 193, 223, 226, 246, 430, 557, 560, 571, 620, 627, 645, 649, 667, 952], "table_path": [102, 111], "avoid": 102, "year": [102, 111, 152, 153, 167, 219, 246, 334, 335, 345, 346, 349, 355, 356, 442, 443, 444, 445, 446, 448, 449, 450, 534, 535, 571, 603, 604, 609, 667, 755, 756, 770, 771, 774, 780, 781], "2021": [102, 111, 134, 150, 152, 219, 246, 494, 546, 603, 667, 748, 749, 756, 778, 821, 914, 952], "aw": [102, 111], "bucket": [102, 111, 349, 355, 774, 780, 803, 952], "aws_access_key_id": [102, 111], "the_aws_access_key_id": [102, 111], "aws_secret_access_kei": [102, 111], "the_aws_secret_access_kei": [102, 111], "googl": [102, 111], "service_account": [102, 111], "service_account_json_absolute_path": [102, 111], "az": [102, 111], "adl": [102, 111], "abf": [102, 111], "azure_storage_account_nam": [102, 111], "azure_storage_account_kei": [102, 111], "without_fil": [102, 111], "track": [102, 111, 128, 246], "sheet_id": 103, "sheet_nam": 103, "xlsx2csv_option": 103, "read_csv_opt": 103, "xlsx2csv": [103, 116], "read_csv": [103, 110], "skip_empty_lin": 103, "my": [103, 115], "datasheet": 103, "correct": [103, 363, 364, 396, 447, 462, 571, 613, 667, 789, 790, 825, 862, 882, 952], "look": [103, 296, 299, 715], "fix": [103, 120, 121, 358, 442, 443, 444, 445, 446, 448, 449, 450, 571, 783], "whole": [103, 464, 465, 475, 571, 667, 895], "With": [103, 128, 246, 260, 571, 676, 952], "1000": [103, 139, 208, 246, 336, 337, 497, 761, 932, 952], "spreadsheet": [103, 181, 246], "xl": 103, "xlsm": 103, "xlsb": 103, "odf": 103, "od": [103, 493, 913], "odt": 103, "memory_map": [104, 108, 112], "v2": [104, 112], "greatli": [104, 112], "repeat": [104, 112, 436, 438, 571], "o": [104, 112, 304, 319, 474, 509, 571, 720, 737, 894, 937, 952], "page": [104, 108, 112, 114, 246, 571, 582, 632, 667, 952], "give": [104, 108, 112, 113, 114, 173, 215, 246, 331, 396, 438, 510, 571, 582, 617, 640, 667, 752, 825, 952], "That": [104, 613, 667], "filenam": 104, "my_fil": 104, "write_ipc": [104, 246], "read_ndjson": 106, "parallelstrategi": [108, 114], "use_statist": [108, 114], "awar": [108, 164, 190, 206, 246, 494, 914], "stabl": [108, 133, 191, 246, 617, 667], "row_group": [108, 114], "read_tabl": 108, "with_column_nam": 110, "push": [110, 112, 113, 114, 115], "down": [110, 112, 113, 114, 115, 374, 571, 798, 952], "therebi": [110, 112, 113, 114], "potenti": [110, 112, 113, 114], "overhead": [110, 112, 113, 114], "realloc": [110, 112, 113, 141, 246, 675, 952], "headerless": 110, "unlik": 110, "fewer": 110, "my_long_fil": 110, "doesn": [110, 360, 571, 786, 943, 952], "thing": [110, 518, 539], "less": [110, 167, 246, 398, 405, 480, 486, 491, 497, 571, 609, 667, 900, 906, 911, 917], "limit": [110, 143, 246, 298, 308, 309, 310, 370, 376, 571, 598, 605, 632, 667, 727, 728, 729, 795, 952], "breezah": 110, "languag": [110, 152, 153, 167, 219, 246, 345, 349, 355, 442, 443, 444, 445, 446, 448, 449, 450, 571, 603, 604, 609, 667, 770, 774, 780], "hard": [110, 613, 667], "mydf": 110, "lambda": [110, 128, 146, 180, 228, 246, 260, 296, 362, 363, 364, 406, 407, 441, 520, 531, 532, 533, 540, 547, 555, 561, 571, 613, 620, 651, 667, 676, 713, 788, 789, 790, 952], "simpli": [110, 531, 540], "idx": [110, 152, 165, 246, 296, 603, 667, 713, 871, 952], "uint16": [110, 317, 318, 502, 571, 735, 736, 922, 952], "u16": 110, "aws_region": 111, "eu": 111, "central": [111, 396, 462, 571, 825, 882, 952], "allow_pyarrow_filt": 115, "comparison": 115, "dset": 115, "folder": 115, "1970": 115, "stdout": [116, 150, 246], "13": [116, 130, 131, 142, 143, 149, 153, 158, 168, 176, 223, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 441, 443, 526, 531, 540, 563, 571, 587, 588, 597, 598, 604, 611, 645, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 667, 676, 774, 780, 781, 952], "platform": 116, "maco": 116, "arm64": 116, "arm": 116, "64bit": [116, 437, 571, 852, 952], "main": 116, "feb": 116, "clang": 116, "14": [116, 128, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 335, 382, 571, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 774], "1400": 116, "29": 116, "202": 116, "2_alpha": 116, "detect": 116, "matplotlib": [116, 621, 630, 667], "check_dtyp": [117, 118], "check_exact": [117, 118], "rtol": [117, 118], "1e": [117, 118], "atol": [117, 118], "nans_compare_equ": [117, 118], "check_column_ord": 117, "check_row_ord": 117, "assertionerror": [117, 118], "compar": [117, 118, 147, 246, 361, 377, 378, 398, 405, 425, 519, 571, 869, 952], "exactli": [117, 118, 121, 122, 490, 491, 877, 910, 911, 952], "toler": [117, 118, 167, 246, 609, 667], "inexact": [117, 118], "assert": [117, 118, 120, 121, 122, 153, 246, 582, 604, 667, 800, 952], "irrespect": 117, "unsort": 117, "check_nam": 118, "s1": [118, 146, 246, 935, 944, 952], "searchstrategi": [119, 121, 122], "null_prob": [119, 121, 122], "percentag": [119, 121, 122, 429, 571, 844, 952], "chanc": [119, 121, 122], "flag": [119, 454, 571, 594, 613, 667, 872, 952], "hypothesi": [119, 120, 121, 122, 960], "sampled_from": 119, "unique_small_int": 119, "ccy": 119, "gbp": 119, "eur": [119, 134, 150, 246], "jpy": 119, "min_col": [120, 121], "max_col": [120, 121], "suitabl": [120, 128, 246, 260, 453, 571, 676, 868, 952], "standalon": [120, 121], "itself": [120, 611, 667], "mincol": 120, "exact": [120, 121, 122, 197, 246, 494, 510, 571, 914], "especi": 120, "punctuat": 120, "test_special_char_colname_init": 120, "test_unique_xyz": 120, "assert_someth": 120, "min_siz": [121, 122], "max_siz": [121, 122], "include_col": 121, "allow_infin": [121, 122], "allowed_dtyp": [121, 122], "excluded_dtyp": [121, 122], "describ": [121, 150, 246, 952], "desir": 121, "ignor": [121, 122, 171, 201, 246, 277, 320, 348, 362, 363, 364, 423, 424, 571, 694, 740, 773, 788, 789, 790, 840, 841, 952], "n_chunk": [121, 122, 246, 952], "randomis": 121, "onto": 121, "independ": [121, 122], "either": [121, 153, 168, 171, 179, 189, 201, 246, 522, 560, 604, 611, 667], "pct": 121, "preced": 121, "disallow": [121, 122], "exclud": [121, 122, 315, 318, 383, 525, 558, 571, 806, 821, 952], "deploi": [121, 122], "characterist": [121, 122], "concret": [121, 122], "test_repr": [121, 122], "isinst": [121, 122, 246], "known": [121, 651], "df_strategi": 121, "15836": 121, "1755e": 121, "575050513": 121, "constructor": 122, "max_data_s": 122, "54666": 122, "6414": 122, "63290": 122, "polars_max_thread": 123, "behind": 123, "lock": 123, "reason": 123, "low": 123, "pyspark": 123, "udf": [123, 128, 180, 228, 246, 260, 430, 520, 571, 620, 651, 667, 676, 952], "similar": [123, 146, 167, 246, 428, 564, 571, 609, 667], "recommend": [123, 164, 180, 246], "scope": 125, "lifetim": 125, "initi": [125, 531, 540, 564], "whatev": 125, "were": 125, "enter": 125, "set_verbos": 125, "do_various_th": 125, "restor": 125, "nan_as_nul": 127, "_pyarrowdatafram": 127, "nullabl": 127, "extens": [127, 210, 246, 935, 952], "propag": [127, 171, 201, 246, 423, 424, 571, 840, 841, 952], "inference_s": [128, 246], "256": [128, 246, 844, 952], "user": [128, 180, 228, 246, 260, 430, 454, 520, 571, 620, 651, 667, 676, 872, 952], "logic": [128, 228, 246, 257, 427, 508, 517, 571, 601, 608, 623, 648, 651, 667, 676, 936, 952], "almost": [128, 228, 246, 651, 676, 952], "_significantly_": [128, 228, 246, 651, 676, 952], "intens": [128, 228, 246, 651, 676, 952], "becaus": [128, 139, 152, 168, 217, 228, 246, 278, 603, 651, 667, 676, 695, 787, 952], "forc": [128, 167, 228, 246, 608, 609, 651, 667, 676, 952], "materi": [128, 228, 246, 621, 651, 667, 676, 952], "parallelis": [128, 228, 246, 651, 676, 952], "optimis": [128, 228, 246, 651, 667, 676, 870, 871, 952], "achiev": [128, 228, 246, 260, 571, 651, 676, 952], "best": [128, 228, 246, 260, 571, 651, 676, 952], "tri": [128, 246], "arbitrarili": [128, 246], "rearrang": [128, 246], "preserv": [128, 210, 246, 459, 571, 879, 935, 952], "lru_cach": [128, 246, 260, 571, 676, 952], "magnitud": [128, 246, 260, 571, 676, 952], "speedup": [128, 164, 246, 260, 571, 676, 952], "column_1": [128, 214, 246], "scalar": [128, 163, 246, 453, 520, 546, 571, 824, 868, 952], "k": [129, 213, 246, 304, 306, 396, 509, 571, 585, 639, 667, 720, 723, 825, 937, 952], "intoexpr": [129, 151, 152, 153, 193, 199, 213, 223, 226, 246, 383, 428, 465, 522, 524, 526, 527, 531, 540, 548, 551, 557, 560, 564, 571, 585, 602, 603, 604, 627, 634, 639, 649, 667, 806, 952], "nulls_last": [129, 199, 213, 246, 269, 464, 571, 585, 634, 639, 667, 685, 952], "smallest": [129, 213, 246, 304, 571, 585, 639, 667, 720, 952], "largest": [129, 213, 246, 509, 571, 585, 639, 667, 937, 952], "top": [129, 213, 246, 585, 639, 667], "last": [129, 155, 167, 169, 181, 199, 202, 213, 215, 240, 246, 269, 281, 294, 319, 329, 346, 356, 464, 491, 503, 562, 571, 585, 609, 634, 637, 639, 640, 663, 667, 685, 698, 711, 737, 750, 771, 781, 802, 827, 911, 923, 952], "top_k": [129, 246, 304, 571, 585, 667, 720, 952], "cheap": [130, 131, 246, 587, 588, 667, 675, 726, 730, 952], "deepcopi": [130, 131, 246, 587, 588, 667, 726, 730, 952], "clear": [131, 246, 588, 667, 730, 952], "properti": [132, 138, 156, 192, 194, 222, 246, 582, 590, 593, 626, 644, 667], "appl": [132, 157, 166, 185, 187, 205, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 432, 440, 473, 492, 501, 571, 608, 624, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 667, 893, 912], "banana": [132, 205, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 432, 440, 501, 571, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662], "pearson": [133, 246, 396, 462, 528, 553, 571, 825, 882, 952], "correl": [133, 246, 528, 553, 558], "coeffici": [133, 246, 462, 571, 882, 952], "corrcoef": [133, 246], "summari": [134, 246, 739, 952], "glimps": [134, 155, 246], "usd": [134, 150, 246], "2020": [134, 150, 153, 246, 326, 330, 333, 336, 337, 339, 341, 344, 348, 351, 352, 494, 604, 667, 747, 751, 754, 761, 763, 766, 769, 773, 776, 914], "null_count": [134, 137, 246, 319, 571, 737, 739, 952], "266667": [134, 246], "666667": [134, 171, 220, 234, 246, 362, 571, 643, 657, 667], "std": [134, 246, 441, 571, 667, 739, 863, 952], "101514": [134, 246], "707107": [134, 246, 363, 571, 789, 952], "57735": [134, 246], "median": [134, 181, 246, 444, 571, 646, 667, 859, 952], "more_column": [135, 140, 216, 246, 365, 538, 571, 591, 595, 641, 667], "Or": [135, 151, 152, 153, 167, 199, 219, 226, 246, 428, 465, 525, 564, 571, 591, 602, 603, 604, 609, 634, 649, 667], "subset": [137, 177, 215, 246, 592, 640, 667], "snippet": [137, 246, 592, 667], "is_nul": [137, 246, 571, 592, 667, 952], "sizeunit": [139, 246, 787, 952], "heap": [139, 246, 787, 952], "its": [139, 246, 325, 349, 355, 465, 571, 746, 774, 780, 787, 952], "bitmap": [139, 246, 787, 952], "therefor": [139, 246, 296, 564, 787, 952], "structarrai": [139, 246, 787, 952], "constant": [139, 153, 246, 368, 571, 604, 667, 787, 793, 952], "unchang": [139, 246, 260, 508, 571, 613, 651, 667, 787, 936, 952], "capac": [139, 197, 246, 787, 877, 952], "ffi": [139, 246, 787, 952], "kb": [139, 246, 787, 952], "mb": [139, 246, 787, 952], "gb": [139, 246, 787, 952], "tb": [139, 246, 787, 952], "revers": [139, 246, 314, 315, 316, 317, 318, 407, 432, 501, 571, 667, 733, 734, 735, 736, 952], "1_000_000": [139, 246, 787, 952], "25888898": [139, 246], "689577102661133": [139, 246], "long": [140, 173, 217, 246, 595, 617, 667], "letter": [140, 231, 240, 246, 365, 538, 571, 595, 654, 663, 667], "thu": [141, 246, 528, 558, 675, 952], "faster": [141, 217, 246, 260, 441, 482, 512, 571, 631, 632, 667, 675, 676, 856, 902, 952], "onlin": [141, 246, 675, 952], "rerun": [141, 246, 675, 952], "fill_valu": [142, 196, 217, 246, 456, 571, 629, 667, 875, 952], "Not": [142, 246, 389, 391, 408, 571, 597, 667], "To": [142, 246, 322, 323, 370, 548, 551, 561, 571, 597, 667], "fillnullstrategi": [143, 246, 370, 571, 598, 667, 795, 952], "matches_supertyp": [143, 246, 598, 667], "forward": [143, 167, 246, 370, 376, 571, 598, 609, 667, 795, 952], "consecut": [143, 246, 298, 370, 376, 468, 571, 598, 667, 795, 888, 952], "supertyp": [143, 246, 259, 571, 598, 667], "fill_nan": [143, 246, 571, 667, 952], "OR": [144, 246, 519, 599, 667], "reduct": [146, 246], "supercast": [146, 246], "parent": [146, 246], "rule": [146, 246, 352, 777], "arithmet": [146, 246], "zip_with": [146, 246, 952], "foo11": [146, 246], "bar22": [146, 246], "null_equ": [147, 246, 869, 952], "retriev": [148, 246, 272, 273, 498, 689, 690, 918], "return_as_str": [150, 246], "preview": [150, 246], "nice": [150, 246], "few": [150, 246], "rather": [150, 167, 246, 497, 609, 667, 917], "head": [150, 169, 202, 246, 259, 400, 571, 612, 667, 827, 923, 952], "tail": [150, 155, 246, 259, 462, 571, 667, 802, 882, 952], "more_bi": [151, 179, 199, 246, 465, 571, 602, 634, 667], "maintain_ord": [151, 179, 181, 215, 219, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 246, 254, 260, 297, 504, 511, 529, 571, 589, 594, 596, 602, 621, 630, 631, 632, 640, 650, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 667, 714, 738, 848, 938, 952], "consist": [151, 179, 246, 494, 602, 667, 914], "agg": [151, 152, 153, 246, 254, 260, 371, 373, 464, 465, 504, 516, 529, 571, 589, 594, 596, 602, 603, 604, 621, 630, 667], "anoth": [151, 246, 295, 319, 324, 571, 602, 646, 667, 712, 737, 745, 869, 952], "index_column": [152, 153, 246, 603, 604, 667], "include_boundari": [152, 246, 603, 667], "start_bi": [152, 246, 603, 667], "startbi": [152, 246, 603, 667], "dynamicgroupbi": [152, 246], "normal": [152, 246, 360, 396, 462, 571, 603, 667, 786, 825, 882, 952], "groupbi": [152, 153, 177, 246, 254, 260, 278, 319, 371, 373, 428, 464, 465, 504, 516, 520, 529, 571, 589, 594, 596, 603, 604, 621, 630, 667, 695, 737, 952], "member": [152, 246, 603, 667, 813, 952], "seen": [152, 246, 298, 376, 571, 603, 667], "roll": [152, 153, 246, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 526, 571, 603, 604, 667, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 952], "slot": [152, 246, 277, 319, 320, 571, 603, 667, 694, 737, 740, 952], "1n": [152, 153, 167, 219, 246, 345, 349, 355, 442, 443, 444, 445, 446, 448, 449, 450, 571, 603, 604, 609, 667, 770, 774, 780], "nanosecond": [152, 153, 167, 219, 246, 345, 349, 350, 355, 442, 443, 444, 445, 446, 448, 449, 450, 536, 571, 603, 604, 609, 667, 770, 774, 775, 780], "1u": [152, 153, 167, 219, 246, 345, 349, 355, 442, 443, 444, 445, 446, 448, 449, 450, 571, 603, 604, 609, 667, 770, 774, 780], "microsecond": [152, 153, 167, 219, 246, 345, 349, 350, 355, 442, 443, 444, 445, 446, 448, 449, 450, 535, 536, 571, 603, 604, 609, 621, 667, 770, 774, 780], "1m": [152, 153, 167, 219, 246, 336, 337, 339, 344, 345, 349, 351, 355, 442, 443, 444, 445, 446, 448, 449, 450, 571, 603, 604, 609, 667, 761, 763, 769, 770, 774, 776, 780], "millisecond": [152, 153, 167, 219, 246, 345, 349, 355, 442, 443, 444, 445, 446, 448, 449, 450, 536, 571, 603, 604, 609, 667, 770, 774, 780], "1h": [152, 153, 167, 219, 246, 345, 349, 355, 442, 443, 444, 445, 446, 448, 449, 450, 571, 603, 604, 609, 667, 753, 770, 774, 780], "1w": [152, 153, 167, 219, 246, 345, 349, 355, 442, 443, 444, 445, 446, 448, 449, 450, 571, 603, 604, 609, 667, 770, 774, 780], "week": [152, 153, 167, 219, 246, 345, 349, 355, 357, 442, 443, 444, 445, 446, 448, 449, 450, 536, 571, 603, 604, 609, 667, 770, 774, 780, 782], "month": [152, 153, 167, 219, 246, 329, 345, 349, 355, 442, 443, 444, 445, 446, 448, 449, 450, 534, 535, 571, 603, 604, 609, 667, 750, 770, 774, 780], "1y": [152, 153, 167, 219, 246, 334, 345, 349, 355, 442, 443, 444, 445, 446, 448, 449, 450, 571, 603, 604, 609, 667, 755, 770, 774, 780, 784], "1i": [152, 153, 167, 219, 246, 345, 442, 443, 444, 445, 446, 448, 449, 450, 571, 603, 604, 609, 667, 770], "10i": [152, 153, 246, 603, 604, 667], "ascend": [152, 153, 246, 603, 604, 667], "often": [152, 153, 246, 276, 438, 571, 603, 604, 667, 693], "dynam": [152, 246, 442, 443, 444, 445, 446, 448, 449, 450, 571, 603, 667], "matter": [152, 153, 164, 190, 206, 246, 603, 604, 667], "_lower_bound": [152, 246, 603, 667], "_upper_bound": [152, 246, 603, 667], "impact": [152, 246, 603, 667], "harder": [152, 246, 603, 667], "inclus": [152, 153, 246, 383, 442, 443, 444, 445, 446, 448, 449, 450, 489, 490, 571, 603, 604, 667, 806, 909, 910, 952], "datapoint": [152, 246, 603, 667], "mondai": [152, 246, 357, 603, 667, 782], "date_rang": [152, 219, 246, 324, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 603, 667, 745, 747, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784], "30m": [152, 246, 349, 355, 603, 667, 774, 780], "time_min": [152, 246, 603, 667], "time_max": [152, 246, 603, 667], "23": [152, 153, 246, 325, 332, 349, 535, 603, 604, 667, 746, 753], "boundari": [152, 246, 308, 309, 310, 571, 603, 667, 727, 728, 729, 803, 952], "time_count": [152, 246, 603, 667], "_lower_boundari": [152, 246, 603, 667], "_upper_boundari": [152, 246, 603, 667], "lower_bound": [152, 246, 308, 310, 383, 571, 603, 667, 727, 729, 806, 940, 952], "upper_bound": [152, 246, 296, 308, 309, 383, 571, 603, 667, 727, 728, 806, 830, 952], "time_agg_list": [152, 246, 603, 667], "arang": [152, 217, 228, 246, 603, 651, 667], "2i": [152, 246, 603, 667], "3i": [152, 246, 603, 667], "a_agg_list": [152, 246, 603, 667], "rollinggroupbi": [153, 246], "dynamic_groupbi": [153, 246, 604, 667], "groupby_dynam": [153, 246, 604, 667], "48": [153, 246, 604, 667], "19": [153, 167, 246, 349, 604, 609, 667, 774, 780], "43": [153, 246, 318, 571, 604, 667], "strptime": [153, 246, 352, 604, 667, 777], "2d": [153, 209, 246, 546, 604, 667, 750], "sum_a": [153, 246, 604, 667], "min_a": [153, 246, 604, 667], "max_a": [153, 246, 604, 667], "to_list": [153, 246, 296, 604, 667, 713, 952], "seed": [154, 191, 246, 379, 435, 452, 458, 571, 801, 850, 867, 878, 952], "seed_1": [154, 246, 379, 571, 801, 952], "seed_2": [154, 246, 379, 571, 801, 952], "seed_3": [154, 246, 379, 571, 801, 952], "hash": [154, 246, 571, 952], "u64": [154, 246, 379, 437, 571, 621, 667, 801, 952], "10783150408545073287": [154, 246], "1438741209321515184": [154, 246], "10047419486152048166": [154, 246], "2047317070637311557": [154, 246], "ab": [155, 169, 202, 223, 246, 498, 499, 548, 551, 571, 645, 667, 802, 827, 923, 952], "grown": [157, 246], "baz": [158, 159, 181, 216, 246, 489, 491, 607, 641, 667, 911], "intermedi": [159, 246, 607, 667, 805, 952], "linear": [159, 183, 238, 246, 274, 382, 411, 434, 446, 526, 527, 554, 571, 607, 622, 661, 667, 691, 805, 849, 861, 952], "mask": [160, 162, 246, 275, 299, 300, 384, 386, 394, 469, 471, 571, 692, 715, 716, 796, 806, 808, 811, 822, 845, 846, 870, 889, 891, 944, 952], "visual": [160, 162, 246], "buffer_s": [164, 246], "intern": [164, 246], "veri": [164, 214, 246, 260, 571, 588, 667, 730, 952], "fit": [164, 197, 217, 246, 457, 571, 876, 877, 952], "signific": [164, 246, 260, 571], "4x": [164, 246], "materialis": [164, 165, 189, 190, 246], "iter_row": [165, 189, 190, 246], "17_500": [165, 246], "klmnoopqrstuvwxyz": [165, 246], "__name__": [165, 246], "7500": [165, 246], "15_000": [165, 246], "record_batch": [165, 246], "to_arrow": [165, 246, 952], "to_batch": [165, 246], "date32": [165, 246], "large_str": [165, 204, 210, 246], "15000": [165, 246], "2500": [165, 246], "joinstrategi": [166, 246, 608, 667], "left_on": [166, 167, 246, 608, 609, 667], "right_on": [166, 167, 246, 608, 609, 667], "suffix": [166, 167, 193, 223, 226, 246, 302, 389, 391, 392, 393, 428, 440, 473, 571, 608, 609, 627, 645, 646, 649, 667, 718, 893], "_right": [166, 167, 246, 608, 609, 667], "outer": [166, 246, 608, 667], "semi": [166, 246, 608, 667], "anti": [166, 246, 608, 667, 870, 871, 952], "cross": [166, 246, 608, 667], "join_asof": [166, 246, 608, 667], "stringcach": [166, 246, 582], "other_df": [166, 246], "by_left": [167, 246, 609, 667], "by_right": [167, 246, 609, 667], "asofjoinstrategi": [167, 246, 609, 667], "allow_parallel": [167, 246, 608, 609, 667], "force_parallel": [167, 246, 608, 609, 667], "asof": [167, 246, 609, 667], "asof_join": [167, 246], "search": [167, 246, 609, 667], "greater": [167, 246, 377, 378, 462, 491, 571, 609, 667, 882, 911, 952], "distanc": [167, 246, 609, 667, 803, 952], "gdp": [167, 246, 609, 667], "2016": [167, 246, 609, 667], "2017": [167, 246, 609, 667], "2018": [167, 246, 609, 667], "2019": [167, 246, 609, 667], "record": [167, 246, 609, 667], "jan": [167, 246, 609, 667], "1st": [167, 246, 609, 667], "4164": [167, 246, 609, 667], "4411": [167, 246, 609, 667], "4566": [167, 246, 609, 667], "4696": [167, 246, 609, 667], "popul": [167, 246, 609, 667], "12th": [167, 246, 609, 667], "82": [167, 246, 609, 667], "66": [167, 246, 517, 571, 609, 667, 861, 952], "83": [167, 246, 609, 667], "52": [167, 223, 246, 451, 571, 609, 645, 667], "request": [168, 246], "small": [168, 246, 349, 596, 667], "describe_plan": [168, 246, 667], "unoptim": [168, 246, 667], "describe_optimized_plan": [168, 246, 667], "show_graph": [168, 246, 667], "un": [168, 246], "graphviz": [168, 246, 630, 667], "axi": [170, 171, 173, 175, 201, 246, 617, 667], "null_strategi": [171, 201, 246], "nullstrategi": [171, 201, 246], "spam": [171, 246], "id_var": [173, 246, 617, 667], "value_var": [173, 246, 617, 667], "variable_nam": [173, 246, 617, 667], "value_nam": [173, 246, 617, 667], "unpivot": [173, 246, 617, 667], "leav": [173, 246, 617, 667], "massag": [173, 246, 617, 667], "measur": [173, 246, 617, 667], "merg": [174, 246, 618, 667], "caller": [174, 246, 296, 613, 618, 651, 667], "respons": [174, 246, 618, 667], "One": [177, 181, 246, 257, 427, 571, 952], "what": [177, 246, 934, 943, 952], "pack": [177, 246], "expr_unique_subset": [177, 246], "df_nuniqu": [177, 246], "df_agg_nuniqu": [177, 246], "offer": [180, 246, 430, 571, 620, 667], "fulli": [180, 191, 246], "advantag": [180, 246], "cast_str_to_int": [180, 246, 620, 667], "col_nam": [180, 246, 620, 667], "tdf": [180, 246, 620, 667], "aggregate_funct": [181, 246], "pivotagg": [181, 246], "nodefault": [181, 246, 494], "_nodefault": [181, 246, 494], "no_default": [181, 246, 494], "sort_column": [181, 246], "predefin": [181, 246], "predict": [181, 184, 219, 246], "transpos": [181, 246], "discoveri": [181, 246], "interpol": [183, 238, 246, 370, 411, 434, 446, 554, 571, 622, 661, 667, 849, 861, 952], "rollinginterpolationmethod": [183, 238, 246, 434, 446, 554, 571, 622, 661, 667, 849, 861, 952], "midpoint": [183, 238, 246, 434, 446, 554, 571, 622, 661, 667, 849, 861, 952], "old": [185, 246, 624, 667], "by_pred": [189, 246], "accord": [189, 246, 408, 571, 756], "never": [189, 246], "mutual": [189, 246], "exclus": [189, 246, 517, 571], "addition": [189, 246], "clariti": [189, 246], "anyth": [189, 246], "toomanyrowsreturnederror": [189, 246, 582], "norowsreturnederror": [189, 246, 582], "inherit": [189, 246], "rowserror": [189, 246, 582], "with_replac": [191, 246, 452, 571, 867, 952], "shuffl": [191, 228, 246, 452, 571, 651, 867, 952], "nor": [191, 246], "modul": [191, 246, 452, 458, 570, 571, 867, 878, 952], "more_expr": [193, 223, 246, 428, 522, 524, 526, 527, 548, 551, 557, 560, 571, 627, 645, 667], "named_expr": [193, 223, 246, 557, 560, 627, 645, 667], "threshold": [193, 246, 627, 667], "set_auto_structifi": [193, 223, 246, 627, 645, 667], "is_odd": [193, 246, 627, 667], "_is_odd": [193, 246, 627, 667], "shift_and_fil": [195, 246, 571, 667, 952], "shift": [196, 246, 277, 320, 429, 456, 526, 571, 629, 667, 694, 740, 844, 875, 952], "shrink": [197, 246, 457, 571, 876, 877, 952], "hold": [197, 246], "ddof": [200, 220, 246, 467, 515, 528, 553, 558, 559, 563, 571, 635, 643, 667, 886, 942, 952], "deviat": [200, 246, 363, 448, 467, 559, 571, 635, 667, 789, 886, 952], "degre": [200, 220, 246, 467, 515, 528, 553, 558, 559, 563, 571, 635, 643, 667, 886, 942, 952], "freedom": [200, 220, 246, 467, 515, 528, 553, 558, 559, 563, 571, 635, 643, 667, 886, 942, 952], "divisor": [200, 220, 246, 467, 515, 528, 553, 558, 559, 563, 571, 635, 643, 667, 886, 942, 952], "816497": [200, 246], "21": [201, 246, 542], "16a": [201, 246], "27b": [201, 246], "38c": [201, 246], "nth": [203, 246, 491, 505, 571, 638, 667, 911, 925, 952], "mostli": [204, 246, 371, 571], "categoricaltyp": [204, 246], "as_seri": [205, 246], "fruit": [205, 246, 432, 440, 473, 492, 501, 571, 893, 912], "car": [205, 246, 432, 440, 501, 571], "beetl": [205, 246, 432, 440, 501, 571], "audi": [205, 246, 432, 440, 501, 571], "28": [205, 246, 253, 358, 571, 783], "300": [205, 246, 857, 858, 860, 952], "instantiat": [208, 246, 932, 952], "from_repr": [208, 246, 932, 952], "df_from_str_repr": [208, 246], "eval": [208, 246, 537, 932, 952], "re": [209, 246], "ll": [209, 246], "numpy_arrai": [209, 246], "use_pyarrow_extension_arrai": [210, 246, 935, 952], "trigger": [210, 246, 935, 952], "sent": [210, 246, 934, 935, 952], "pandas_df1": [210, 246], "pandas_df2": [210, 246], "pandas_df2_pa": [210, 246], "na": [210, 246, 935, 952], "get_column": [211, 246, 561], "four": [212, 246], "five": [212, 246], "bottom_k": [213, 246, 509, 571, 639, 667, 937, 952], "include_head": [214, 246], "header_nam": [214, 246], "column_nam": [214, 246], "perhap": [214, 246], "column_2": [214, 246], "name_gener": [214, 246, 296, 713], "base_nam": [214, 246], "my_column_": [214, 246], "my_column_0": [214, 246], "my_column_1": [214, 246], "my_column_2": [214, 246], "uniquekeepstrategi": [215, 246, 640, 667], "kept": [215, 246, 640, 667], "decompos": [216, 246, 641, 667], "t_a": [216, 246, 641, 667], "t_b": [216, 246, 641, 667], "t_c": [216, 246, 641, 667], "t_d": [216, 246, 641, 667], "womp": [216, 246, 641, 667], "t_": [216, 246, 641, 667], "t_struct": [216, 246, 641, 667], "step": [217, 246, 521], "unstackdirect": [217, 246], "much": [217, 246, 295, 319, 571, 712, 737, 952], "pivot": [217, 246], "phase": [217, 246], "subject": [217, 246], "ascii_uppercas": [217, 246], "col1": [217, 246, 667], "col2": [217, 246, 667], "h": [217, 246, 253, 352, 457, 494, 571, 914], "col1_0": [217, 246], "col1_1": [217, 246], "col1_2": [217, 246], "col2_0": [217, 246], "col2_1": [217, 246], "col2_2": [217, 246], "syntact": [218, 246, 533, 538, 539, 543, 554, 557, 561, 642, 667, 885, 952], "sugar": [218, 246, 533, 538, 539, 543, 554, 557, 561, 642, 667, 885, 952], "coalesc": [218, 246, 642, 667], "400": [218, 246, 642, 667, 857, 858, 860, 952], "600": [218, 246, 642, 667], "700": [218, 246, 642, 667], "new_df": [218, 246, 642, 667], "time_column": [219, 246], "frequenc": [219, 246], "forward_fil": [219, 246, 315, 318, 571], "06": [219, 246, 325, 335, 347, 348, 359, 774, 782], "varianc": [220, 246, 364, 396, 450, 515, 563, 571, 643, 667, 790, 825, 865, 942, 952], "grow": [221, 246], "is_not": [223, 246, 571, 645, 667], "not_c": [223, 246, 645, 667], "diff": [223, 246, 330, 333, 337, 339, 341, 344, 351, 571, 645, 667, 751, 754, 761, 763, 766, 769, 776, 952], "_diff": [223, 246, 645, 667], "row_nr": [224, 246, 408, 571, 647, 667, 871, 952], "more_agg": [226, 649], "named_agg": [226, 649], "_sum": [226, 649], "_mean_squar": [226, 649], "b_sum": [226, 649], "c_mean_squar": [226, 649], "17": [226, 451, 494, 542, 571, 649, 731, 774, 952], "sub": [228, 571], "triangl": [228, 651], "group_df": [228, 651], "nr": [231, 240, 654, 663], "maxim": [233, 267, 571, 656, 683, 952], "833333": [234, 657], "minim": [236, 268, 273, 457, 465, 571, 659, 684, 690, 835, 876, 952], "overview": [246, 571, 582, 667, 952], "public": [246, 571, 582, 667, 952], "frameinittyp": [246, 667], "variou": [246, 571, 667, 952], "entri": [246, 667], "prevent": [246, 317, 318, 395, 502, 571, 667, 735, 736, 922, 952], "come": [246, 396, 571, 583, 666, 667, 825, 952], "behavior": [246, 260, 295, 520, 571, 712], "mydatafram": 246, "notic": [246, 667, 952], "df4": 246, "df5": 246, "df6": 246, "corr": [246, 553, 558], "drop_in_plac": 246, "drop_nul": [246, 322, 571, 667, 952], "estimated_s": [246, 952], "explod": [246, 373, 439, 571, 667, 854, 952], "find_idx_by_nam": 246, "fold": [246, 415, 524, 531, 532, 555, 561], "frame_equ": [246, 349, 355], "groupby_rol": [246, 442, 443, 444, 445, 446, 448, 449, 450, 571, 603, 667], "hash_row": 246, "hstack": 246, "insert_at_idx": 246, "is_dupl": [246, 571, 952], "is_empti": [246, 952], "is_uniqu": [246, 571, 952], "iter_slic": 246, "melt": [246, 667], "merge_sort": [246, 667], "n_uniqu": [246, 571, 952], "pipe": [246, 571, 667], "quantil": [246, 446, 571, 667, 848, 861, 952], "replace_at_idx": 246, "shrink_to_fit": [246, 952], "take_everi": [246, 571, 667, 952], "to_dict": 246, "to_numpi": [246, 406, 571, 952], "to_panda": [246, 952], "to_struct": 246, "unnest": [246, 490, 491, 499, 667, 910, 911], "unstack": 246, "updat": [246, 667], "upsampl": 246, "write_avro": 246, "write_databas": 246, "write_excel": 246, "write_json": [246, 623, 667], "write_parquet": 246, "cumprod": [253, 571, 952], "ghi": [253, 571], "94": [254, 571], "confus": [256, 389, 391, 571], "tt": [256, 571], "tf": [256, 258, 571], "ff": [256, 258, 571], "upcast": [259, 571], "skip_nul": [260, 571, 676, 952], "pass_nam": [260, 571], "applystrategi": [260, 571], "thread_loc": [260, 571], "assum": [260, 571, 613, 651, 667], "stage": [260, 571], "code": [260, 454, 571, 611, 667, 872, 952], "amount": [260, 571], "releas": [260, 571], "gil": [260, 571], "discourag": [260, 571], "loop": [260, 571], "a_times_2": [260, 571], "invers": [261, 262, 263, 264, 265, 266, 571, 677, 678, 679, 680, 681, 682, 952], "cosin": [261, 262, 311, 312, 406, 571, 677, 678, 731, 732, 952], "570796": [261, 263, 571, 677, 679, 952], "hyperbol": [262, 264, 266, 312, 461, 507, 571, 678, 680, 682, 732, 881, 927, 952], "sine": [263, 264, 406, 460, 461, 571, 679, 680, 880, 881, 952], "881374": [264, 571, 680, 952], "tangent": [265, 266, 506, 507, 571, 681, 682, 926, 927, 952], "785398": [265, 571, 681, 952], "arg_wher": [270, 571], "sublist": [272, 273, 275, 277, 280, 281, 282, 283, 284, 291, 294, 295, 689, 690, 692, 694, 697, 698, 699, 700, 701, 708, 711, 712, 713, 813, 952], "membership": [275, 692], "listcol": 276, "number_of_two": 276, "null_behavior": [277, 320, 571, 694, 740, 952], "nullbehavior": [277, 320, 571, 694, 740, 952], "th": [277, 320, 462, 571, 694, 740, 882, 952], "against": [278, 667, 695, 959], "blindli": [278, 695], "worth": [278, 695], "enough": [278, 462, 571, 695, 882, 952], "concat_list": [278, 537, 695], "rank": [278, 528, 537, 558, 571, 695, 952], "exprnamespac": 279, "reshap": [279, 571, 696, 952], "flat": [279, 439, 571, 696, 854, 952], "taken": [291, 488, 504, 571, 708, 908], "null_on_oob": [295, 712], "cheaper": [295, 712], "n_field_strategi": [296, 713], "tostructstrategi": [296, 713], "first_non_nul": [296, 713], "max_width": [296, 713], "field_0": [296, 713], "field_1": [296, 713], "field_n": [296, 713], "know": [296, 482, 902, 934, 943, 952], "incorrectli": 296, "downstream": [296, 454, 571, 872, 952], "col_name_": [296, 713], "col_name_0": [296, 713], "col_name_1": [296, 713], "col_name_2": [296, 713], "maintain": [297, 453, 511, 571, 631, 632, 667, 714, 868, 938, 952], "substr": [299, 302, 303, 469, 473, 484, 485, 489, 490, 491, 492, 715, 718, 719, 889, 893, 904, 905, 909, 910, 911, 912], "transferencod": [300, 301, 471, 472, 716, 717, 891, 892], "strict": [300, 305, 469, 471, 483, 494, 571, 716, 721, 869, 889, 891, 903, 914, 952], "hex": [300, 301, 471, 472, 483, 716, 717, 891, 892, 903], "base64": [300, 301, 471, 472, 716, 717, 891, 892], "prefix": [303, 492, 497, 571, 719, 912, 917], "complex": [304, 319, 509, 571, 720, 737, 937, 952], "frac": [304, 362, 363, 364, 452, 462, 509, 571, 720, 788, 789, 790, 882, 937, 952], "due": [305, 571, 721, 952], "overflow": [305, 317, 318, 483, 502, 571, 721, 735, 736, 903, 922, 952], "categoricalord": [306, 723], "lexic": [306, 723], "foo_clip": [308, 309, 310, 571], "clip": [309, 310, 571, 728, 729, 952], "543081": [312, 571, 732, 952], "cumul": [314, 315, 316, 317, 318, 531, 532, 533, 571, 733, 734, 735, 736, 952], "a_revers": [314, 315, 316, 317, 318, 407, 440, 501, 571], "value_cummax": [315, 571], "value_cummax_all_fil": [315, 571], "value_cumsum": [318, 571], "value_cumsum_all_fil": [318, 571], "min_period": [319, 362, 363, 364, 441, 442, 443, 444, 445, 446, 448, 449, 450, 571, 737, 788, 789, 790, 856, 857, 858, 859, 860, 861, 863, 864, 865, 952], "slide": [319, 571, 737, 952], "realli": [319, 571, 737, 952], "visit": [319, 571, 737, 952], "44": [321, 571], "drop_nan": [323, 571, 952], "lose": [324, 745], "2001": [324, 329, 331, 332, 334, 335, 340, 342, 345, 346, 347, 349, 350, 354, 355, 356, 357, 358, 359, 494, 745, 750, 752, 753, 755, 757, 758, 759, 760, 762, 764, 765, 767, 768, 770, 771, 772, 774, 775, 777, 779, 780, 781, 782, 783, 784, 914], "time_unit_m": [324, 745], "time_unit_n": [324, 745], "compon": [325, 350, 494, 536, 746, 775], "resolv": 325, "tm": 325, "456000": [325, 746], "101000": 325, "456": [325, 746, 931, 952], "101": [325, 483, 903], "d1": 325, "d2": 325, "d3": 325, "utc": [326, 348, 494, 747, 773, 914], "europ": [326, 348, 747, 773], "london": [326, 348, 747, 773], "gmt": [326, 348, 747, 773], "bst": [326, 348, 747, 773], "weekdai": [329, 346], "day_of_month": [329, 346, 357], "ordinal_dai": [329, 357], "day_of_year": [329, 346, 357], "days_diff": 330, "epochtimeunit": [331, 542, 752], "unix": [331, 542, 752], "epoch_n": [331, 752], "epoch_": [331, 752], "978307200000000": [331, 354, 752, 779], "978307200": [331, 752], "978393600000000": [331, 354, 752, 779], "978393600": [331, 752], "978480000000000": [331, 354, 752, 779], "978480000": [331, 752], "hours_diff": 333, "leap": [334, 345, 755, 770], "2000": [334, 336, 345, 755, 770], "2002": [334, 335, 345, 347, 359, 755, 770, 784], "iso": [335, 356, 357, 756, 781, 782], "correspond": [335, 435, 571, 756, 850, 952], "2006": [335, 345, 770], "180": [335, 347, 359], "2004": [335, 345, 770], "2005": [335, 345, 770], "1_001": [336, 337, 339, 344], "002": [336, 337, 339, 344, 536, 761, 763, 769], "003": [336, 337, 339, 344], "3000": 336, "997": [336, 337, 339, 344], "997000": 336, "998": [336, 337, 339, 344], "998000": 336, "999": [336, 337, 339, 344], "999000": 336, "microseconds_diff": 337, "milliseconds_diff": 339, "minutes_diff": 341, "1440": [341, 766], "nanoseconds_diff": 344, "1000000": [344, 497, 769], "minu": [345, 770], "dictat": [345, 770], "date_plus_1i": [345, 770], "1y2mo": [345, 770], "date_min": 345, "1998": [345, 770], "1999": [345, 770], "2003": [345, 542, 770], "ordin": [346, 435, 571, 771, 850, 952], "366": [346, 771], "convert_time_zon": [348, 773], "unset": [348, 773], "london_timezon": 348, "amsterdam": 348, "london_to_amsterdam": 348, "cet": 348, "cest": 348, "half": [349, 362, 363, 364, 571, 774, 788, 789, 790, 952], "225": [349, 355], "to_fram": [349, 355, 494, 870, 871, 910, 911, 914, 952], "10m": [349, 355, 774, 780], "milli": [350, 775], "micro": [350, 775], "456789": 350, "654321": 350, "111110": 350, "765431": 350, "sec": 350, "11111": 350, "seconds_diff": 351, "timestamp_n": [354, 779], "timestamp_m": 354, "978307200000": 354, "978393600000": 354, "978480000000": 354, "53": [356, 781], "sundai": [357, 782], "incorrect": [358, 454, 571, 651, 783, 872, 952], "time_unit_u": [358, 783], "32971": [358, 783], "32974": [358, 783], "32976": [358, 783], "718281828459045": [360, 402, 571, 786, 828, 952], "pk": [360, 571, 786, 952], "459148": [360, 571], "754888": [360, 571], "span": [362, 363, 364, 571, 788, 789, 790, 952], "half_lif": [362, 363, 364, 571, 788, 789, 790, 952], "adjust": [362, 363, 364, 462, 571, 788, 789, 790, 882, 952], "ignore_nul": [362, 363, 364, 571, 788, 789, 790, 943, 952], "exponenti": [362, 363, 364, 366, 431, 571, 788, 789, 790, 791, 952], "weight": [362, 363, 364, 441, 442, 443, 444, 445, 446, 448, 449, 450, 462, 571, 788, 789, 790, 856, 857, 858, 859, 860, 861, 863, 864, 865, 882, 952], "decai": [362, 363, 364, 571, 788, 789, 790, 952], "term": [362, 363, 364, 479, 482, 571, 788, 789, 790, 899, 902, 952], "mass": [362, 363, 364, 571, 788, 789, 790, 952], "gamma": [362, 363, 364, 571, 788, 789, 790, 952], "foral": [362, 363, 364, 571, 788, 789, 790, 952], "geq": [362, 363, 364, 571, 788, 789, 790, 952], "theta": [362, 363, 364, 571, 788, 789, 790, 952], "life": [362, 363, 364, 571, 788, 789, 790, 952], "exp": [362, 363, 364, 571, 788, 789, 790, 952], "ln": [362, 363, 364, 571, 788, 789, 790, 952], "smooth": [362, 363, 364, 571, 788, 789, 790, 952], "factor": [362, 363, 364, 508, 571, 788, 789, 790, 936, 952], "leq": [362, 363, 364, 571, 788, 789, 790, 952], "begin": [362, 363, 364, 475, 571, 788, 789, 790, 895, 952], "imbal": [362, 363, 364, 571, 788, 789, 790, 952], "ew": [362, 363, 364, 571, 788, 789, 790, 952], "w_i": [362, 363, 364, 571, 788, 789, 790, 952], "recurs": [362, 363, 364, 571, 788, 789, 790, 952], "y_0": [362, 363, 364, 571, 788, 789, 790, 952], "x_0": [362, 363, 364, 571, 788, 789, 790, 952], "y_t": [362, 363, 364, 571, 788, 789, 790, 952], "y_": [362, 363, 364, 571, 788, 789, 790, 952], "x_t": [362, 363, 364, 571, 788, 789, 790, 952], "observ": [362, 363, 364, 571, 788, 789, 790, 952], "x_2": [362, 363, 364, 571, 788, 789, 790, 952], "428571": [362, 571], "bia": [363, 364, 396, 447, 462, 571, 789, 790, 825, 862, 882, 952], "unbias": [363, 364, 571, 789, 790, 952], "963624": [363, 571, 789, 952], "928571": [364, 571, 790, 952], "wildcard": [365, 518, 525, 531, 532, 540, 555, 571], "regex": [365, 413, 469, 470, 473, 475, 476, 484, 485, 492, 538, 548, 551, 561, 571, 889, 890, 893, 895, 896, 904, 905, 912], "aa": [365, 538, 571], "ba": [365, 538, 571], "cc": [365, 538, 571], "718282": [366, 571], "389056": [366, 571], "54": [366, 571], "59815": [366, 571], "expand": [367, 412, 413, 438, 571, 792, 952], "favour": [367, 571, 792, 952], "arr": [367, 537, 571, 572, 792, 934, 952, 953], "exprlistnamespac": [367, 373, 439, 571], "exprstringnamespac": [367, 571], "pythonliter": [368, 548, 551, 571, 645, 667, 793, 832, 835, 952], "extrem": [368, 571, 793, 952], "group_col": [371, 516, 571], "g1": [371, 516, 571], "g2": [371, 516, 571], "lt": [371, 516, 571, 952], "gte": [371, 516, 571], "divis": [375, 510, 571], "truediv": [375, 571], "9774092659964970114": [379, 571], "13614470193936745724": [379, 571], "1101441246220388612": [379, 571], "11638928888656214026": [379, 571], "13382926553367784577": [379, 571], "cumsum": [381, 500, 571, 606, 667, 952], "interpolationmethod": [382, 571, 805, 952], "regrid": [382, 571], "grid": [382, 571], "df_original_grid": [382, 571], "grid_point": [382, 571], "df_new_grid": [382, 571], "conflat": [383, 571], "finit": [385, 510, 528, 558, 571, 810, 952], "primit": [387, 571, 934, 952], "optional_memb": [387, 571, 813, 952], "infinit": [388, 510, 571, 814, 952], "_isnan": [389, 571], "b_isnan": [389, 571], "negat": [390, 571], "_is_not_nan": [391, 571], "b_is_not_nan": [391, 571], "_not_nul": [392, 571], "a_not_nul": [392, 571], "b_not_nul": [392, 571], "_isnul": [393, 571], "a_isnul": [393, 571], "b_isnul": [393, 571], "undo": [395, 417, 571], "duplicateerror": [395, 571, 582], "occurr": [395, 571, 803, 952], "333333": [395, 450, 571, 844, 865, 952], "fisher": [396, 462, 571, 825, 882, 952], "fourth": [396, 571, 825, 952], "subtract": [396, 500, 571, 825, 952], "distribut": [396, 462, 571, 825, 882, 952], "elimin": [396, 571, 825, 952], "bias": [396, 462, 571, 825, 882, 952], "scipi": [396, 462, 571, 825, 882, 952], "stat": [396, 462, 571, 825, 882, 952], "153061": [396, 571], "logarithm": [402, 403, 571, 828, 829, 952], "584963": [402, 571], "30103": [403, 571], "60206": [403, 571], "lowest": [404, 571], "9223372036854775808": [404, 571], "agg_list": [406, 571], "elementwis": [406, 441, 442, 443, 444, 445, 446, 448, 449, 450, 518, 519, 571, 856, 857, 858, 859, 860, 861, 863, 864, 865, 952], "third": [406, 571], "parti": [406, 571], "book": [406, 571], "argmax": [406, 571], "_revers": [407, 440, 501, 571], "b_revers": [407, 440, 501, 571], "remap": [408, 571, 831, 952], "lookup": [408, 571, 831, 952], "country_code_dict": [408, 571], "ca": [408, 571], "canada": [408, 571], "de": [408, 571], "germani": [408, 571], "fr": [408, 571], "franc": [408, 571], "country_cod": [408, 571], "unknown": [408, 546, 571], "rest": [408, 571], "computeerror": [414, 483, 582, 903], "keep_nam": [417, 571], "modulu": [419, 571], "xlog2": [421, 431, 571], "poison": [423, 424, 571, 840, 841, 952], "nanmax": [423, 424, 571, 840, 841, 952], "wherea": [423, 424, 571, 605, 612, 667, 840, 841, 952], "inequ": [425, 571], "outcom": [428, 571], "_max": [428, 571], "c_max": [428, 571], "_min": [428, 571], "c_min": [428, 571], "recent": [429, 571, 844, 952], "percent": [429, 571, 844, 952], "090909": [429, 571], "extract_numb": [430, 571], "r": [430, 470, 474, 475, 476, 484, 571, 890, 894, 895, 896, 904], "expon": [431, 571, 952], "512": [431, 571, 844, 952], "reverse_": [432, 571], "reverse_a": [432, 571], "reverse_fruit": [432, 571], "reverse_b": [432, 571], "reverse_car": [432, 571], "rankmethod": [435, 571, 850, 952], "ti": [435, 571, 850, 952], "competit": [435, 571, 850, 952], "highest": [435, 513, 528, 558, 571, 667, 850, 952], "safe": [437, 494, 571, 852, 934, 952], "coerc": [438, 571], "fruits_revers": [440, 501, 571], "cars_revers": [440, 501, 571], "window_s": [441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 571, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 952], "rolling_min": [441, 571, 856, 952], "rolling_max": [441, 571, 856, 952], "rolling_mean": [441, 571, 856, 952], "rolling_sum": [441, 571, 856, 952], "multipli": [441, 442, 443, 444, 445, 446, 448, 449, 450, 571, 856, 857, 858, 859, 860, 861, 863, 864, 865, 952], "358899": [441, 571], "041452": [441, 571], "567764": [441, 571], "travers": [442, 443, 445, 448, 449, 450, 571, 857, 858, 860, 863, 864, 865, 952], "vector": [442, 443, 445, 448, 449, 450, 571, 857, 858, 860, 863, 864, 865, 952], "5h": [442, 443, 444, 445, 446, 448, 449, 450, 571], "33": [446, 451, 525, 571, 861, 952], "skew": [447, 571, 862, 952], "527525": [448, 571, 863, 952], "digit": [451, 497, 571, 866, 890, 917, 952], "searchsortedsid": [453, 571, 868, 952], "leftmost": [453, 571, 868, 952], "rightmost": [453, 571, 868, 952], "six": [453, 571], "extrema": [457, 571, 876, 952], "112": [457, 571], "129": [457, 571], "i8": [457, 571, 740, 855, 940, 952], "8589934592": [457, 571], "1073741824": [457, 571], "content": [458, 514, 571, 878, 952], "175201": [461, 571, 881, 952], "about": [462, 571, 882, 952], "unimod": [462, 571, 882, 952], "skewtest": [462, 571, 882, 952], "speak": [462, 571, 882, 952], "g_1": [462, 571, 882, 952], "m_3": [462, 571, 882, 952], "m_2": [462, 571, 882, 952], "m_i": [462, 571, 882, 952], "sum_": [462, 571, 882, 952], "texttt": [462, 571, 882, 952], "k_3": [462, 571, 882, 952], "k_2": [462, 571, 882, 952], "sqrt": [462, 571, 882, 952], "343622": [462, 571], "value1": [465, 571], "value2": [465, 571], "attain": [465, 571], "414214": [466, 571, 885, 952], "ends_with": [469, 492, 912], "crab": [469, 889], "dog": [469, 495, 496, 527, 889], "rab": [469, 889], "success": [470, 476, 890, 896], "overlap": [470, 476, 890, 896], "captur": [470, 475, 476, 890, 895, 896], "123": [470, 476, 485, 890, 896, 905, 931, 952], "bla": [470, 476, 890, 896], "asd": [470, 476, 890, 896], "678": [470, 476, 890, 896], "910t": [470, 476, 890, 896], "count_digit": 470, "666f6f": [472, 892], "626172": [472, 892], "mango": [473, 492, 893, 912], "go": [473, 893], "has_suffix": 473, "group_index": [475, 895], "vote": [475, 895], "ballon_dor": [475, 895], "candid": [475, 895], "messi": [475, 895], "ref": [475, 895], "candidat": [475, 895], "jorginho": [475, 895], "ronaldo": [475, 895], "extracted_nr": 476, "910": [476, 896], "json_path_match": [477, 897], "jsonpath": [477, 478, 897, 898], "json_path": [478, 898], "regardless": [478, 898], "json_val": [478, 898], "n_char": [479, 899], "caf\u00e9": [479, 482, 899, 902], "345": [479, 482, 899, 902], "\u6771\u4eac": [479, 482, 899, 902], "nchar": [479, 482], "fill_char": [480, 486, 900, 906], "justifi": [480, 486, 900, 906], "pad": [480, 486, 497, 900, 906, 917], "cow": [480, 486, 900, 906], "monkei": [480, 486, 900, 906], "hippopotamu": [480, 486, 900, 906], "strip": [481, 487, 901, 907], "tworld": [481, 493, 901, 913], "wod": [481, 487, 901, 907], "rld": [481, 901], "text": [482, 484, 485, 902], "radix": [483, 903], "parseerror": [483, 903], "becom": [483, 903], "silent": [483, 903], "110": [483, 903], "010": [483, 903], "fa1e": [483, 903], "ff00": [483, 903], "cafe": [483, 903], "64030": [483, 903], "65280": [483, 903], "51966": [483, 903], "replace_al": [484, 904], "123abc": [484, 904], "abc456": [484, 904], "abcabc": [485, 905], "123a123": [485, 905], "bc": [485, 561, 905], "trail": [487, 493, 907, 913], "worl": [487, 493, 907, 913], "subslic": [488, 908], "pear": [488, 908], "papaya": [488, 908], "dragonfruit": [488, 908], "s_slice": 488, "ear": [488, 908], "aya": [488, 908], "uit": [488, 908], "ya": [488, 908], "onf": [488, 908], "a_1": [490, 910, 930, 952], "d_4": [490, 910], "rename_field": [490, 491, 910, 911], "first_part": [490, 491, 910, 911], "second_part": [490, 491, 910, 911], "remaind": [491, 911], "app": [492, 912], "has_prefix": 492, "polarstemporaltyp": [494, 914], "tz_awar": [494, 914], "strftime": [494, 914], "anywher": [494, 914], "toggl": [494, 914], "futur": 494, "3f": 494, "00z": [494, 914], "sun": [494, 914], "jul": [494, 914], "34": [494, 914], "lowercas": [495, 915], "variant": [495, 496], "uppercas": [496, 916], "100000": 497, "0010": 497, "0001": 497, "00000": 497, "00001": 497, "cd": [498, 499], "struct_col": [498, 499], "www": 499, "xxx": 499, "yyi": 499, "zzz": 499, "obvious": 499, "structfieldnotfounderror": [499, 582], "761594": [507, 571, 927, 952], "replic": [508, 571, 936, 952], "vals_phys": [508, 571], "floordiv": [510, 571], "behaviour": [510, 571], "ieee": [510, 571], "754": [510, 571], "mathemat": [510, 537, 571], "undefin": [510, 571], "On": [510, 571], "operand": [510, 571], "infin": [510, 571], "value_count": [512, 571, 952], "9223372036854775807": [513, 571], "multithread": [514, 571], "binary_str": [517, 571], "zfill": [517, 571], "250": [517, 571, 858, 952], "bin_x": [517, 571], "bin_i": [517, 571], "xor_xi": [517, 571], "bin_xor_xi": [517, 571], "00001010": [517, 571], "00000001": [517, 571], "00001011": [517, 571], "00001000": [517, 571], "00000010": [517, 571], "11111010": [517, 571], "00000011": [517, 571], "249": [517, 571], "11111001": [517, 571], "01000010": [517, 571], "00000100": [517, 571], "70": [517, 571], "01000110": [517, 571], "columnwis": [518, 519], "AND": 518, "bitwis": [518, 519], "returns_scalar": 520, "product_a": 520, "49": 520, "Be": 521, "more_nam": 525, "hamburg": 525, "lag": 526, "mimic": 526, "a_lag_": 526, "a_rol": 526, "plai": 527, "swim": 527, "walk": 527, "full_sent": 527, "correlationmethod": 528, "propagate_nan": [528, 558], "spearman": [528, 558], "larger": [528, 558, 631, 632, 667], "544705": [528, 553], "covari": 530, "acc": [531, 532, 540, 555], "include_init": 531, "accumul": [531, 532, 540, 555], "fn": [531, 532, 540, 555], "new_valu": [531, 532, 540, 555], "cumreduc": 531, "cumfold": 533, "999999": 535, "add_week": 536, "add_dai": 536, "add_second": 536, "add_millisecond": 536, "add_hour": 536, "add_millisec": 536, "ond": 536, "a_b_doubl": 537, "f_string": 541, "placehold": 541, "hello_": 541, "_world": 541, "foo_": 541, "_bar_": 541, "foo_a_bar_1": 541, "foo_b_bar_2": 541, "foo_c_bar_3": 541, "epoch": [542, 773], "timestep": 542, "1666683077": 542, "1666683099": 542, "39": 542, "12345": [542, 724, 798, 866, 952], "12346": 542, "agg_group": [543, 571], "allow_object": 546, "valueexcept": 546, "foo_bar": 546, "test_func": 547, "selector": [548, 551, 561], "favor": [553, 558], "605551": 559, "605551275463989": 559, "my_struct": 560, "q": 560, "statement": 564, "chain": 564, "isn": 564, "thens": 564, "elif": 564, "pick": 564, "sometim": 570, "and_": 571, "arcco": [571, 952], "arccosh": [571, 952], "arcsin": [571, 952], "arcsinh": [571, 952], "arctan": [571, 952], "arctanh": [571, 952], "arg_max": [571, 952], "arg_min": [571, 952], "arg_sort": [571, 952], "arg_uniqu": [571, 952], "backward_fil": 571, "clip_max": [571, 952], "clip_min": [571, 952], "co": [571, 952], "cosh": [571, 952], "cumcount": 571, "cummax": [571, 952], "cummin": [571, 952], "cumulative_ev": [571, 952], "entropi": [571, 952], "eq": [571, 952], "ewm_mean": [571, 952], "ewm_std": [571, 952], "ewm_var": [571, 952], "extend_const": [571, 952], "flatten": 571, "ge": [571, 952], "gt": [571, 952], "inspect": [571, 667], "is_between": [571, 952], "is_finit": [571, 952], "is_first": [571, 952], "is_in": [571, 952], "is_infinit": [571, 952], "is_nan": [571, 952], "is_not_nan": [571, 952], "is_not_nul": [571, 952], "kurtosi": [571, 952], "le": [571, 952], "log10": [571, 952], "map_alia": 571, "map_dict": [571, 952], "mod": 571, "mul": 571, "nan_max": [571, 952], "nan_min": [571, 952], "ne": [571, 952], "or_": 571, "pct_chang": [571, 952], "pow": [571, 952], "reinterpret": [571, 952], "repeat_bi": 571, "rolling_appli": [571, 952], "rolling_median": [571, 952], "rolling_quantil": [571, 952], "rolling_skew": [571, 952], "rolling_std": [571, 952], "rolling_var": [571, 952], "search_sort": [571, 952], "set_sort": [571, 952], "shrink_dtyp": [571, 952], "sin": [571, 952], "sinh": [571, 952], "sort_bi": 571, "tan": [571, 952], "tanh": [571, 952], "to_phys": [571, 952], "unique_count": [571, 952], "xor": 571, "expos": 582, "registr": 582, "miscellan": 582, "arrowerror": 582, "columnnotfounderror": 582, "invalidoperationerror": 582, "nodataerror": 582, "polarspanicerror": 582, "schemaerror": 582, "schemafieldnotfounderror": 582, "shapeerror": 582, "build_info": 582, "get_index_typ": 582, "show_vers": 582, "threadpool_s": 582, "sqlcontext": [582, 959], "hit": [586, 667], "node": [586, 606, 613, 617, 621, 624, 667], "huge": [589, 667], "saver": [589, 667], "purpos": [596, 667], "influenc": [596, 613, 667], "read_json": [601, 648, 667], "lazygroupbi": [602, 603, 604, 667], "other_lf": [608, 667], "validate_output_schema": [613, 667], "streamabl": [613, 617, 667], "past": [613, 667], "paramount": [613, 667], "bug": [613, 651, 667], "elig": [613, 667], "invari": [613, 667], "upheld": [613, 667], "prune": [613, 667], "show_plot": [621, 667], "truncate_nod": [621, 667], "figsiz": [621, 630, 667], "gantt": [621, 667], "plot": [621, 630, 667], "groupby_partit": [621, 667], "470": [621, 667], "475": [621, 667], "1964": [621, 667], "from_json": [623, 667], "swap": [624, 667], "output_path": [630, 667], "raw_output": [630, 667], "figur": [630, 667], "persist": [631, 632, 667], "ram": [631, 632, 667], "slightli": [631, 632, 667], "my_larger_than_ram_fil": [631, 632, 667], "data_pagesize_limit": [632, 667], "290994": [635, 667], "118034": [635, 667], "433013": [635, 667], "1875": [643, 667], "polarsexprtyp": [645, 667], "extern": [646, 667], "lf_other": [646, 667], "afoo": [646, 667], "cfoo": [646, 667], "train_lf": [646, 667], "feature_0": [646, 667], "feature_1": [646, 667], "test_lf": [646, 667], "_train": [646, 667], "feature_0_train": [646, 667], "dataframescan": [648, 667], "output_schema": [648, 667], "initialis": 667, "lf2": 667, "lf3": 667, "lf4": 667, "lf5": 667, "lf6": 667, "explain": 667, "profil": 667, "sink_ipc": 667, "sink_parquet": 667, "with_context": 667, "sr": [672, 952], "new_aliased_sr": [672, 952], "append_chunk": [675, 952], "super": [675, 952], "141593": [677, 952], "292432": [678, 952], "549306": [682, 952], "listnamespac": [688, 792, 854, 952], "catnamespac": 722, "56789": [724, 798, 866, 952], "901234": [724, 798, 866, 952], "pi": [731, 880, 926, 952], "1232e": [731, 952], "quick": [739, 952], "series_num": [739, 952], "581139": [739, 952], "series_str": [739, 952], "datetimenamespac": 744, "ser": [748, 749, 778], "replace_time_zon": [748, 749, 778], "kathmandu": [748, 749, 778], "0545": [748, 749, 778], "500m": [760, 762, 768, 775], "500000": 760, "2m": 765, "500000000": 768, "date_minus_1y_2mon": 770, "1583020800": 773, "1585699200": 773, "1588291200": 773, "nyc": 773, "edt": 773, "1583038800": 773, "1585717200": 773, "1588309200": 773, "165": [774, 780], "series_equ": [774, 780, 952], "timestamp_u": 779, "978307200000000000": 779, "978393600000000000": 779, "978480000000000000": 779, "005": [786, 952], "06293300616044681": [786, 952], "65": [786, 952], "8568409950394724": [786, 952], "4000000": [787, 952], "814697265625": [787, 952], "stringnamespac": [792, 887, 952], "bitmask": [800, 952], "swiftli": [800, 952], "10734580197236529959": [801, 952], "3022416320763508302": [801, 952], "13756996518000038261": [801, 952], "bin_count": [803, 952], "a_count": [803, 952], "fall": [806, 952], "2147483648": [830, 952], "iso3166": [831, 952], "tur": [831, 952], "jpn": [831, 952], "nld": [831, 952], "country_lookup": [831, 952], "japan": [831, 952], "t\u00fcrkiy": [831, 952], "netherland": [831, 952], "unrecognis": [831, 952], "unspecifi": [831, 952], "country_nam": [831, 952], "166667": [844, 952], "142857": [844, 952], "peak": [845, 846, 952], "quanil": [848, 952], "nanstd": [856, 952], "858612": [856, 952], "200": [857, 858, 860, 952], "150": [858, 952], "350": [858, 952], "450": [858, 952], "381802": [862, 952], "dev": [863, 952], "57": [866, 952], "frequent": [870, 871, 952], "mutat": [871, 952], "2246e": [880, 926, 952], "6331e16": [926, 952], "lib": [929, 952], "int64arrai": [929, 952], "a_2": [930, 952], "a_3": [930, 952], "s_from_str_repr": [932, 952], "zero_copy_onli": [934, 952], "writabl": [934, 952], "complet": [934, 952], "view": [934, 952], "presenc": [934, 952], "immut": [934, 952], "127": [940, 952], "seriesview": [943, 952], "arraylik": 952, "dtype_if_empti": 952, "position": 952, "scenario": 952, "through": 952, "chunk_length": 952, "cut": 952, "get_chunk": 952, "has_valid": 952, "hist": 952, "is_boolean": 952, "is_float": 952, "is_numer": 952, "is_sort": 952, "is_tempor": 952, "is_utf8": 952, "new_from_index": 952, "peak_max": 952, "peak_min": 952, "power": 952, "qcut": 952, "set_at_idx": 952}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [34, 0, 1, "", "DataType"], [35, 0, 1, "", "Date"], [36, 0, 1, "", "Datetime"], [37, 0, 1, "", "Decimal"], [38, 0, 1, "", "Duration"], [39, 0, 1, "", "Float32"], [40, 0, 1, "", "Float64"], [41, 0, 1, "", "Int16"], [42, 0, 1, "", "Int32"], [43, 0, 1, "", "Int64"], [44, 0, 1, "", "Int8"], [45, 0, 1, "", "List"], [46, 0, 1, "", "Null"], [47, 0, 1, "", "Object"], [959, 0, 1, "", "SQLContext"], [51, 0, 1, "", "StringCache"], [52, 0, 1, "", "Struct"], [53, 0, 1, "", "Time"], [54, 0, 1, "", "UInt16"], [55, 0, 1, "", "UInt32"], [56, 0, 1, "", "UInt64"], [57, 0, 1, "", "UInt8"], [58, 0, 1, "", "Unknown"], [59, 0, 1, "", "Utf8"], [60, 4, 1, "", "align_frames"], [518, 4, 1, "", "all"], [519, 4, 1, "", "any"], [520, 4, 1, "", "apply"], [521, 4, 1, "", "arange"], [522, 4, 1, "", "arg_sort_by"], [65, 4, 1, "", "arg_where"], [523, 4, 1, "", "avg"], [66, 4, 1, "", "build_info"], [524, 4, 1, "", "coalesce"], [525, 4, 1, "", "col"], [67, 4, 1, "", "collect_all"], [68, 4, 1, "", "concat"], [526, 4, 1, "", "concat_list"], [527, 4, 1, "", "concat_str"], [528, 4, 1, "", "corr"], [529, 4, 1, "", "count"], [530, 4, 1, "", "cov"], [531, 4, 1, "", "cumfold"], [532, 4, 1, "", "cumreduce"], [533, 4, 1, "", "cumsum"], [69, 4, 1, "", "cut"], [534, 4, 1, "", "date"], [70, 4, 1, "", "date_range"], [535, 4, 1, "", "datetime"], [536, 4, 1, "", "duration"], [537, 4, 1, "", "element"], [71, 4, 1, "", "enable_string_cache"], [538, 4, 1, "", "exclude"], [539, 4, 1, "", "first"], [540, 4, 1, "", "fold"], [541, 4, 1, "", "format"], [86, 4, 1, "", "from_arrow"], [87, 4, 1, "", "from_dataframe"], [88, 4, 1, "", "from_dict"], [89, 4, 1, "", "from_dicts"], [542, 4, 1, "", "from_epoch"], [90, 4, 1, "", "from_numpy"], [91, 4, 1, "", "from_pandas"], [92, 4, 1, "", "from_records"], [93, 4, 1, "", "from_repr"], [94, 4, 1, "", "get_dummies"], [95, 4, 1, "", "get_index_type"], [543, 4, 1, "", "groups"], [544, 4, 1, "", "head"], [545, 4, 1, "", "list"], [546, 4, 1, "", "lit"], [547, 4, 1, "", "map"], [548, 4, 1, "", "max"], [549, 4, 1, "", "mean"], [550, 4, 1, "", "median"], [551, 4, 1, "", "min"], [552, 4, 1, "", "n_unique"], [97, 4, 1, "", "ones"], [553, 4, 1, "", "pearson_corr"], [554, 4, 1, "", "quantile"], [98, 4, 1, "", "read_avro"], [99, 4, 1, "", "read_csv"], [100, 4, 1, "", "read_csv_batched"], [101, 4, 1, "", "read_database"], [102, 4, 1, "", "read_delta"], [103, 4, 1, "", "read_excel"], [104, 4, 1, "", "read_ipc"], [105, 4, 1, "", "read_ipc_schema"], [106, 4, 1, "", "read_json"], [107, 4, 1, "", "read_ndjson"], [108, 4, 1, "", "read_parquet"], [109, 4, 1, "", "read_parquet_schema"], [555, 4, 1, "", "reduce"], [556, 4, 1, "", "repeat"], [110, 4, 1, "", "scan_csv"], [111, 4, 1, "", "scan_delta"], [112, 4, 1, "", "scan_ipc"], [113, 4, 1, "", "scan_ndjson"], [114, 4, 1, "", "scan_parquet"], [115, 4, 1, "", "scan_pyarrow_dataset"], [557, 4, 1, "", "select"], [116, 4, 1, "", "show_versions"], [558, 4, 1, "", "spearman_rank_corr"], [559, 4, 1, "", "std"], [560, 4, 1, "", "struct"], [561, 4, 1, "", "sum"], [562, 4, 1, "", "tail"], [123, 4, 1, "", "threadpool_size"], [563, 4, 1, "", "var"], [564, 4, 1, "", "when"], [124, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "activate_decimals"], [6, 1, 1, "", "load"], [7, 1, 1, "", "restore_defaults"], [8, 1, 1, "", "save"], [9, 1, 1, "", "set_ascii_tables"], [10, 1, 1, "", "set_fmt_float"], [11, 1, 1, "", "set_fmt_str_lengths"], [12, 1, 1, "", "set_streaming_chunk_size"], [13, 1, 1, "", "set_tbl_cell_alignment"], [14, 1, 1, "", "set_tbl_cols"], [15, 1, 1, "", "set_tbl_column_data_type_inline"], [16, 1, 1, "", "set_tbl_dataframe_shape_below"], [17, 1, 1, "", "set_tbl_formatting"], [18, 1, 1, "", "set_tbl_hide_column_data_types"], [19, 1, 1, "", "set_tbl_hide_column_names"], [20, 1, 1, "", "set_tbl_hide_dataframe_shape"], [21, 1, 1, "", "set_tbl_hide_dtype_separator"], [22, 1, 1, "", "set_tbl_rows"], [23, 1, 1, "", "set_tbl_width_chars"], [24, 1, 1, "", "set_verbose"], [25, 1, 1, "", "state"]], "polars.DataFrame": [[127, 1, 1, "", "__dataframe__"], [128, 1, 1, "", "apply"], [129, 1, 1, "", "bottom_k"], [130, 1, 1, "", "clear"], [131, 1, 1, "", "clone"], [132, 2, 1, "", "columns"], [133, 1, 1, "", "corr"], [134, 1, 1, "", "describe"], [135, 1, 1, "", "drop"], [136, 1, 1, "", "drop_in_place"], [137, 1, 1, "", "drop_nulls"], [138, 2, 1, "", "dtypes"], [139, 1, 1, "", "estimated_size"], [140, 1, 1, "", "explode"], [141, 1, 1, "", "extend"], [142, 1, 1, "", "fill_nan"], [143, 1, 1, "", "fill_null"], [144, 1, 1, "", "filter"], [145, 1, 1, "", "find_idx_by_name"], [146, 1, 1, "", "fold"], [147, 1, 1, "", "frame_equal"], [148, 1, 1, "", "get_column"], [149, 1, 1, "", "get_columns"], [150, 1, 1, "", "glimpse"], [151, 1, 1, "", "groupby"], [152, 1, 1, "", "groupby_dynamic"], [153, 1, 1, "", "groupby_rolling"], [154, 1, 1, "", "hash_rows"], [155, 1, 1, "", "head"], [156, 2, 1, "", "height"], [157, 1, 1, "", "hstack"], [158, 1, 1, "", "insert_at_idx"], [159, 1, 1, "", "interpolate"], [160, 1, 1, "", "is_duplicated"], [161, 1, 1, "", "is_empty"], [162, 1, 1, "", "is_unique"], [163, 1, 1, "", "item"], [164, 1, 1, "", "iter_rows"], [165, 1, 1, "", "iter_slices"], [166, 1, 1, "", "join"], [167, 1, 1, "", "join_asof"], [168, 1, 1, "", "lazy"], [169, 1, 1, "", "limit"], [170, 1, 1, "", "max"], [171, 1, 1, "", "mean"], [172, 1, 1, "", "median"], [173, 1, 1, "", "melt"], [174, 1, 1, "", "merge_sorted"], [175, 1, 1, "", "min"], [176, 1, 1, "", "n_chunks"], [177, 1, 1, "", "n_unique"], [178, 1, 1, "", "null_count"], [179, 1, 1, "", "partition_by"], [180, 1, 1, "", "pipe"], [181, 1, 1, "", "pivot"], [182, 1, 1, "", "product"], [183, 1, 1, "", "quantile"], [184, 1, 1, "", "rechunk"], [185, 1, 1, "", "rename"], [186, 1, 1, "", "replace"], [187, 1, 1, "", "replace_at_idx"], [188, 1, 1, "", "reverse"], [189, 1, 1, "", "row"], [190, 1, 1, "", "rows"], [191, 1, 1, "", "sample"], [192, 2, 1, "", "schema"], [193, 1, 1, "", "select"], [194, 2, 1, "", "shape"], [195, 1, 1, "", "shift"], [196, 1, 1, "", "shift_and_fill"], [197, 1, 1, "", "shrink_to_fit"], [198, 1, 1, "", "slice"], [199, 1, 1, "", "sort"], [200, 1, 1, "", "std"], [201, 1, 1, "", "sum"], [202, 1, 1, "", "tail"], [203, 1, 1, "", "take_every"], [204, 1, 1, "", "to_arrow"], [205, 1, 1, "", "to_dict"], [206, 1, 1, "", "to_dicts"], [207, 1, 1, "", "to_dummies"], [208, 1, 1, "", "to_init_repr"], [209, 1, 1, "", "to_numpy"], [210, 1, 1, "", "to_pandas"], [211, 1, 1, "", "to_series"], [212, 1, 1, "", "to_struct"], [213, 1, 1, "", "top_k"], [214, 1, 1, "", "transpose"], [215, 1, 1, "", "unique"], [216, 1, 1, "", "unnest"], [217, 1, 1, "", "unstack"], [218, 1, 1, "", "update"], [219, 1, 1, "", "upsample"], [220, 1, 1, "", "var"], [221, 1, 1, "", "vstack"], [222, 2, 1, "", "width"], [223, 1, 1, "", "with_columns"], [224, 1, 1, "", "with_row_count"], [26, 1, 1, "", "write_avro"], [27, 1, 1, "", "write_csv"], [28, 1, 1, "", "write_database"], [29, 1, 1, "", "write_excel"], [30, 1, 1, "", "write_ipc"], [31, 1, 1, "", "write_json"], [32, 1, 1, "", "write_ndjson"], [33, 1, 1, "", "write_parquet"]], "polars.DataType": [[34, 1, 1, "", "__init__"]], "polars.Date": [[35, 1, 1, "", "__init__"]], "polars.Datetime": [[36, 1, 1, "", "__init__"]], "polars.Decimal": [[37, 1, 1, "", "__init__"]], "polars.Duration": [[38, 1, 1, "", "__init__"]], "polars.Expr": [[252, 1, 1, "", "abs"], [253, 1, 1, "", "add"], [254, 1, 1, "", "agg_groups"], [255, 1, 1, "", "alias"], [256, 1, 1, "", "all"], [257, 1, 1, "", "and_"], [258, 1, 1, "", "any"], [259, 1, 1, "", "append"], [260, 1, 1, "", "apply"], [261, 1, 1, "", "arccos"], [262, 1, 1, "", "arccosh"], [263, 1, 1, "", "arcsin"], [264, 1, 1, "", "arcsinh"], [265, 1, 1, "", "arctan"], [266, 1, 1, "", "arctanh"], [267, 1, 1, "", "arg_max"], [268, 1, 1, "", "arg_min"], [269, 1, 1, "", "arg_sort"], [270, 1, 1, "", "arg_true"], [271, 1, 1, "", "arg_unique"], [298, 1, 1, "", "backward_fill"], [304, 1, 1, "", "bottom_k"], [305, 1, 1, "", "cast"], [307, 1, 1, "", "ceil"], [308, 1, 1, "", "clip"], [309, 1, 1, "", "clip_max"], [310, 1, 1, "", "clip_min"], [311, 1, 1, "", "cos"], [312, 1, 1, "", "cosh"], [313, 1, 1, "", "count"], [314, 1, 1, "", "cumcount"], [315, 1, 1, "", "cummax"], [316, 1, 1, "", "cummin"], [317, 1, 1, "", "cumprod"], [318, 1, 1, "", "cumsum"], [319, 1, 1, "", "cumulative_eval"], [320, 1, 1, "", "diff"], [321, 1, 1, "", "dot"], [322, 1, 1, "", "drop_nans"], [323, 1, 1, "", "drop_nulls"], [360, 1, 1, "", "entropy"], [361, 1, 1, "", "eq"], [362, 1, 1, "", "ewm_mean"], [363, 1, 1, "", "ewm_std"], [364, 1, 1, "", "ewm_var"], [365, 1, 1, "", "exclude"], [366, 1, 1, "", "exp"], [367, 1, 1, "", "explode"], [368, 1, 1, "", "extend_constant"], [369, 1, 1, "", "fill_nan"], [370, 1, 1, "", "fill_null"], [371, 1, 1, "", "filter"], [372, 1, 1, "", "first"], [373, 1, 1, "", "flatten"], [374, 1, 1, "", "floor"], [375, 1, 1, "", "floordiv"], [376, 1, 1, "", "forward_fill"], [377, 1, 1, "", "ge"], [378, 1, 1, "", "gt"], [379, 1, 1, "", "hash"], [380, 1, 1, "", "head"], [381, 1, 1, "", "inspect"], [382, 1, 1, "", "interpolate"], [383, 1, 1, "", "is_between"], [384, 1, 1, "", "is_duplicated"], [385, 1, 1, "", "is_finite"], [386, 1, 1, "", "is_first"], [387, 1, 1, "", "is_in"], [388, 1, 1, "", "is_infinite"], [389, 1, 1, "", "is_nan"], [390, 1, 1, "", "is_not"], [391, 1, 1, "", "is_not_nan"], [392, 1, 1, "", "is_not_null"], [393, 1, 1, "", "is_null"], [394, 1, 1, "", "is_unique"], [395, 1, 1, "", "keep_name"], [396, 1, 1, "", "kurtosis"], [397, 1, 1, "", "last"], [398, 1, 1, "", "le"], [399, 1, 1, "", "len"], [400, 1, 1, "", "limit"], [401, 1, 1, "", "list"], [402, 1, 1, "", "log"], [403, 1, 1, "", "log10"], [404, 1, 1, "", "lower_bound"], [405, 1, 1, "", "lt"], [406, 1, 1, "", "map"], [407, 1, 1, "", "map_alias"], [408, 1, 1, "", "map_dict"], [409, 1, 1, "", "max"], [410, 1, 1, "", "mean"], [411, 1, 1, "", "median"], [418, 1, 1, "", "min"], [419, 1, 1, "", "mod"], [420, 1, 1, "", "mode"], [421, 1, 1, "", "mul"], [422, 1, 1, "", "n_unique"], [423, 1, 1, "", "nan_max"], [424, 1, 1, "", "nan_min"], [425, 1, 1, "", "ne"], [426, 1, 1, "", "null_count"], [427, 1, 1, "", "or_"], [428, 1, 1, "", "over"], [429, 1, 1, "", "pct_change"], [430, 1, 1, "", "pipe"], [431, 1, 1, "", "pow"], [432, 1, 1, "", "prefix"], [433, 1, 1, "", "product"], [434, 1, 1, "", "quantile"], [435, 1, 1, "", "rank"], [436, 1, 1, "", "rechunk"], [437, 1, 1, "", "reinterpret"], [438, 1, 1, "", "repeat_by"], [439, 1, 1, "", "reshape"], [440, 1, 1, "", "reverse"], [441, 1, 1, "", "rolling_apply"], [442, 1, 1, "", "rolling_max"], [443, 1, 1, "", "rolling_mean"], [444, 1, 1, "", "rolling_median"], [445, 1, 1, "", "rolling_min"], [446, 1, 1, "", "rolling_quantile"], [447, 1, 1, "", "rolling_skew"], [448, 1, 1, "", "rolling_std"], [449, 1, 1, "", "rolling_sum"], [450, 1, 1, "", "rolling_var"], [451, 1, 1, "", "round"], [452, 1, 1, "", "sample"], [453, 1, 1, "", "search_sorted"], [454, 1, 1, "", "set_sorted"], [455, 1, 1, "", "shift"], [456, 1, 1, "", "shift_and_fill"], [457, 1, 1, "", "shrink_dtype"], [458, 1, 1, "", "shuffle"], [459, 1, 1, "", "sign"], [460, 1, 1, "", "sin"], [461, 1, 1, "", "sinh"], [462, 1, 1, "", "skew"], [463, 1, 1, "", "slice"], [464, 1, 1, "", "sort"], [465, 1, 1, "", "sort_by"], [466, 1, 1, "", "sqrt"], [467, 1, 1, "", "std"], [500, 1, 1, "", "sub"], [501, 1, 1, "", "suffix"], [502, 1, 1, "", "sum"], [503, 1, 1, "", "tail"], [504, 1, 1, "", "take"], [505, 1, 1, "", "take_every"], [506, 1, 1, "", "tan"], [507, 1, 1, "", "tanh"], [508, 1, 1, "", "to_physical"], [509, 1, 1, "", "top_k"], [510, 1, 1, "", "truediv"], [511, 1, 1, "", "unique"], [512, 1, 1, "", "unique_counts"], [513, 1, 1, "", "upper_bound"], [514, 1, 1, "", "value_counts"], [515, 1, 1, "", "var"], [516, 1, 1, "", "where"], [517, 1, 1, "", "xor"]], "polars.Expr.arr": [[272, 1, 1, "", "arg_max"], [273, 1, 1, "", "arg_min"], [274, 1, 1, "", "concat"], [275, 1, 1, "", "contains"], [276, 1, 1, "", "count_match"], [277, 1, 1, "", "diff"], [278, 1, 1, "", "eval"], [279, 1, 1, "", "explode"], [280, 1, 1, "", "first"], [281, 1, 1, "", "get"], [282, 1, 1, "", "head"], [283, 1, 1, "", "join"], [284, 1, 1, "", "last"], [285, 1, 1, "", "lengths"], [286, 1, 1, "", "max"], [287, 1, 1, "", "mean"], [288, 1, 1, "", "min"], [289, 1, 1, "", "reverse"], [290, 1, 1, "", "shift"], [291, 1, 1, "", "slice"], [292, 1, 1, "", "sort"], [293, 1, 1, "", "sum"], [294, 1, 1, "", "tail"], [295, 1, 1, "", "take"], [296, 1, 1, "", "to_struct"], [297, 1, 1, "", "unique"]], "polars.Expr.bin": [[299, 1, 1, "", "contains"], [300, 1, 1, "", "decode"], [301, 1, 1, "", "encode"], [302, 1, 1, "", "ends_with"], [303, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[306, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[324, 1, 1, "", "cast_time_unit"], [325, 1, 1, "", "combine"], [326, 1, 1, "", "convert_time_zone"], [327, 1, 1, "", "date"], [328, 1, 1, "", "datetime"], [329, 1, 1, "", "day"], [330, 1, 1, "", "days"], [331, 1, 1, "", "epoch"], [332, 1, 1, "", "hour"], [333, 1, 1, "", "hours"], [334, 1, 1, "", "is_leap_year"], [335, 1, 1, "", "iso_year"], [336, 1, 1, "", "microsecond"], [337, 1, 1, "", "microseconds"], [338, 1, 1, "", "millisecond"], [339, 1, 1, "", "milliseconds"], [340, 1, 1, "", "minute"], [341, 1, 1, "", "minutes"], [342, 1, 1, "", "month"], [343, 1, 1, "", "nanosecond"], [344, 1, 1, "", "nanoseconds"], [345, 1, 1, "", "offset_by"], [346, 1, 1, "", "ordinal_day"], [347, 1, 1, "", "quarter"], [348, 1, 1, "", "replace_time_zone"], [349, 1, 1, "", "round"], [350, 1, 1, "", "second"], [351, 1, 1, "", "seconds"], [352, 1, 1, "", "strftime"], [353, 1, 1, "", "time"], [354, 1, 1, "", "timestamp"], [355, 1, 1, "", "truncate"], [356, 1, 1, "", "week"], [357, 1, 1, "", "weekday"], [358, 1, 1, "", "with_time_unit"], [359, 1, 1, "", "year"]], "polars.Expr.meta": [[412, 1, 1, "", "has_multiple_outputs"], [413, 1, 1, "", "is_regex_projection"], [414, 1, 1, "", "output_name"], [415, 1, 1, "", "pop"], [416, 1, 1, "", "root_names"], [417, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[468, 1, 1, "", "concat"], [469, 1, 1, "", "contains"], [470, 1, 1, "", "count_match"], [471, 1, 1, "", "decode"], [472, 1, 1, "", "encode"], [473, 1, 1, "", "ends_with"], [474, 1, 1, "", "explode"], [475, 1, 1, "", "extract"], [476, 1, 1, "", "extract_all"], [477, 1, 1, "", "json_extract"], [478, 1, 1, "", "json_path_match"], [479, 1, 1, "", "lengths"], [480, 1, 1, "", "ljust"], [481, 1, 1, "", "lstrip"], [482, 1, 1, "", "n_chars"], [483, 1, 1, "", "parse_int"], [484, 1, 1, "", "replace"], [485, 1, 1, "", "replace_all"], [486, 1, 1, "", "rjust"], [487, 1, 1, "", "rstrip"], [488, 1, 1, "", "slice"], [489, 1, 1, "", "split"], [490, 1, 1, "", "split_exact"], [491, 1, 1, "", "splitn"], [492, 1, 1, "", "starts_with"], [493, 1, 1, "", "strip"], [494, 1, 1, "", "strptime"], [495, 1, 1, "", "to_lowercase"], [496, 1, 1, "", "to_uppercase"], [497, 1, 1, "", "zfill"]], "polars.Expr.struct": [[498, 1, 1, "", "field"], [499, 1, 1, "", "rename_fields"]], "polars.Float32": [[39, 1, 1, "", "__init__"]], "polars.Float64": [[40, 1, 1, "", "__init__"]], "polars.Int16": [[41, 1, 1, "", "__init__"]], "polars.Int32": [[42, 1, 1, "", "__init__"]], "polars.Int64": [[43, 1, 1, "", "__init__"]], "polars.Int8": [[44, 1, 1, "", "__init__"]], "polars.LazyFrame": [[585, 1, 1, "", "bottom_k"], [586, 1, 1, "", "cache"], [587, 1, 1, "", "clear"], [588, 1, 1, "", "clone"], [589, 1, 1, "", "collect"], [590, 2, 1, "", "columns"], [591, 1, 1, "", "drop"], [592, 1, 1, "", "drop_nulls"], [593, 2, 1, "", "dtypes"], [594, 1, 1, "", "explain"], [595, 1, 1, "", "explode"], [596, 1, 1, "", "fetch"], [597, 1, 1, "", "fill_nan"], [598, 1, 1, "", "fill_null"], [599, 1, 1, "", "filter"], [600, 1, 1, "", "first"], [601, 1, 1, "", "from_json"], [602, 1, 1, "", "groupby"], [603, 1, 1, "", "groupby_dynamic"], [604, 1, 1, "", "groupby_rolling"], [605, 1, 1, "", "head"], [606, 1, 1, "", "inspect"], [607, 1, 1, "", "interpolate"], [608, 1, 1, "", "join"], [609, 1, 1, "", "join_asof"], [610, 1, 1, "", "last"], [611, 1, 1, "", "lazy"], [612, 1, 1, "", "limit"], [613, 1, 1, "", "map"], [614, 1, 1, "", "max"], [615, 1, 1, "", "mean"], [616, 1, 1, "", "median"], [617, 1, 1, "", "melt"], [618, 1, 1, "", "merge_sorted"], [619, 1, 1, "", "min"], [620, 1, 1, "", "pipe"], [621, 1, 1, "", "profile"], [622, 1, 1, "", "quantile"], [623, 1, 1, "", "read_json"], [624, 1, 1, "", "rename"], [625, 1, 1, "", "reverse"], [626, 2, 1, "", "schema"], [627, 1, 1, "", "select"], [628, 1, 1, "", "shift"], [629, 1, 1, "", "shift_and_fill"], [630, 1, 1, "", "show_graph"], [631, 1, 1, "", "sink_ipc"], [632, 1, 1, "", "sink_parquet"], [633, 1, 1, "", "slice"], [634, 1, 1, "", "sort"], [635, 1, 1, "", "std"], [636, 1, 1, "", "sum"], [637, 1, 1, "", "tail"], [638, 1, 1, "", "take_every"], [639, 1, 1, "", "top_k"], [640, 1, 1, "", "unique"], [641, 1, 1, "", "unnest"], [642, 1, 1, "", "update"], [643, 1, 1, "", "var"], [644, 2, 1, "", "width"], [645, 1, 1, "", "with_columns"], [646, 1, 1, "", "with_context"], [647, 1, 1, "", "with_row_count"], [648, 1, 1, "", "write_json"]], "polars.List": [[45, 1, 1, "", "__init__"]], "polars.Null": [[46, 1, 1, "", "__init__"]], "polars.Object": [[47, 1, 1, "", "__init__"]], "polars.SQLContext": [[48, 1, 1, "", "execute"], [49, 1, 1, "", "query"], [50, 1, 1, "", "register"]], "polars.Series": [[671, 1, 1, "", "abs"], [672, 1, 1, "", "alias"], [673, 1, 1, "", "all"], [674, 1, 1, "", "any"], [675, 1, 1, "", "append"], [676, 1, 1, "", "apply"], [677, 1, 1, "", "arccos"], [678, 1, 1, "", "arccosh"], [679, 1, 1, "", "arcsin"], [680, 1, 1, "", "arcsinh"], [681, 1, 1, "", "arctan"], [682, 1, 1, "", "arctanh"], [683, 1, 1, "", "arg_max"], [684, 1, 1, "", "arg_min"], [685, 1, 1, "", "arg_sort"], [686, 1, 1, "", "arg_true"], [687, 1, 1, "", "arg_unique"], [688, 3, 1, "", "arr"], [720, 1, 1, "", "bottom_k"], [721, 1, 1, "", "cast"], [722, 3, 1, "", "cat"], [724, 1, 1, "", "ceil"], [725, 1, 1, "", "chunk_lengths"], [726, 1, 1, "", "clear"], [727, 1, 1, "", "clip"], [728, 1, 1, "", "clip_max"], [729, 1, 1, "", "clip_min"], [730, 1, 1, "", "clone"], [731, 1, 1, "", "cos"], [732, 1, 1, "", "cosh"], [733, 1, 1, "", "cummax"], [734, 1, 1, "", "cummin"], [735, 1, 1, "", "cumprod"], [736, 1, 1, "", "cumsum"], [737, 1, 1, "", "cumulative_eval"], [738, 1, 1, "", "cut"], [739, 1, 1, "", "describe"], [740, 1, 1, "", "diff"], [741, 1, 1, "", "dot"], [742, 1, 1, "", "drop_nans"], [743, 1, 1, "", "drop_nulls"], [744, 3, 1, "", "dt"], [785, 3, 1, "", "dtype"], [786, 1, 1, "", "entropy"], [787, 1, 1, "", "estimated_size"], [788, 1, 1, "", "ewm_mean"], [789, 1, 1, "", "ewm_std"], [790, 1, 1, "", "ewm_var"], [791, 1, 1, "", "exp"], [792, 1, 1, "", "explode"], [793, 1, 1, "", "extend_constant"], [794, 1, 1, "", "fill_nan"], [795, 1, 1, "", "fill_null"], [796, 1, 1, "", "filter"], [797, 3, 1, "", "flags"], [798, 1, 1, "", "floor"], [799, 1, 1, "", "get_chunks"], [800, 1, 1, "", "has_validity"], [801, 1, 1, "", "hash"], [802, 1, 1, "", "head"], [803, 1, 1, "", "hist"], [804, 3, 1, "", "inner_dtype"], [805, 1, 1, "", "interpolate"], [806, 1, 1, "", "is_between"], [807, 1, 1, "", "is_boolean"], [808, 1, 1, "", "is_duplicated"], [809, 1, 1, "", "is_empty"], [810, 1, 1, "", "is_finite"], [811, 1, 1, "", "is_first"], [812, 1, 1, "", "is_float"], [813, 1, 1, "", "is_in"], [814, 1, 1, "", "is_infinite"], [815, 1, 1, "", "is_nan"], [816, 1, 1, "", "is_not_nan"], [817, 1, 1, "", "is_not_null"], [818, 1, 1, "", "is_null"], [819, 1, 1, "", "is_numeric"], [820, 1, 1, "", "is_sorted"], [821, 1, 1, "", "is_temporal"], [822, 1, 1, "", "is_unique"], [823, 1, 1, "", "is_utf8"], [824, 1, 1, "", "item"], [825, 1, 1, "", "kurtosis"], [826, 1, 1, "", "len"], [827, 1, 1, "", "limit"], [828, 1, 1, "", "log"], [829, 1, 1, "", "log10"], [830, 1, 1, "", "lower_bound"], [831, 1, 1, "", "map_dict"], [832, 1, 1, "", "max"], [833, 1, 1, "", "mean"], [834, 1, 1, "", "median"], [835, 1, 1, "", "min"], [836, 1, 1, "", "mode"], [837, 1, 1, "", "n_chunks"], [838, 1, 1, "", "n_unique"], [839, 3, 1, "", "name"], [840, 1, 1, "", "nan_max"], [841, 1, 1, "", "nan_min"], [842, 1, 1, "", "new_from_index"], [843, 1, 1, "", "null_count"], [844, 1, 1, "", "pct_change"], [845, 1, 1, "", "peak_max"], [846, 1, 1, "", "peak_min"], [847, 1, 1, "", "product"], [848, 1, 1, "", "qcut"], [849, 1, 1, "", "quantile"], [850, 1, 1, "", "rank"], [851, 1, 1, "", "rechunk"], [852, 1, 1, "", "reinterpret"], [853, 1, 1, "", "rename"], [854, 1, 1, "", "reshape"], [855, 1, 1, "", "reverse"], [856, 1, 1, "", "rolling_apply"], [857, 1, 1, "", "rolling_max"], [858, 1, 1, "", "rolling_mean"], [859, 1, 1, "", "rolling_median"], [860, 1, 1, "", "rolling_min"], [861, 1, 1, "", "rolling_quantile"], [862, 1, 1, "", "rolling_skew"], [863, 1, 1, "", "rolling_std"], [864, 1, 1, "", "rolling_sum"], [865, 1, 1, "", "rolling_var"], [866, 1, 1, "", "round"], [867, 1, 1, "", "sample"], [868, 1, 1, "", "search_sorted"], [869, 1, 1, "", "series_equal"], [870, 1, 1, "", "set"], [871, 1, 1, "", "set_at_idx"], [872, 1, 1, "", "set_sorted"], [873, 3, 1, "", "shape"], [874, 1, 1, "", "shift"], [875, 1, 1, "", "shift_and_fill"], [876, 1, 1, "", "shrink_dtype"], [877, 1, 1, "", "shrink_to_fit"], [878, 1, 1, "", "shuffle"], [879, 1, 1, "", "sign"], [880, 1, 1, "", "sin"], [881, 1, 1, "", "sinh"], [882, 1, 1, "", "skew"], [883, 1, 1, "", "slice"], [884, 1, 1, "", "sort"], [885, 1, 1, "", "sqrt"], [886, 1, 1, "", "std"], [887, 3, 1, "", "str"], [922, 1, 1, "", "sum"], [923, 1, 1, "", "tail"], [924, 1, 1, "", "take"], [925, 1, 1, "", "take_every"], [926, 1, 1, "", "tan"], [927, 1, 1, "", "tanh"], [928, 3, 1, "", "time_unit"], [929, 1, 1, "", "to_arrow"], [930, 1, 1, "", "to_dummies"], [931, 1, 1, "", "to_frame"], [932, 1, 1, "", "to_init_repr"], [933, 1, 1, "", "to_list"], [934, 1, 1, "", "to_numpy"], [935, 1, 1, "", "to_pandas"], [936, 1, 1, "", "to_physical"], [937, 1, 1, "", "top_k"], [938, 1, 1, "", "unique"], [939, 1, 1, "", "unique_counts"], [940, 1, 1, "", "upper_bound"], [941, 1, 1, "", "value_counts"], [942, 1, 1, "", "var"], [943, 1, 1, "", "view"], [944, 1, 1, "", "zip_with"]], "polars.Series.arr": [[689, 1, 1, "", "arg_max"], [690, 1, 1, "", "arg_min"], [691, 1, 1, "", "concat"], [692, 1, 1, "", "contains"], [693, 1, 1, "", "count_match"], [694, 1, 1, "", "diff"], [695, 1, 1, "", "eval"], [696, 1, 1, "", "explode"], [697, 1, 1, "", "first"], [698, 1, 1, "", "get"], [699, 1, 1, "", "head"], [700, 1, 1, "", "join"], [701, 1, 1, "", "last"], [702, 1, 1, "", "lengths"], [703, 1, 1, "", "max"], [704, 1, 1, "", "mean"], [705, 1, 1, "", "min"], [706, 1, 1, "", "reverse"], [707, 1, 1, "", "shift"], [708, 1, 1, "", "slice"], [709, 1, 1, "", "sort"], [710, 1, 1, "", "sum"], [711, 1, 1, "", "tail"], [712, 1, 1, "", "take"], [713, 1, 1, "", "to_struct"], [714, 1, 1, "", "unique"]], "polars.Series.bin": [[715, 1, 1, "", "contains"], [716, 1, 1, "", "decode"], [717, 1, 1, "", "encode"], [718, 1, 1, "", "ends_with"], [719, 1, 1, "", "starts_with"]], "polars.Series.cat": [[723, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[745, 1, 1, "", "cast_time_unit"], [746, 1, 1, "", "combine"], [747, 1, 1, "", "convert_time_zone"], [748, 1, 1, "", "date"], [749, 1, 1, "", "datetime"], [750, 1, 1, "", "day"], [751, 1, 1, "", "days"], [752, 1, 1, "", "epoch"], [753, 1, 1, "", "hour"], [754, 1, 1, "", "hours"], [755, 1, 1, "", "is_leap_year"], [756, 1, 1, "", "iso_year"], [757, 1, 1, "", "max"], [758, 1, 1, "", "mean"], [759, 1, 1, "", "median"], [760, 1, 1, "", "microsecond"], [761, 1, 1, "", "microseconds"], [762, 1, 1, "", "millisecond"], [763, 1, 1, "", "milliseconds"], [764, 1, 1, "", "min"], [765, 1, 1, "", "minute"], [766, 1, 1, "", "minutes"], [767, 1, 1, "", "month"], [768, 1, 1, "", "nanosecond"], [769, 1, 1, "", "nanoseconds"], [770, 1, 1, "", "offset_by"], [771, 1, 1, "", "ordinal_day"], [772, 1, 1, "", "quarter"], [773, 1, 1, "", "replace_time_zone"], [774, 1, 1, "", "round"], [775, 1, 1, "", "second"], [776, 1, 1, "", "seconds"], [777, 1, 1, "", "strftime"], [778, 1, 1, "", "time"], [779, 1, 1, "", "timestamp"], [780, 1, 1, "", "truncate"], [781, 1, 1, "", "week"], [782, 1, 1, "", "weekday"], [783, 1, 1, "", "with_time_unit"], [784, 1, 1, "", "year"]], "polars.Series.str": [[888, 1, 1, "", "concat"], [889, 1, 1, "", "contains"], [890, 1, 1, "", "count_match"], [891, 1, 1, "", "decode"], [892, 1, 1, "", "encode"], [893, 1, 1, "", "ends_with"], [894, 1, 1, "", "explode"], [895, 1, 1, "", "extract"], [896, 1, 1, "", "extract_all"], [897, 1, 1, "", "json_extract"], [898, 1, 1, "", "json_path_match"], [899, 1, 1, "", "lengths"], [900, 1, 1, "", "ljust"], [901, 1, 1, "", "lstrip"], [902, 1, 1, "", "n_chars"], [903, 1, 1, "", "parse_int"], [904, 1, 1, "", "replace"], [905, 1, 1, "", "replace_all"], [906, 1, 1, "", "rjust"], [907, 1, 1, "", "rstrip"], [908, 1, 1, "", "slice"], [909, 1, 1, "", "split"], [910, 1, 1, "", "split_exact"], [911, 1, 1, "", "splitn"], [912, 1, 1, "", "starts_with"], [913, 1, 1, "", "strip"], [914, 1, 1, "", "strptime"], [915, 1, 1, "", "to_lowercase"], [916, 1, 1, "", "to_uppercase"], [917, 1, 1, "", "zfill"]], "polars.Series.struct": [[918, 1, 1, "", "field"], [919, 3, 1, "", "fields"], [920, 1, 1, "", "rename_fields"], [921, 1, 1, "", "unnest"]], "polars.StringCache": [[51, 1, 1, "", "__init__"]], "polars.Struct": [[52, 1, 1, "", "__init__"]], "polars.Time": [[53, 1, 1, "", "__init__"]], "polars.UInt16": [[54, 1, 1, "", "__init__"]], "polars.UInt32": [[55, 1, 1, "", "__init__"]], "polars.UInt64": [[56, 1, 1, "", "__init__"]], "polars.UInt8": [[57, 1, 1, "", "__init__"]], "polars.Unknown": [[58, 1, 1, "", "__init__"]], "polars.Utf8": [[59, 1, 1, "", "__init__"]], "polars.api": [[61, 4, 1, "", "register_dataframe_namespace"], [62, 4, 1, "", "register_expr_namespace"], [63, 4, 1, "", "register_lazyframe_namespace"], [64, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[225, 1, 1, "", "__iter__"], [226, 1, 1, "", "agg"], [227, 1, 1, "", "all"], [228, 1, 1, "", "apply"], [229, 1, 1, "", "count"], [230, 1, 1, "", "first"], [231, 1, 1, "", "head"], [232, 1, 1, "", "last"], [233, 1, 1, "", "max"], [234, 1, 1, "", "mean"], [235, 1, 1, "", "median"], [236, 1, 1, "", "min"], [237, 1, 1, "", "n_unique"], [238, 1, 1, "", "quantile"], [239, 1, 1, "", "sum"], [240, 1, 1, "", "tail"]], "polars.exceptions": [[72, 5, 1, "", "ArrowError"], [73, 5, 1, "", "ColumnNotFoundError"], [74, 5, 1, "", "ComputeError"], [75, 5, 1, "", "DuplicateError"], [76, 5, 1, "", "InvalidOperationError"], [77, 5, 1, "", "NoDataError"], [78, 5, 1, "", "NoRowsReturnedError"], [79, 5, 1, "", "PolarsPanicError"], [80, 5, 1, "", "RowsError"], [81, 5, 1, "", "SchemaError"], [82, 5, 1, "", "SchemaFieldNotFoundError"], [83, 5, 1, "", "ShapeError"], [84, 5, 1, "", "StructFieldNotFoundError"], [85, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[96, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[649, 1, 1, "", "agg"], [650, 1, 1, "", "all"], [651, 1, 1, "", "apply"], [652, 1, 1, "", "count"], [653, 1, 1, "", "first"], [654, 1, 1, "", "head"], [655, 1, 1, "", "last"], [656, 1, 1, "", "max"], [657, 1, 1, "", "mean"], [658, 1, 1, "", "median"], [659, 1, 1, "", "min"], [660, 1, 1, "", "n_unique"], [661, 1, 1, "", "quantile"], [662, 1, 1, "", "sum"], [663, 1, 1, "", "tail"]], "polars.testing": [[117, 4, 1, "", "assert_frame_equal"], [118, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[119, 0, 1, "", "column"], [120, 4, 1, "", "columns"], [121, 4, 1, "", "dataframes"], [122, 4, 1, "", "series"]], "polars.testing.parametric.column": [[119, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 141], "api": [1, 61, 62, 63, 64, 582], "provid": 1, "new": 1, "function": [1, 570, 581], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944], "binari": [2, 565, 576, 946], "boolean": [3, 566, 947], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 125], "activate_decim": 5, "load": [6, 125], "restore_default": 7, "save": [8, 125], "set_ascii_t": 9, "set_fmt_float": 10, "set_fmt_str_length": 11, "set_streaming_chunk_s": 12, "set_tbl_cell_align": 13, "set_tbl_col": 14, "set_tbl_column_data_type_inlin": 15, "set_tbl_dataframe_shape_below": 16, "set_tbl_format": 17, "set_tbl_hide_column_data_typ": 18, "set_tbl_hide_column_nam": 19, "set_tbl_hide_dataframe_shap": 20, "set_tbl_hide_dtype_separ": 21, "set_tbl_row": 22, "set_tbl_width_char": 23, "set_verbos": 24, "state": [25, 125], "datafram": [26, 27, 28, 29, 30, 31, 32, 33, 121, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 246], "write_avro": 26, "write_csv": 27, "write_databas": 28, "write_excel": 29, "write_ipc": 30, "write_json": [31, 648], "write_ndjson": 32, "write_parquet": 33, "datatyp": 34, "date": [35, 327, 534, 748], "datetim": [36, 328, 535, 749], "decim": 37, "durat": [38, 536], "float32": 39, "float64": 40, "int16": 41, "int32": 42, "int64": 43, "int8": 44, "list": [45, 401, 545, 572, 953], "null": 46, "object": 47, "sqlcontext": [48, 49, 50], "execut": 48, "queri": 49, "regist": 50, "stringcach": [51, 581], "struct": [52, 498, 499, 560, 578, 918, 919, 920, 921, 957], "time": [53, 353, 778], "uint16": 54, "uint32": 55, "uint64": 56, "uint8": 57, "unknown": 58, "utf8": 59, "align_fram": 60, "register_dataframe_namespac": 61, "register_expr_namespac": 62, "register_lazyframe_namespac": 63, "register_series_namespac": 64, "arg_wher": 65, "build_info": 66, "collect_al": 67, "concat": [68, 274, 468, 691, 888], "cut": [69, 738], "date_rang": 70, "enable_string_cach": 71, "except": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 250], "arrowerror": 72, "columnnotfounderror": 73, "computeerror": 74, "duplicateerror": 75, "invalidoperationerror": 76, "nodataerror": 77, "norowsreturnederror": 78, "polarspanicerror": 79, "rowserror": 80, "schemaerror": 81, "schemafieldnotfounderror": 82, "shapeerror": 83, "structfieldnotfounderror": 84, "toomanyrowsreturnederror": 85, "from_arrow": 86, "from_datafram": 87, "from_dict": [88, 89], "from_numpi": 90, "from_panda": 91, "from_record": 92, "from_repr": 93, "get_dummi": 94, "get_index_typ": 95, "io": 96, "csv": [96, 583], "batched_read": 96, "batchedcsvread": [96, 583], "next_batch": 96, "ones": 97, "read_avro": 98, "read_csv": 99, "read_csv_batch": 100, "read_databas": 101, "read_delta": 102, "read_excel": 103, "read_ipc": 104, "read_ipc_schema": 105, "read_json": [106, 623], "read_ndjson": 107, "read_parquet": 108, "read_parquet_schema": 109, "scan_csv": 110, "scan_delta": 111, "scan_ipc": 112, "scan_ndjson": 113, "scan_parquet": 114, "scan_pyarrow_dataset": 115, "show_vers": 116, "test": [117, 118, 119, 120, 121, 122, 960], "assert_frame_equ": 117, "assert_series_equ": 118, "parametr": [119, 120, 121, 122], "column": [119, 120, 132, 568, 590], "seri": [122, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 952], "threadpool_s": 123, "zero": 124, "option": 125, "current": 125, "us": 125, "context": 125, "manag": 125, "aggreg": [126, 251, 584, 670], "__dataframe__": 127, "appli": [128, 228, 260, 520, 651, 676], "bottom_k": [129, 304, 585, 720], "clear": [130, 587, 726], "clone": [131, 588, 730], "corr": [133, 528], "describ": [134, 739], "drop": [135, 591], "drop_in_plac": 136, "drop_nul": [137, 323, 592, 743], "dtype": [138, 593, 785], "estimated_s": [139, 787], "explod": [140, 279, 367, 474, 595, 696, 792, 894], "fill_nan": [142, 369, 597, 794], "fill_nul": [143, 370, 598, 795], "filter": [144, 371, 599, 796], "find_idx_by_nam": 145, "fold": [146, 540], "frame_equ": 147, "get_column": [148, 149], "glimps": 150, "groupbi": [151, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 245, 602, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666], "groupby_dynam": [152, 603], "groupby_rol": [153, 604], "hash_row": 154, "head": [155, 231, 282, 380, 544, 605, 654, 699, 802], "height": 156, "hstack": 157, "insert_at_idx": 158, "interpol": [159, 382, 607, 805], "is_dupl": [160, 384, 808], "is_empti": [161, 809], "is_uniqu": [162, 394, 822], "item": [163, 824], "iter_row": 164, "iter_slic": 165, "join": [166, 283, 608, 700], "join_asof": [167, 609], "lazi": [168, 581, 611], "limit": [169, 400, 612, 827], "max": [170, 233, 286, 409, 548, 614, 656, 703, 757, 832], "mean": [171, 234, 287, 410, 549, 615, 657, 704, 758, 833], "median": [172, 235, 411, 550, 616, 658, 759, 834], "melt": [173, 617], "merge_sort": [174, 618], "min": [175, 236, 288, 418, 551, 619, 659, 705, 764, 835], "n_chunk": [176, 837], "n_uniqu": [177, 237, 422, 552, 660, 838], "null_count": [178, 426, 843], "partition_bi": 179, "pipe": [180, 430, 620], "pivot": 181, "product": [182, 433, 847], "quantil": [183, 238, 434, 554, 622, 661, 849], "rechunk": [184, 436, 851], "renam": [185, 624, 853], "replac": [186, 484, 904], "replace_at_idx": 187, "revers": [188, 289, 440, 625, 706, 855], "row": [189, 190], "sampl": [191, 452, 867], "schema": [192, 626], "select": [193, 248, 557, 575, 627, 669, 955], "shape": [194, 873], "shift": [195, 290, 455, 628, 707, 874], "shift_and_fil": [196, 456, 629, 875], "shrink_to_fit": [197, 877], "slice": [198, 291, 463, 488, 633, 708, 883, 908], "sort": [199, 292, 464, 634, 709, 884], "std": [200, 467, 559, 635, 886], "sum": [201, 239, 293, 502, 561, 636, 662, 710, 922], "tail": [202, 240, 294, 503, 562, 637, 663, 711, 923], "take_everi": [203, 505, 638, 925], "to_arrow": [204, 929], "to_dict": [205, 206], "to_dummi": [207, 930], "to_init_repr": [208, 932], "to_numpi": [209, 934], "to_panda": [210, 935], "to_seri": 211, "to_struct": [212, 296, 713], "top_k": [213, 509, 639, 937], "transpos": 214, "uniqu": [215, 297, 511, 640, 714, 938], "unnest": [216, 641, 921], "unstack": 217, "updat": [218, 642], "upsampl": 219, "var": [220, 515, 563, 643, 942], "vstack": 221, "width": [222, 644], "with_column": [223, 645], "with_row_count": [224, 647], "__iter__": 225, "agg": [226, 649], "all": [227, 256, 518, 650, 673], "count": [229, 313, 529, 652], "first": [230, 280, 372, 539, 600, 653, 697], "last": [232, 284, 397, 610, 655, 701], "attribut": [241, 664, 945], "comput": [242, 569, 949], "descript": [243, 665, 950], "export": [244, 951], "miscellan": [247, 574, 581, 668, 954], "manipul": [248, 575, 669, 955], "data": 249, "type": 249, "numer": [249, 576], "tempor": [249, 579, 958], "nest": 249, "other": 249, "expr": [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517], "ab": [252, 671], "add": 253, "agg_group": 254, "alia": [255, 672], "and_": 257, "ani": [258, 519, 674], "append": [259, 675], "arcco": [261, 677], "arccosh": [262, 678], "arcsin": [263, 679], "arcsinh": [264, 680], "arctan": [265, 681], "arctanh": [266, 682], "arg_max": [267, 272, 683, 689], "arg_min": [268, 273, 684, 690], "arg_sort": [269, 685], "arg_tru": [270, 686], "arg_uniqu": [271, 687], "arr": [272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714], "contain": [275, 299, 469, 692, 715, 889], "count_match": [276, 470, 693, 890], "diff": [277, 320, 694, 740], "eval": [278, 695], "get": [281, 698], "length": [285, 479, 702, 899], "take": [295, 504, 712, 924], "backward_fil": 298, "bin": [299, 300, 301, 302, 303, 715, 716, 717, 718, 719], "decod": [300, 471, 716, 891], "encod": [301, 472, 717, 892], "ends_with": [302, 473, 718, 893], "starts_with": [303, 492, 719, 912], "cast": [305, 721], "cat": [306, 722, 723], "set_ord": [306, 723], "ceil": [307, 724], "clip": [308, 727], "clip_max": [309, 728], "clip_min": [310, 729], "co": [311, 731], "cosh": [312, 732], "cumcount": 314, "cummax": [315, 733], "cummin": [316, 734], "cumprod": [317, 735], "cumsum": [318, 533, 736], "cumulative_ev": [319, 737], "dot": [321, 741], "drop_nan": [322, 742], "dt": [324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784], "cast_time_unit": [324, 745], "combin": [325, 746], "convert_time_zon": [326, 747], "dai": [329, 330, 750, 751], "epoch": [331, 752], "hour": [332, 333, 753, 754], "is_leap_year": [334, 755], "iso_year": [335, 756], "microsecond": [336, 337, 760, 761], "millisecond": [338, 339, 762, 763], "minut": [340, 341, 765, 766], "month": [342, 767], "nanosecond": [343, 344, 768, 769], "offset_bi": [345, 770], "ordinal_dai": [346, 771], "quarter": [347, 772], "replace_time_zon": [348, 773], "round": [349, 451, 774, 866], "second": [350, 351, 775, 776], "strftime": [352, 777], "timestamp": [354, 779], "truncat": [355, 780], "week": [356, 781], "weekdai": [357, 782], "with_time_unit": [358, 783], "year": [359, 784], "entropi": [360, 786], "eq": 361, "ewm_mean": [362, 788], "ewm_std": [363, 789], "ewm_var": [364, 790], "exclud": [365, 538], "exp": [366, 791], "extend_const": [368, 793], "flatten": 373, "floor": [374, 798], "floordiv": 375, "forward_fil": 376, "ge": 377, "gt": 378, "hash": [379, 801], "inspect": [381, 606], "is_between": [383, 806], "is_finit": [385, 810], "is_first": [386, 811], "is_in": [387, 813], "is_infinit": [388, 814], "is_nan": [389, 815], "is_not": 390, "is_not_nan": [391, 816], "is_not_nul": [392, 817], "is_nul": [393, 818], "keep_nam": 395, "kurtosi": [396, 825], "le": 398, "len": [399, 826], "log": [402, 828], "log10": [403, 829], "lower_bound": [404, 830], "lt": 405, "map": [406, 547, 613], "map_alia": 407, "map_dict": [408, 831], "meta": [412, 413, 414, 415, 416, 417, 573], "has_multiple_output": 412, "is_regex_project": 413, "output_nam": 414, "pop": 415, "root_nam": 416, "undo_alias": 417, "mod": 419, "mode": [420, 836], "mul": 421, "nan_max": [423, 840], "nan_min": [424, 841], "ne": 425, "or_": 427, "over": 428, "pct_chang": [429, 844], "pow": 431, "prefix": 432, "rank": [435, 850], "reinterpret": [437, 852], "repeat_bi": 438, "reshap": [439, 854], "rolling_appli": [441, 856], "rolling_max": [442, 857], "rolling_mean": [443, 858], "rolling_median": [444, 859], "rolling_min": [445, 860], "rolling_quantil": [446, 861], "rolling_skew": [447, 862], "rolling_std": [448, 863], "rolling_sum": [449, 864], "rolling_var": [450, 865], "search_sort": [453, 868], "set_sort": [454, 872], "shrink_dtyp": [457, 876], "shuffl": [458, 878], "sign": [459, 879], "sin": [460, 880], "sinh": [461, 881], "skew": [462, 882], "sort_bi": 465, "sqrt": [466, 885], "str": [468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917], "extract": [475, 895], "extract_al": [476, 896], "json_extract": [477, 897], "json_path_match": [478, 898], "ljust": [480, 900], "lstrip": [481, 901], "n_char": [482, 902], "parse_int": [483, 903], "replace_al": [485, 905], "rjust": [486, 906], "rstrip": [487, 907], "split": [489, 909], "split_exact": [490, 910], "splitn": [491, 911], "strip": [493, 913], "strptime": [494, 914], "to_lowercas": [495, 915], "to_uppercas": [496, 916], "zfill": [497, 917], "field": [498, 918, 919], "rename_field": [499, 920], "sub": 500, "suffix": 501, "tan": [506, 926], "tanh": [507, 927], "to_phys": [508, 936], "truediv": 510, "unique_count": [512, 939], "upper_bound": [513, 940], "value_count": [514, 941], "where": 516, "xor": 517, "arang": 521, "arg_sort_bi": 522, "avg": 523, "coalesc": 524, "col": 525, "concat_list": 526, "concat_str": 527, "cov": 530, "cumfold": 531, "cumreduc": 532, "element": 537, "format": 541, "from_epoch": 542, "group": 543, "lit": 546, "pearson_corr": 553, "reduc": 555, "repeat": 556, "spearman_rank_corr": 558, "when": 564, "categori": [567, 948], "name": [568, 839], "express": 571, "oper": 576, "conjunct": 576, "comparison": 576, "string": [577, 956], "window": 580, "convers": 581, "eager": 581, "parallel": 581, "refer": 582, "input": 583, "output": 583, "feather": 583, "ipc": 583, "parquet": 583, "databas": 583, "json": 583, "avro": 583, "excel": 583, "delta": 583, "lake": 583, "dataset": 583, "lazyfram": [585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 667], "cach": 586, "collect": 589, "explain": 594, "fetch": 596, "from_json": 601, "profil": 621, "show_graph": 630, "sink_ipc": 631, "sink_parquet": 632, "with_context": 646, "lazygroupbi": [649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663], "read": 668, "write": 668, "logic": 668, "plan": 668, "chunk_length": 725, "flag": 797, "get_chunk": 799, "has_valid": 800, "hist": 803, "inner_dtyp": 804, "is_boolean": 807, "is_float": 812, "is_numer": 819, "is_sort": 820, "is_tempor": 821, "is_utf8": 823, "new_from_index": 842, "peak_max": 845, "peak_min": 846, "qcut": 848, "series_equ": 869, "set": 870, "set_at_idx": 871, "time_unit": 928, "to_fram": 931, "to_list": 933, "view": 943, "zip_with": 944, "sql": 959, "method": 959, "assert": 960, "properti": 960, "base": 960, "strategi": 960, "helper": 960, "util": 961}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.DataType": [[34, "polars-datatype"]], "polars.DataFrame.write_avro": [[26, "polars-dataframe-write-avro"]], "polars.Config.set_tbl_width_chars": [[23, "polars-config-set-tbl-width-chars"]], "polars.Config.restore_defaults": [[7, "polars-config-restore-defaults"]], "polars.Config.set_tbl_column_data_type_inline": [[15, "polars-config-set-tbl-column-data-type-inline"]], "polars.Int64": [[43, "polars-int64"]], "polars.SQLContext.query": [[49, "polars-sqlcontext-query"]], "polars.Config.set_tbl_hide_column_data_types": [[18, "polars-config-set-tbl-hide-column-data-types"]], "polars.collect_all": [[67, "polars-collect-all"]], "polars.Datetime": [[36, "polars-datetime"]], "polars.Float64": [[40, "polars-float64"]], "polars.Config.set_verbose": [[24, "polars-config-set-verbose"]], "polars.Config.set_tbl_rows": [[22, "polars-config-set-tbl-rows"]], "polars.DataFrame.write_excel": [[29, "polars-dataframe-write-excel"]], "polars.DataFrame.write_json": [[31, "polars-dataframe-write-json"]], "polars.api.register_dataframe_namespace": [[61, "polars-api-register-dataframe-namespace"]], "polars.DataFrame.write_parquet": [[33, "polars-dataframe-write-parquet"]], "polars.Config.save": [[8, "polars-config-save"]], "polars.Struct": [[52, "polars-struct"]], "polars.Config.set_tbl_hide_column_names": [[19, "polars-config-set-tbl-hide-column-names"]], "polars.UInt16": [[54, "polars-uint16"]], "polars.Unknown": [[58, "polars-unknown"]], "polars.api.register_expr_namespace": [[62, "polars-api-register-expr-namespace"]], "polars.Utf8": [[59, "polars-utf8"]], "polars.DataFrame.write_ndjson": [[32, "polars-dataframe-write-ndjson"]], "polars.align_frames": [[60, "polars-align-frames"]], "polars.Date": [[35, "polars-date"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.Config.set_tbl_hide_dataframe_shape": [[20, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.SQLContext.register": [[50, "polars-sqlcontext-register"]], "polars.Config.load": [[6, "polars-config-load"]], "polars.StringCache": [[51, "polars-stringcache"]], "polars.UInt32": [[55, "polars-uint32"]], "polars.Config.set_streaming_chunk_size": [[12, "polars-config-set-streaming-chunk-size"]], "polars.DataFrame.write_csv": [[27, "polars-dataframe-write-csv"]], "polars.concat": [[68, "polars-concat"]], "polars.Decimal": [[37, "polars-decimal"]], "polars.Config.set_fmt_str_lengths": [[11, "polars-config-set-fmt-str-lengths"]], "polars.UInt64": [[56, "polars-uint64"]], "polars.Config.set_tbl_cell_alignment": [[13, "polars-config-set-tbl-cell-alignment"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.Config.set_tbl_hide_dtype_separator": [[21, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Float32": [[39, "polars-float32"]], "polars.Null": [[46, "polars-null"]], "polars.SQLContext.execute": [[48, "polars-sqlcontext-execute"]], "polars.Time": [[53, "polars-time"]], "polars.Int8": [[44, "polars-int8"]], "polars.DataFrame.write_ipc": [[30, "polars-dataframe-write-ipc"]], "polars.Config.set_ascii_tables": [[9, "polars-config-set-ascii-tables"]], "polars.DataFrame.write_database": [[28, "polars-dataframe-write-database"]], "polars.Config.set_tbl_cols": [[14, "polars-config-set-tbl-cols"]], "polars.Duration": [[38, "polars-duration"]], "polars.Config.activate_decimals": [[5, "polars-config-activate-decimals"]], "polars.arg_where": [[65, "polars-arg-where"]], "polars.build_info": [[66, "polars-build-info"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.List": [[45, "polars-list"]], "polars.Int32": [[42, "polars-int32"]], "polars.UInt8": [[57, "polars-uint8"]], "polars.api.register_lazyframe_namespace": [[63, "polars-api-register-lazyframe-namespace"]], "polars.Config.set_tbl_dataframe_shape_below": [[16, "polars-config-set-tbl-dataframe-shape-below"]], "polars.api.register_series_namespace": [[64, "polars-api-register-series-namespace"]], "polars.Binary": [[2, "polars-binary"]], "polars.Int16": [[41, "polars-int16"]], "polars.Config.state": [[25, "polars-config-state"]], "polars.Config.set_tbl_formatting": [[17, "polars-config-set-tbl-formatting"]], "polars.Object": [[47, "polars-object"]], "polars.Config.set_fmt_float": [[10, "polars-config-set-fmt-float"]], "polars.read_ipc": [[104, "polars-read-ipc"]], "polars.from_numpy": [[90, "polars-from-numpy"]], "polars.from_records": [[92, "polars-from-records"]], "polars.get_dummies": [[94, "polars-get-dummies"]], "polars.exceptions.StructFieldNotFoundError": [[84, "polars-exceptions-structfieldnotfounderror"]], "polars.read_json": [[106, "polars-read-json"]], "polars.DataFrame.drop_nulls": [[137, "polars-dataframe-drop-nulls"]], "polars.exceptions.RowsError": [[80, "polars-exceptions-rowserror"]], "polars.cut": [[69, "polars-cut"]], "polars.exceptions.NoDataError": [[77, "polars-exceptions-nodataerror"]], "polars.DataFrame.apply": [[128, "polars-dataframe-apply"]], "polars.show_versions": [[116, "polars-show-versions"]], "polars.exceptions.TooManyRowsReturnedError": [[85, "polars-exceptions-toomanyrowsreturnederror"]], "polars.from_dict": [[88, "polars-from-dict"]], "polars.scan_ndjson": [[113, "polars-scan-ndjson"]], "polars.zeros": [[124, "polars-zeros"]], "polars.testing.assert_frame_equal": [[117, "polars-testing-assert-frame-equal"]], "polars.DataFrame.drop": [[135, "polars-dataframe-drop"]], "polars.exceptions.InvalidOperationError": [[76, "polars-exceptions-invalidoperationerror"]], "polars.DataFrame.__dataframe__": [[127, "polars-dataframe-dataframe"]], "polars.testing.parametric.column": [[119, "polars-testing-parametric-column"]], "polars.threadpool_size": [[123, "polars-threadpool-size"]], "polars.exceptions.ArrowError": [[72, "polars-exceptions-arrowerror"]], "polars.exceptions.ColumnNotFoundError": [[73, "polars-exceptions-columnnotfounderror"]], "polars.read_parquet_schema": [[109, "polars-read-parquet-schema"]], "polars.read_avro": [[98, "polars-read-avro"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[96, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.exceptions.SchemaFieldNotFoundError": [[82, "polars-exceptions-schemafieldnotfounderror"]], "polars.read_database": [[101, "polars-read-database"]], "polars.scan_ipc": [[112, "polars-scan-ipc"]], "polars.scan_csv": [[110, "polars-scan-csv"]], "polars.DataFrame.columns": [[132, "polars-dataframe-columns"]], "polars.exceptions.NoRowsReturnedError": [[78, "polars-exceptions-norowsreturnederror"]], "polars.scan_delta": [[111, "polars-scan-delta"]], "polars.testing.parametric.columns": [[120, "polars-testing-parametric-columns"]], "polars.DataFrame.describe": [[134, "polars-dataframe-describe"]], "polars.date_range": [[70, "polars-date-range"]], "polars.exceptions.SchemaError": [[81, "polars-exceptions-schemaerror"]], "polars.testing.assert_series_equal": [[118, "polars-testing-assert-series-equal"]], "polars.exceptions.DuplicateError": [[75, "polars-exceptions-duplicateerror"]], "polars.enable_string_cache": [[71, "polars-enable-string-cache"]], "polars.from_pandas": [[91, "polars-from-pandas"]], "polars.get_index_type": [[95, "polars-get-index-type"]], "polars.DataFrame.drop_in_place": [[136, "polars-dataframe-drop-in-place"]], "polars.from_dicts": [[89, "polars-from-dicts"]], "polars.read_csv": [[99, "polars-read-csv"]], "Config": [[125, "config"]], "Config options": [[125, "config-options"]], "Config load, save, and current state": [[125, "config-load-save-and-current-state"]], "Use as a context manager": [[125, "use-as-a-context-manager"]], "polars.testing.parametric.dataframes": [[121, "polars-testing-parametric-dataframes"]], "polars.read_delta": [[102, "polars-read-delta"]], "polars.scan_parquet": [[114, "polars-scan-parquet"]], "polars.scan_pyarrow_dataset": [[115, "polars-scan-pyarrow-dataset"]], "polars.DataFrame.clear": [[130, "polars-dataframe-clear"]], "Aggregation": [[126, "aggregation"], [670, "aggregation"], [584, "aggregation"], [251, "aggregation"]], "polars.exceptions.PolarsPanicError": [[79, "polars-exceptions-polarspanicerror"]], "polars.read_ipc_schema": [[105, "polars-read-ipc-schema"]], "polars.from_arrow": [[86, "polars-from-arrow"]], "polars.from_dataframe": [[87, "polars-from-dataframe"]], "polars.DataFrame.corr": [[133, "polars-dataframe-corr"]], "polars.exceptions.ShapeError": [[83, "polars-exceptions-shapeerror"]], "polars.read_excel": [[103, "polars-read-excel"]], "polars.DataFrame.clone": [[131, "polars-dataframe-clone"]], "polars.exceptions.ComputeError": [[74, "polars-exceptions-computeerror"]], "polars.from_repr": [[93, "polars-from-repr"]], "polars.read_ndjson": [[107, "polars-read-ndjson"]], "polars.read_parquet": [[108, "polars-read-parquet"]], "polars.DataFrame.bottom_k": [[129, "polars-dataframe-bottom-k"]], "polars.ones": [[97, "polars-ones"]], "polars.read_csv_batched": [[100, "polars-read-csv-batched"]], "polars.testing.parametric.series": [[122, "polars-testing-parametric-series"]], "polars.Series.search_sorted": [[868, "polars-series-search-sorted"]], "polars.Series.rechunk": [[851, "polars-series-rechunk"]], "polars.Series.lower_bound": [[830, "polars-series-lower-bound"]], "polars.Series.product": [[847, "polars-series-product"]], "polars.Series.shape": [[873, "polars-series-shape"]], "polars.Series.max": [[832, "polars-series-max"]], "polars.Series.sin": [[880, "polars-series-sin"]], "polars.Series.str": [[887, "polars-series-str"]], "polars.Series.set_at_idx": [[871, "polars-series-set-at-idx"]], "polars.Series.new_from_index": [[842, "polars-series-new-from-index"]], "polars.Series.peak_max": [[845, "polars-series-peak-max"]], "polars.Series.str.ends_with": [[893, "polars-series-str-ends-with"]], "polars.Series.rolling_sum": [[864, "polars-series-rolling-sum"]], "polars.Series.slice": [[883, "polars-series-slice"]], "polars.Series.str.decode": [[891, "polars-series-str-decode"]], "polars.Series.sign": [[879, "polars-series-sign"]], "polars.Series.n_chunks": [[837, "polars-series-n-chunks"]], "polars.Series.peak_min": [[846, "polars-series-peak-min"]], "polars.Series.quantile": [[849, "polars-series-quantile"]], "polars.Series.reshape": [[854, "polars-series-reshape"]], "polars.Series.rolling_apply": [[856, "polars-series-rolling-apply"]], "polars.Series.nan_min": [[841, "polars-series-nan-min"]], "polars.Series.rename": [[853, "polars-series-rename"]], "polars.Series.str.encode": [[892, "polars-series-str-encode"]], "polars.Series.series_equal": [[869, "polars-series-series-equal"]], "polars.Series.rolling_max": [[857, "polars-series-rolling-max"]], "polars.Series.str.count_match": [[890, "polars-series-str-count-match"]], "polars.Series.str.explode": [[894, "polars-series-str-explode"]], "polars.Series.str.extract": [[895, "polars-series-str-extract"]], "polars.Series.shrink_dtype": [[876, "polars-series-shrink-dtype"]], "polars.Series.sample": [[867, "polars-series-sample"]], "polars.Series.sinh": [[881, "polars-series-sinh"]], "polars.Series.sqrt": [[885, "polars-series-sqrt"]], "polars.Series.rolling_var": [[865, "polars-series-rolling-var"]], "polars.Series.qcut": [[848, "polars-series-qcut"]], "polars.Series.std": [[886, "polars-series-std"]], "polars.Series.str.concat": [[888, "polars-series-str-concat"]], "polars.Series.null_count": [[843, "polars-series-null-count"]], "polars.Series.rolling_mean": [[858, "polars-series-rolling-mean"]], "polars.Series.rolling_quantile": [[861, "polars-series-rolling-quantile"]], "polars.Series.log10": [[829, "polars-series-log10"]], "polars.Series.shift_and_fill": [[875, "polars-series-shift-and-fill"]], "polars.Series.str.contains": [[889, "polars-series-str-contains"]], "polars.Series.shuffle": [[878, "polars-series-shuffle"]], "polars.Series.set_sorted": [[872, "polars-series-set-sorted"]], "polars.Series.reverse": [[855, "polars-series-reverse"]], "polars.Series.name": [[839, "polars-series-name"]], "polars.Series.median": [[834, "polars-series-median"]], "polars.Series.map_dict": [[831, "polars-series-map-dict"]], "polars.Series.pct_change": [[844, "polars-series-pct-change"]], "polars.Series.mode": [[836, "polars-series-mode"]], "polars.Series.log": [[828, "polars-series-log"]], "polars.Series.mean": [[833, "polars-series-mean"]], "polars.Series.rolling_median": [[859, "polars-series-rolling-median"]], "polars.Series.rolling_std": [[863, "polars-series-rolling-std"]], "polars.Series.round": [[866, "polars-series-round"]], "polars.Series.set": [[870, "polars-series-set"]], "polars.Series.shift": [[874, "polars-series-shift"]], "polars.Series.n_unique": [[838, "polars-series-n-unique"]], "polars.Series.shrink_to_fit": [[877, "polars-series-shrink-to-fit"]], "polars.Series.sort": [[884, "polars-series-sort"]], "polars.Series.str.extract_all": [[896, "polars-series-str-extract-all"]], "polars.Series.reinterpret": [[852, "polars-series-reinterpret"]], "polars.Series.rank": [[850, "polars-series-rank"]], "polars.Series.rolling_min": [[860, "polars-series-rolling-min"]], "polars.Series.skew": [[882, "polars-series-skew"]], "polars.Series.nan_max": [[840, "polars-series-nan-max"]], "polars.Series.min": [[835, "polars-series-min"]], "polars.Series.rolling_skew": [[862, "polars-series-rolling-skew"]], "polars.Series.get_chunks": [[799, "polars-series-get-chunks"]], "polars.Series.is_unique": [[822, "polars-series-is-unique"]], "polars.Series.entropy": [[786, "polars-series-entropy"]], "polars.Series.dt.min": [[764, "polars-series-dt-min"]], "polars.Series.dt.timestamp": [[779, "polars-series-dt-timestamp"]], "polars.Series.is_null": [[818, "polars-series-is-null"]], "polars.Series.ewm_std": [[789, "polars-series-ewm-std"]], "polars.Series.is_finite": [[810, "polars-series-is-finite"]], "polars.Series.dt.quarter": [[772, "polars-series-dt-quarter"]], "polars.Series.dt.seconds": [[776, "polars-series-dt-seconds"]], "polars.Series.is_utf8": [[823, "polars-series-is-utf8"]], "polars.Series.floor": [[798, "polars-series-floor"]], "polars.Series.dt.microseconds": [[761, "polars-series-dt-microseconds"]], "polars.Series.is_boolean": [[807, "polars-series-is-boolean"]], "polars.Series.dt.time": [[778, "polars-series-dt-time"]], "polars.Series.interpolate": [[805, "polars-series-interpolate"]], "polars.Series.is_nan": [[815, "polars-series-is-nan"]], "polars.Series.kurtosis": [[825, "polars-series-kurtosis"]], "polars.Series.is_first": [[811, "polars-series-is-first"]], "polars.Series.dtype": [[785, "polars-series-dtype"]], "polars.Series.dt.strftime": [[777, "polars-series-dt-strftime"]], "polars.Series.dt.offset_by": [[770, "polars-series-dt-offset-by"]], "polars.Series.dt.minute": [[765, "polars-series-dt-minute"]], "polars.Series.dt.year": [[784, "polars-series-dt-year"]], "polars.Series.dt.nanoseconds": [[769, "polars-series-dt-nanoseconds"]], "polars.Series.head": [[802, "polars-series-head"]], "polars.Series.filter": [[796, "polars-series-filter"]], "polars.Series.dt.nanosecond": [[768, "polars-series-dt-nanosecond"]], "polars.Series.fill_nan": [[794, "polars-series-fill-nan"]], "polars.Series.is_duplicated": [[808, "polars-series-is-duplicated"]], "polars.Series.dt.median": [[759, "polars-series-dt-median"]], "polars.Series.dt.with_time_unit": [[783, "polars-series-dt-with-time-unit"]], "polars.Series.is_numeric": [[819, "polars-series-is-numeric"]], "polars.Series.inner_dtype": [[804, "polars-series-inner-dtype"]], "polars.Series.flags": [[797, "polars-series-flags"]], "polars.Series.has_validity": [[800, "polars-series-has-validity"]], "polars.Series.dt.minutes": [[766, "polars-series-dt-minutes"]], "polars.Series.dt.weekday": [[782, "polars-series-dt-weekday"]], "polars.Series.is_not_null": [[817, "polars-series-is-not-null"]], "polars.Series.ewm_var": [[790, "polars-series-ewm-var"]], "polars.Series.dt.milliseconds": [[763, "polars-series-dt-milliseconds"]], "polars.Series.dt.round": [[774, "polars-series-dt-round"]], "polars.Series.dt.microsecond": [[760, "polars-series-dt-microsecond"]], "polars.Series.item": [[824, "polars-series-item"]], "polars.Series.ewm_mean": [[788, "polars-series-ewm-mean"]], "polars.Series.is_temporal": [[821, "polars-series-is-temporal"]], "polars.Series.is_sorted": [[820, "polars-series-is-sorted"]], "polars.Series.exp": [[791, "polars-series-exp"]], "polars.Series.hash": [[801, "polars-series-hash"]], "polars.Series.is_not_nan": [[816, "polars-series-is-not-nan"]], "polars.Series.extend_constant": [[793, "polars-series-extend-constant"]], "polars.Series.dt.truncate": [[780, "polars-series-dt-truncate"]], "polars.Series.is_in": [[813, "polars-series-is-in"]], "polars.Series.len": [[826, "polars-series-len"]], "polars.Series.fill_null": [[795, "polars-series-fill-null"]], "polars.Series.dt.week": [[781, "polars-series-dt-week"]], "polars.Series.is_infinite": [[814, "polars-series-is-infinite"]], "polars.Series.estimated_size": [[787, "polars-series-estimated-size"]], "polars.Series.dt.second": [[775, "polars-series-dt-second"]], "polars.Series.is_float": [[812, "polars-series-is-float"]], "polars.Series.limit": [[827, "polars-series-limit"]], "polars.Series.dt.replace_time_zone": [[773, "polars-series-dt-replace-time-zone"]], "polars.Series.explode": [[792, "polars-series-explode"]], "polars.Series.dt.month": [[767, "polars-series-dt-month"]], "polars.Series.dt.ordinal_day": [[771, "polars-series-dt-ordinal-day"]], "polars.Series.is_between": [[806, "polars-series-is-between"]], "polars.Series.is_empty": [[809, "polars-series-is-empty"]], "polars.Series.hist": [[803, "polars-series-hist"]], "polars.Series.dt.millisecond": [[762, "polars-series-dt-millisecond"]], "polars.Series.arr.tail": [[711, "polars-series-arr-tail"]], "polars.Series.cummax": [[733, "polars-series-cummax"]], "polars.Series.arr.max": [[703, "polars-series-arr-max"]], "polars.Series.bin.ends_with": [[718, "polars-series-bin-ends-with"]], "polars.Series.arr.take": [[712, "polars-series-arr-take"]], "polars.Series.drop_nans": [[742, "polars-series-drop-nans"]], "polars.Series.dt.mean": [[758, "polars-series-dt-mean"]], "polars.Series.cat.set_ordering": [[723, "polars-series-cat-set-ordering"]], "polars.Series.cosh": [[732, "polars-series-cosh"]], "polars.Series.dt.date": [[748, "polars-series-dt-date"]], "polars.Series.arr.min": [[705, "polars-series-arr-min"]], "polars.Series.arr.mean": [[704, "polars-series-arr-mean"]], "polars.Series.arr.head": [[699, "polars-series-arr-head"]], "polars.Series.arr.explode": [[696, "polars-series-arr-explode"]], "polars.Series.arr.arg_min": [[690, "polars-series-arr-arg-min"]], "polars.Series.dt.cast_time_unit": [[745, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.epoch": [[752, "polars-series-dt-epoch"]], "polars.Series.describe": [[739, "polars-series-describe"]], "polars.Series.dt": [[744, "polars-series-dt"]], "polars.Series.arr.get": [[698, "polars-series-arr-get"]], "polars.Series.arr.last": [[701, "polars-series-arr-last"]], "polars.Series.arr.sort": [[709, "polars-series-arr-sort"]], "polars.Series.bin.decode": [[716, "polars-series-bin-decode"]], "polars.Series.cut": [[738, "polars-series-cut"]], "polars.Series.arr.slice": [[708, "polars-series-arr-slice"]], "polars.Series.dt.day": [[750, "polars-series-dt-day"]], "polars.Series.dt.hour": [[753, "polars-series-dt-hour"]], "polars.Series.dt.combine": [[746, "polars-series-dt-combine"]], "polars.Series.clip_min": [[729, "polars-series-clip-min"]], "polars.Series.arr.shift": [[707, "polars-series-arr-shift"]], "polars.Series.arr.contains": [[692, "polars-series-arr-contains"]], "polars.Series.dot": [[741, "polars-series-dot"]], "polars.Series.arr.join": [[700, "polars-series-arr-join"]], "polars.Series.dt.is_leap_year": [[755, "polars-series-dt-is-leap-year"]], "polars.Series.dt.hours": [[754, "polars-series-dt-hours"]], "polars.Series.arr.to_struct": [[713, "polars-series-arr-to-struct"]], "polars.Series.arr.concat": [[691, "polars-series-arr-concat"]], "polars.Series.cummin": [[734, "polars-series-cummin"]], "polars.Series.dt.convert_time_zone": [[747, "polars-series-dt-convert-time-zone"]], "polars.Series.clone": [[730, "polars-series-clone"]], "polars.Series.dt.datetime": [[749, "polars-series-dt-datetime"]], "polars.Series.dt.max": [[757, "polars-series-dt-max"]], "polars.Series.cumulative_eval": [[737, "polars-series-cumulative-eval"]], "polars.Series.bin.starts_with": [[719, "polars-series-bin-starts-with"]], "polars.Series.chunk_lengths": [[725, "polars-series-chunk-lengths"]], "polars.Series.bin.contains": [[715, "polars-series-bin-contains"]], "polars.Series.bottom_k": [[720, "polars-series-bottom-k"]], "polars.Series.cast": [[721, "polars-series-cast"]], "polars.Series.dt.days": [[751, "polars-series-dt-days"]], "polars.Series.arr.eval": [[695, "polars-series-arr-eval"]], "polars.Series.cumprod": [[735, "polars-series-cumprod"]], "polars.Series.cos": [[731, "polars-series-cos"]], "polars.Series.cat": [[722, "polars-series-cat"]], "polars.Series.clip": [[727, "polars-series-clip"]], "polars.Series.drop_nulls": [[743, "polars-series-drop-nulls"]], "polars.Series.clip_max": [[728, "polars-series-clip-max"]], "polars.Series.arr.lengths": [[702, "polars-series-arr-lengths"]], "polars.Series.arr.unique": [[714, "polars-series-arr-unique"]], "polars.Series.ceil": [[724, "polars-series-ceil"]], "polars.Series.arr.diff": [[694, "polars-series-arr-diff"]], "polars.Series.arr.count_match": [[693, "polars-series-arr-count-match"]], "polars.Series.bin.encode": [[717, "polars-series-bin-encode"]], "polars.Series.clear": [[726, "polars-series-clear"]], "polars.Series.arr.reverse": [[706, "polars-series-arr-reverse"]], "polars.Series.cumsum": [[736, "polars-series-cumsum"]], "polars.Series.diff": [[740, "polars-series-diff"]], "polars.Series.arr.first": [[697, "polars-series-arr-first"]], "polars.Series.dt.iso_year": [[756, "polars-series-dt-iso-year"]], "polars.Series.arr.sum": [[710, "polars-series-arr-sum"]], "polars.Series.take": [[924, "polars-series-take"]], "Categories": [[948, "categories"], [567, "categories"]], "polars.Series.str.zfill": [[917, "polars-series-str-zfill"]], "polars.Series.to_arrow": [[929, "polars-series-to-arrow"]], "polars.Series.str.starts_with": [[912, "polars-series-str-starts-with"]], "polars.Series.to_dummies": [[930, "polars-series-to-dummies"]], "polars.Series.tan": [[926, "polars-series-tan"]], "polars.Series.to_init_repr": [[932, "polars-series-to-init-repr"]], "SQL": [[959, "sql"]], "Methods": [[959, "methods"]], "polars.Series.str.rstrip": [[907, "polars-series-str-rstrip"]], "polars.Series.to_pandas": [[935, "polars-series-to-pandas"]], "Export": [[951, "export"], [244, "export"]], "polars.Series.struct.field": [[918, "polars-series-struct-field"]], "Temporal": [[958, "temporal"], [579, "temporal"], [249, "temporal"]], "polars.Series.str.to_uppercase": [[916, "polars-series-str-to-uppercase"]], "polars.Series.str.replace": [[904, "polars-series-str-replace"]], "polars.Series.str.rjust": [[906, "polars-series-str-rjust"]], "polars.Series.str.strptime": [[914, "polars-series-str-strptime"]], "polars.Series.top_k": [[937, "polars-series-top-k"]], "Series": [[952, "series"]], "Miscellaneous": [[954, "miscellaneous"], [668, "miscellaneous"], [581, "miscellaneous"], [574, "miscellaneous"], [247, "miscellaneous"]], "List": [[953, "list"], [572, "list"]], "Descriptive": [[950, "descriptive"], [665, "descriptive"], [243, "descriptive"]], "Boolean": [[947, "boolean"], [566, "boolean"]], "Struct": [[957, "struct"], [578, "struct"]], "polars.Series.str.strip": [[913, "polars-series-str-strip"]], "Computation": [[949, "computation"], [569, "computation"], [242, "computation"]], "Utils": [[961, "utils"]], "polars.Series.str.split_exact": [[910, "polars-series-str-split-exact"]], "polars.Series.zip_with": [[944, "polars-series-zip-with"]], "polars.Series.str.n_chars": [[902, "polars-series-str-n-chars"]], "polars.Series.str.split": [[909, "polars-series-str-split"]], "polars.Series.unique": [[938, "polars-series-unique"]], "polars.Series.upper_bound": [[940, "polars-series-upper-bound"]], "String": [[956, "string"], [577, "string"]], "Testing": [[960, "testing"]], "Asserts": [[960, "asserts"]], "Property-based testing": [[960, "property-based-testing"]], "Strategies": [[960, "strategies"]], "Strategy helpers": [[960, "strategy-helpers"]], "polars.Series.to_list": [[933, "polars-series-to-list"]], "polars.Series.view": [[943, "polars-series-view"]], "polars.Series.str.parse_int": [[903, "polars-series-str-parse-int"]], "polars.Series.str.slice": [[908, "polars-series-str-slice"]], "polars.Series.take_every": [[925, "polars-series-take-every"]], "polars.Series.tanh": [[927, "polars-series-tanh"]], "polars.Series.str.lengths": [[899, "polars-series-str-lengths"]], "polars.Series.str.json_extract": [[897, "polars-series-str-json-extract"]], "Manipulation/selection": [[955, "manipulation-selection"], [669, "manipulation-selection"], [575, "manipulation-selection"], [248, "manipulation-selection"]], "polars.Series.str.lstrip": [[901, "polars-series-str-lstrip"]], "polars.Series.tail": [[923, "polars-series-tail"]], "polars.Series.str.json_path_match": [[898, "polars-series-str-json-path-match"]], "polars.Series.struct.fields": [[919, "polars-series-struct-fields"]], "polars.Series.str.replace_all": [[905, "polars-series-str-replace-all"]], "polars.Series.struct.rename_fields": [[920, "polars-series-struct-rename-fields"]], "polars.Series.unique_counts": [[939, "polars-series-unique-counts"]], "polars.Series.value_counts": [[941, "polars-series-value-counts"]], "polars.Series.str.ljust": [[900, "polars-series-str-ljust"]], "polars.Series.var": [[942, "polars-series-var"]], "polars.Series.time_unit": [[928, "polars-series-time-unit"]], "polars.Series.to_numpy": [[934, "polars-series-to-numpy"]], "Binary": [[946, "binary"], [565, "binary"], [576, "binary"]], "polars.Series.to_frame": [[931, "polars-series-to-frame"]], "polars.Series.str.splitn": [[911, "polars-series-str-splitn"]], "polars.Series.str.to_lowercase": [[915, "polars-series-str-to-lowercase"]], "polars.Series.sum": [[922, "polars-series-sum"]], "polars.Series.to_physical": [[936, "polars-series-to-physical"]], "polars.Series.struct.unnest": [[921, "polars-series-struct-unnest"]], "Attributes": [[945, "attributes"], [664, "attributes"], [241, "attributes"]], "polars.Series.apply": [[676, "polars-series-apply"]], "polars.LazyFrame.with_context": [[646, "polars-lazyframe-with-context"]], "polars.Series.abs": [[671, "polars-series-abs"]], "polars.LazyFrame.read_json": [[623, "polars-lazyframe-read-json"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[659, "polars-lazyframe-groupby-lazygroupby-min"]], "LazyFrame": [[667, "lazyframe"]], "polars.Series.arr.arg_max": [[689, "polars-series-arr-arg-max"]], "polars.Series.arg_sort": [[685, "polars-series-arg-sort"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[650, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[655, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[656, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[653, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.LazyFrame.slice": [[633, "polars-lazyframe-slice"]], "polars.Series.arctan": [[681, "polars-series-arctan"]], "polars.LazyFrame.shift_and_fill": [[629, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.update": [[642, "polars-lazyframe-update"]], "polars.Series.arccosh": [[678, "polars-series-arccosh"]], "polars.LazyFrame.quantile": [[622, "polars-lazyframe-quantile"]], "polars.LazyFrame.with_row_count": [[647, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.select": [[627, "polars-lazyframe-select"]], "polars.LazyFrame.profile": [[621, "polars-lazyframe-profile"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[660, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[663, "polars-lazyframe-groupby-lazygroupby-tail"]], "GroupBy": [[666, "groupby"], [245, "groupby"]], "polars.Series.arg_max": [[683, "polars-series-arg-max"]], "polars.Series.arg_unique": [[687, "polars-series-arg-unique"]], "polars.LazyFrame.sort": [[634, "polars-lazyframe-sort"]], "polars.LazyFrame.std": [[635, "polars-lazyframe-std"]], "Read/write logical plan": [[668, "read-write-logical-plan"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[651, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.LazyFrame.sink_parquet": [[632, "polars-lazyframe-sink-parquet"]], "polars.Series.arcsinh": [[680, "polars-series-arcsinh"]], "polars.LazyFrame.tail": [[637, "polars-lazyframe-tail"]], "polars.LazyFrame.shift": [[628, "polars-lazyframe-shift"]], "polars.LazyFrame.rename": [[624, "polars-lazyframe-rename"]], "polars.Series.all": [[673, "polars-series-all"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[658, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.Series.arcsin": [[679, "polars-series-arcsin"]], "polars.LazyFrame.var": [[643, "polars-lazyframe-var"]], "polars.LazyFrame.with_columns": [[645, "polars-lazyframe-with-columns"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[661, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.Series.arccos": [[677, "polars-series-arccos"]], "polars.LazyFrame.show_graph": [[630, "polars-lazyframe-show-graph"]], "polars.LazyFrame.sum": [[636, "polars-lazyframe-sum"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[652, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.LazyFrame.reverse": [[625, "polars-lazyframe-reverse"]], "polars.Series.append": [[675, "polars-series-append"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[657, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.LazyFrame.width": [[644, "polars-lazyframe-width"]], "polars.Series.arctanh": [[682, "polars-series-arctanh"]], "polars.Series.arg_min": [[684, "polars-series-arg-min"]], "polars.LazyFrame.top_k": [[639, "polars-lazyframe-top-k"]], "polars.LazyFrame.unique": [[640, "polars-lazyframe-unique"]], "polars.LazyFrame.take_every": [[638, "polars-lazyframe-take-every"]], "polars.Series.arg_true": [[686, "polars-series-arg-true"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[662, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.LazyFrame.sink_ipc": [[631, "polars-lazyframe-sink-ipc"]], "polars.Series.alias": [[672, "polars-series-alias"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[654, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.Series.any": [[674, "polars-series-any"]], "polars.LazyFrame.schema": [[626, "polars-lazyframe-schema"]], "polars.LazyFrame.write_json": [[648, "polars-lazyframe-write-json"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[649, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.Series.arr": [[688, "polars-series-arr"]], "polars.LazyFrame.unnest": [[641, "polars-lazyframe-unnest"]], "polars.corr": [[528, "polars-corr"]], "polars.Expr.top_k": [[509, "polars-expr-top-k"]], "polars.median": [[550, "polars-median"]], "polars.groups": [[543, "polars-groups"]], "polars.Expr.str.to_uppercase": [[496, "polars-expr-str-to-uppercase"]], "polars.Expr.tanh": [[507, "polars-expr-tanh"]], "polars.count": [[529, "polars-count"]], "polars.apply": [[520, "polars-apply"]], "polars.cov": [[530, "polars-cov"]], "polars.Expr.sum": [[502, "polars-expr-sum"]], "polars.lit": [[546, "polars-lit"]], "polars.Expr.struct.rename_fields": [[499, "polars-expr-struct-rename-fields"]], "polars.Expr.struct.field": [[498, "polars-expr-struct-field"]], "polars.Expr.value_counts": [[514, "polars-expr-value-counts"]], "polars.coalesce": [[524, "polars-coalesce"]], "polars.Expr.str.split": [[489, "polars-expr-str-split"]], "polars.Expr.str.replace": [[484, "polars-expr-str-replace"]], "polars.Expr.suffix": [[501, "polars-expr-suffix"]], "polars.Expr.str.strptime": [[494, "polars-expr-str-strptime"]], "polars.arange": [[521, "polars-arange"]], "polars.Expr.str.strip": [[493, "polars-expr-str-strip"]], "polars.head": [[544, "polars-head"]], "polars.Expr.str.starts_with": [[492, "polars-expr-str-starts-with"]], "polars.datetime": [[535, "polars-datetime"]], "polars.Expr.take": [[504, "polars-expr-take"]], "polars.max": [[548, "polars-max"]], "polars.Expr.unique_counts": [[512, "polars-expr-unique-counts"]], "polars.cumreduce": [[532, "polars-cumreduce"]], "polars.Expr.take_every": [[505, "polars-expr-take-every"]], "polars.Expr.where": [[516, "polars-expr-where"]], "polars.min": [[551, "polars-min"]], "polars.Expr.var": [[515, "polars-expr-var"]], "polars.mean": [[549, "polars-mean"]], "polars.Expr.truediv": [[510, "polars-expr-truediv"]], "polars.Expr.str.splitn": [[491, "polars-expr-str-splitn"]], "polars.Expr.tan": [[506, "polars-expr-tan"]], "polars.avg": [[523, "polars-avg"]], "polars.from_epoch": [[542, "polars-from-epoch"]], "polars.Expr.str.rstrip": [[487, "polars-expr-str-rstrip"]], "polars.Expr.str.replace_all": [[485, "polars-expr-str-replace-all"]], "polars.date": [[534, "polars-date"]], "polars.Expr.sub": [[500, "polars-expr-sub"]], "polars.first": [[539, "polars-first"]], "polars.Expr.str.parse_int": [[483, "polars-expr-str-parse-int"]], "polars.any": [[519, "polars-any"]], "polars.col": [[525, "polars-col"]], "polars.Expr.to_physical": [[508, "polars-expr-to-physical"]], "polars.Expr.upper_bound": [[513, "polars-expr-upper-bound"]], "polars.format": [[541, "polars-format"]], "polars.Expr.str.zfill": [[497, "polars-expr-str-zfill"]], "polars.cumfold": [[531, "polars-cumfold"]], "polars.element": [[537, "polars-element"]], "polars.duration": [[536, "polars-duration"]], "polars.all": [[518, "polars-all"]], "polars.Expr.unique": [[511, "polars-expr-unique"]], "polars.Expr.str.slice": [[488, "polars-expr-str-slice"]], "polars.Expr.str.to_lowercase": [[495, "polars-expr-str-to-lowercase"]], "polars.cumsum": [[533, "polars-cumsum"]], "polars.fold": [[540, "polars-fold"]], "polars.Expr.str.rjust": [[486, "polars-expr-str-rjust"]], "polars.list": [[545, "polars-list"]], "polars.Expr.tail": [[503, "polars-expr-tail"]], "polars.Expr.str.split_exact": [[490, "polars-expr-str-split-exact"]], "polars.concat_str": [[527, "polars-concat-str"]], "polars.exclude": [[538, "polars-exclude"]], "polars.map": [[547, "polars-map"]], "polars.arg_sort_by": [[522, "polars-arg-sort-by"]], "polars.Expr.xor": [[517, "polars-expr-xor"]], "polars.concat_list": [[526, "polars-concat-list"]], "polars.Expr.or_": [[427, "polars-expr-or"]], "polars.Expr.prefix": [[432, "polars-expr-prefix"]], "polars.Expr.shrink_dtype": [[457, "polars-expr-shrink-dtype"]], "polars.Expr.min": [[418, "polars-expr-min"]], "polars.Expr.mode": [[420, "polars-expr-mode"]], "polars.Expr.round": [[451, "polars-expr-round"]], "polars.Expr.sinh": [[461, "polars-expr-sinh"]], "polars.Expr.search_sorted": [[453, "polars-expr-search-sorted"]], "polars.Expr.quantile": [[434, "polars-expr-quantile"]], "polars.Expr.meta.root_names": [[416, "polars-expr-meta-root-names"]], "polars.Expr.reinterpret": [[437, "polars-expr-reinterpret"]], "polars.Expr.str.explode": [[474, "polars-expr-str-explode"]], "polars.Expr.shift_and_fill": [[456, "polars-expr-shift-and-fill"]], "polars.Expr.product": [[433, "polars-expr-product"]], "polars.Expr.str.json_path_match": [[478, "polars-expr-str-json-path-match"]], "polars.Expr.mul": [[421, "polars-expr-mul"]], "polars.Expr.str.extract": [[475, "polars-expr-str-extract"]], "polars.Expr.reshape": [[439, "polars-expr-reshape"]], "polars.Expr.std": [[467, "polars-expr-std"]], "polars.Expr.set_sorted": [[454, "polars-expr-set-sorted"]], "polars.Expr.reverse": [[440, "polars-expr-reverse"]], "polars.Expr.sign": [[459, "polars-expr-sign"]], "polars.Expr.skew": [[462, "polars-expr-skew"]], "polars.Expr.meta.undo_aliases": [[417, "polars-expr-meta-undo-aliases"]], "polars.Expr.pct_change": [[429, "polars-expr-pct-change"]], "polars.Expr.mod": [[419, "polars-expr-mod"]], "polars.Expr.sort": [[464, "polars-expr-sort"]], "polars.Expr.str.n_chars": [[482, "polars-expr-str-n-chars"]], "polars.Expr.rolling_sum": [[449, "polars-expr-rolling-sum"]], "polars.Expr.str.encode": [[472, "polars-expr-str-encode"]], "polars.Expr.n_unique": [[422, "polars-expr-n-unique"]], "polars.Expr.nan_min": [[424, "polars-expr-nan-min"]], "polars.Expr.rolling_median": [[444, "polars-expr-rolling-median"]], "polars.Expr.rolling_std": [[448, "polars-expr-rolling-std"]], "polars.Expr.rolling_apply": [[441, "polars-expr-rolling-apply"]], "polars.Expr.meta.output_name": [[414, "polars-expr-meta-output-name"]], "polars.Expr.sqrt": [[466, "polars-expr-sqrt"]], "polars.Expr.rolling_max": [[442, "polars-expr-rolling-max"]], "polars.Expr.str.decode": [[471, "polars-expr-str-decode"]], "polars.Expr.pow": [[431, "polars-expr-pow"]], "polars.Expr.rolling_min": [[445, "polars-expr-rolling-min"]], "polars.Expr.slice": [[463, "polars-expr-slice"]], "polars.Expr.str.concat": [[468, "polars-expr-str-concat"]], "polars.Expr.str.contains": [[469, "polars-expr-str-contains"]], "polars.Expr.str.lengths": [[479, "polars-expr-str-lengths"]], "polars.Expr.repeat_by": [[438, "polars-expr-repeat-by"]], "polars.Expr.rechunk": [[436, "polars-expr-rechunk"]], "polars.Expr.shift": [[455, "polars-expr-shift"]], "polars.Expr.str.ljust": [[480, "polars-expr-str-ljust"]], "polars.Expr.over": [[428, "polars-expr-over"]], "polars.Expr.rolling_var": [[450, "polars-expr-rolling-var"]], "polars.Expr.str.count_match": [[470, "polars-expr-str-count-match"]], "polars.Expr.sin": [[460, "polars-expr-sin"]], "polars.Expr.null_count": [[426, "polars-expr-null-count"]], "polars.Expr.sort_by": [[465, "polars-expr-sort-by"]], "polars.Expr.str.lstrip": [[481, "polars-expr-str-lstrip"]], "polars.Expr.pipe": [[430, "polars-expr-pipe"]], "polars.Expr.rolling_skew": [[447, "polars-expr-rolling-skew"]], "polars.Expr.shuffle": [[458, "polars-expr-shuffle"]], "polars.Expr.ne": [[425, "polars-expr-ne"]], "polars.Expr.str.json_extract": [[477, "polars-expr-str-json-extract"]], "polars.Expr.str.ends_with": [[473, "polars-expr-str-ends-with"]], "polars.Expr.meta.pop": [[415, "polars-expr-meta-pop"]], "polars.Expr.rolling_quantile": [[446, "polars-expr-rolling-quantile"]], "polars.Expr.nan_max": [[423, "polars-expr-nan-max"]], "polars.Expr.str.extract_all": [[476, "polars-expr-str-extract-all"]], "polars.Expr.rank": [[435, "polars-expr-rank"]], "polars.Expr.sample": [[452, "polars-expr-sample"]], "polars.Expr.rolling_mean": [[443, "polars-expr-rolling-mean"]], "polars.Expr.meta.has_multiple_outputs": [[412, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.dt.offset_by": [[345, "polars-expr-dt-offset-by"]], "polars.Expr.first": [[372, "polars-expr-first"]], "polars.Expr.floordiv": [[375, "polars-expr-floordiv"]], "polars.Expr.is_infinite": [[388, "polars-expr-is-infinite"]], "polars.Expr.limit": [[400, "polars-expr-limit"]], "polars.Expr.ewm_mean": [[362, "polars-expr-ewm-mean"]], "polars.Expr.dt.second": [[350, "polars-expr-dt-second"]], "polars.Expr.dt.with_time_unit": [[358, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.timestamp": [[354, "polars-expr-dt-timestamp"]], "polars.Expr.keep_name": [[395, "polars-expr-keep-name"]], "polars.Expr.inspect": [[381, "polars-expr-inspect"]], "polars.Expr.is_finite": [[385, "polars-expr-is-finite"]], "polars.Expr.is_nan": [[389, "polars-expr-is-nan"]], "polars.Expr.dt.replace_time_zone": [[348, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.weekday": [[357, "polars-expr-dt-weekday"]], "polars.Expr.flatten": [[373, "polars-expr-flatten"]], "polars.Expr.forward_fill": [[376, "polars-expr-forward-fill"]], "polars.Expr.len": [[399, "polars-expr-len"]], "polars.Expr.hash": [[379, "polars-expr-hash"]], "polars.Expr.entropy": [[360, "polars-expr-entropy"]], "polars.Expr.interpolate": [[382, "polars-expr-interpolate"]], "polars.Expr.last": [[397, "polars-expr-last"]], "polars.Expr.list": [[401, "polars-expr-list"]], "polars.Expr.map_dict": [[408, "polars-expr-map-dict"]], "polars.Expr.is_unique": [[394, "polars-expr-is-unique"]], "polars.Expr.filter": [[371, "polars-expr-filter"]], "polars.Expr.ewm_var": [[364, "polars-expr-ewm-var"]], "polars.Expr.meta.is_regex_projection": [[413, "polars-expr-meta-is-regex-projection"]], "polars.Expr.fill_null": [[370, "polars-expr-fill-null"]], "polars.Expr.dt.round": [[349, "polars-expr-dt-round"]], "polars.Expr.eq": [[361, "polars-expr-eq"]], "polars.Expr.is_not": [[390, "polars-expr-is-not"]], "polars.Expr.gt": [[378, "polars-expr-gt"]], "polars.Expr.is_not_null": [[392, "polars-expr-is-not-null"]], "polars.Expr.le": [[398, "polars-expr-le"]], "polars.Expr.map": [[406, "polars-expr-map"]], "polars.Expr.map_alias": [[407, "polars-expr-map-alias"]], "polars.Expr.is_null": [[393, "polars-expr-is-null"]], "polars.Expr.dt.time": [[353, "polars-expr-dt-time"]], "polars.Expr.dt.truncate": [[355, "polars-expr-dt-truncate"]], "polars.Expr.fill_nan": [[369, "polars-expr-fill-nan"]], "polars.Expr.is_duplicated": [[384, "polars-expr-is-duplicated"]], "polars.Expr.is_first": [[386, "polars-expr-is-first"]], "polars.Expr.extend_constant": [[368, "polars-expr-extend-constant"]], "polars.Expr.mean": [[410, "polars-expr-mean"]], "polars.Expr.median": [[411, "polars-expr-median"]], "polars.Expr.head": [[380, "polars-expr-head"]], "polars.Expr.lt": [[405, "polars-expr-lt"]], "polars.Expr.dt.ordinal_day": [[346, "polars-expr-dt-ordinal-day"]], "polars.Expr.explode": [[367, "polars-expr-explode"]], "polars.Expr.log10": [[403, "polars-expr-log10"]], "polars.Expr.max": [[409, "polars-expr-max"]], "polars.Expr.dt.week": [[356, "polars-expr-dt-week"]], "polars.Expr.is_not_nan": [[391, "polars-expr-is-not-nan"]], "polars.Expr.dt.quarter": [[347, "polars-expr-dt-quarter"]], "polars.Expr.exclude": [[365, "polars-expr-exclude"]], "polars.Expr.dt.year": [[359, "polars-expr-dt-year"]], "polars.Expr.kurtosis": [[396, "polars-expr-kurtosis"]], "polars.Expr.lower_bound": [[404, "polars-expr-lower-bound"]], "polars.Expr.ewm_std": [[363, "polars-expr-ewm-std"]], "polars.Expr.ge": [[377, "polars-expr-ge"]], "polars.Expr.is_between": [[383, "polars-expr-is-between"]], "polars.Expr.floor": [[374, "polars-expr-floor"]], "polars.Expr.dt.strftime": [[352, "polars-expr-dt-strftime"]], "polars.Expr.dt.seconds": [[351, "polars-expr-dt-seconds"]], "polars.Expr.is_in": [[387, "polars-expr-is-in"]], "polars.Expr.exp": [[366, "polars-expr-exp"]], "polars.Expr.log": [[402, "polars-expr-log"]], "polars.Expr.dt.microseconds": [[337, "polars-expr-dt-microseconds"]], "polars.Expr.arr.to_struct": [[296, "polars-expr-arr-to-struct"]], "polars.Expr.count": [[313, "polars-expr-count"]], "polars.Expr.dt.day": [[329, "polars-expr-dt-day"]], "polars.Expr.arr.unique": [[297, "polars-expr-arr-unique"]], "polars.Expr.arr.head": [[282, "polars-expr-arr-head"]], "polars.Expr.cumsum": [[318, "polars-expr-cumsum"]], "polars.Expr.clip_max": [[309, "polars-expr-clip-max"]], "polars.Expr.cumcount": [[314, "polars-expr-cumcount"]], "polars.Expr.dt.millisecond": [[338, "polars-expr-dt-millisecond"]], "polars.Expr.dt.minute": [[340, "polars-expr-dt-minute"]], "polars.Expr.arr.shift": [[290, "polars-expr-arr-shift"]], "polars.Expr.cumprod": [[317, "polars-expr-cumprod"]], "polars.Expr.ceil": [[307, "polars-expr-ceil"]], "polars.Expr.dot": [[321, "polars-expr-dot"]], "polars.Expr.arr.eval": [[278, "polars-expr-arr-eval"]], "polars.Expr.arr.first": [[280, "polars-expr-arr-first"]], "polars.Expr.cummin": [[316, "polars-expr-cummin"]], "polars.Expr.drop_nans": [[322, "polars-expr-drop-nans"]], "polars.Expr.arr.mean": [[287, "polars-expr-arr-mean"]], "polars.Expr.arr.take": [[295, "polars-expr-arr-take"]], "polars.Expr.arr.max": [[286, "polars-expr-arr-max"]], "polars.Expr.cast": [[305, "polars-expr-cast"]], "polars.Expr.arr.count_match": [[276, "polars-expr-arr-count-match"]], "polars.Expr.arr.tail": [[294, "polars-expr-arr-tail"]], "polars.Expr.arr.sum": [[293, "polars-expr-arr-sum"]], "polars.Expr.bin.ends_with": [[302, "polars-expr-bin-ends-with"]], "polars.Expr.diff": [[320, "polars-expr-diff"]], "polars.Expr.dt.convert_time_zone": [[326, "polars-expr-dt-convert-time-zone"]], "polars.Expr.arr.last": [[284, "polars-expr-arr-last"]], "polars.Expr.bin.starts_with": [[303, "polars-expr-bin-starts-with"]], "polars.Expr.dt.milliseconds": [[339, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.days": [[330, "polars-expr-dt-days"]], "polars.Expr.arr.join": [[283, "polars-expr-arr-join"]], "polars.Expr.arr.explode": [[279, "polars-expr-arr-explode"]], "polars.Expr.cummax": [[315, "polars-expr-cummax"]], "polars.Expr.dt.epoch": [[331, "polars-expr-dt-epoch"]], "polars.Expr.dt.nanoseconds": [[344, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.cast_time_unit": [[324, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.hours": [[333, "polars-expr-dt-hours"]], "polars.Expr.arr.lengths": [[285, "polars-expr-arr-lengths"]], "polars.Expr.cumulative_eval": [[319, "polars-expr-cumulative-eval"]], "polars.Expr.clip_min": [[310, "polars-expr-clip-min"]], "polars.Expr.dt.month": [[342, "polars-expr-dt-month"]], "polars.Expr.bin.encode": [[301, "polars-expr-bin-encode"]], "polars.Expr.backward_fill": [[298, "polars-expr-backward-fill"]], "polars.Expr.clip": [[308, "polars-expr-clip"]], "polars.Expr.dt.combine": [[325, "polars-expr-dt-combine"]], "polars.Expr.dt.hour": [[332, "polars-expr-dt-hour"]], "polars.Expr.cat.set_ordering": [[306, "polars-expr-cat-set-ordering"]], "polars.Expr.arr.reverse": [[289, "polars-expr-arr-reverse"]], "polars.Expr.bin.decode": [[300, "polars-expr-bin-decode"]], "polars.Expr.cos": [[311, "polars-expr-cos"]], "polars.Expr.dt.microsecond": [[336, "polars-expr-dt-microsecond"]], "polars.Expr.bin.contains": [[299, "polars-expr-bin-contains"]], "polars.Expr.dt.date": [[327, "polars-expr-dt-date"]], "polars.Expr.arr.sort": [[292, "polars-expr-arr-sort"]], "polars.Expr.arr.min": [[288, "polars-expr-arr-min"]], "polars.Expr.bottom_k": [[304, "polars-expr-bottom-k"]], "polars.Expr.dt.datetime": [[328, "polars-expr-dt-datetime"]], "polars.Expr.dt.nanosecond": [[343, "polars-expr-dt-nanosecond"]], "polars.Expr.drop_nulls": [[323, "polars-expr-drop-nulls"]], "polars.Expr.cosh": [[312, "polars-expr-cosh"]], "polars.Expr.dt.iso_year": [[335, "polars-expr-dt-iso-year"]], "polars.Expr.arr.slice": [[291, "polars-expr-arr-slice"]], "polars.Expr.arr.get": [[281, "polars-expr-arr-get"]], "polars.Expr.dt.is_leap_year": [[334, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.minutes": [[341, "polars-expr-dt-minutes"]], "polars.Expr.arr.diff": [[277, "polars-expr-arr-diff"]], "Expressions": [[571, "expressions"]], "polars.LazyFrame.fill_null": [[598, "polars-lazyframe-fill-null"]], "polars.select": [[557, "polars-select"]], "polars.LazyFrame.groupby": [[602, "polars-lazyframe-groupby"]], "polars.quantile": [[554, "polars-quantile"]], "Functions": [[581, "functions"], [570, "functions"]], "Conversion": [[581, "conversion"]], "Eager/Lazy functions": [[581, "eager-lazy-functions"]], "Parallelization": [[581, "parallelization"]], "StringCache": [[581, "stringcache"]], "polars.LazyFrame.bottom_k": [[585, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.explain": [[594, "polars-lazyframe-explain"]], "polars.LazyFrame.columns": [[590, "polars-lazyframe-columns"]], "polars.LazyFrame.groupby_rolling": [[604, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.interpolate": [[607, "polars-lazyframe-interpolate"]], "Window": [[580, "window"]], "polars.sum": [[561, "polars-sum"]], "polars.repeat": [[556, "polars-repeat"]], "polars.pearson_corr": [[553, "polars-pearson-corr"]], "API reference": [[582, "api-reference"]], "polars.LazyFrame.fetch": [[596, "polars-lazyframe-fetch"]], "polars.LazyFrame.fill_nan": [[597, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.max": [[614, "polars-lazyframe-max"]], "polars.LazyFrame.last": [[610, "polars-lazyframe-last"]], "polars.LazyFrame.first": [[600, "polars-lazyframe-first"]], "polars.LazyFrame.merge_sorted": [[618, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.pipe": [[620, "polars-lazyframe-pipe"]], "polars.spearman_rank_corr": [[558, "polars-spearman-rank-corr"]], "polars.LazyFrame.min": [[619, "polars-lazyframe-min"]], "polars.reduce": [[555, "polars-reduce"]], "polars.n_unique": [[552, "polars-n-unique"]], "polars.LazyFrame.collect": [[589, "polars-lazyframe-collect"]], "polars.LazyFrame.drop": [[591, "polars-lazyframe-drop"]], "polars.LazyFrame.dtypes": [[593, "polars-lazyframe-dtypes"]], "polars.std": [[559, "polars-std"]], "polars.LazyFrame.join": [[608, "polars-lazyframe-join"]], "polars.LazyFrame.cache": [[586, "polars-lazyframe-cache"]], "polars.LazyFrame.limit": [[612, "polars-lazyframe-limit"]], "polars.LazyFrame.melt": [[617, "polars-lazyframe-melt"]], "polars.LazyFrame.explode": [[595, "polars-lazyframe-explode"]], "polars.LazyFrame.lazy": [[611, "polars-lazyframe-lazy"]], "polars.LazyFrame.from_json": [[601, "polars-lazyframe-from-json"]], "Columns / names": [[568, "columns-names"]], "polars.struct": [[560, "polars-struct"]], "polars.LazyFrame.drop_nulls": [[592, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.clear": [[587, "polars-lazyframe-clear"]], "polars.LazyFrame.filter": [[599, "polars-lazyframe-filter"]], "Meta": [[573, "meta"]], "polars.tail": [[562, "polars-tail"]], "polars.LazyFrame.join_asof": [[609, "polars-lazyframe-join-asof"]], "Input/output": [[583, "input-output"]], "CSV": [[583, "csv"]], "Feather/ IPC": [[583, "feather-ipc"]], "Parquet": [[583, "parquet"]], "Database": [[583, "database"]], "JSON": [[583, "json"]], "AVRO": [[583, "avro"]], "Excel": [[583, "excel"]], "Delta Lake": [[583, "delta-lake"]], "Datasets": [[583, "datasets"]], "BatchedCsvReader": [[583, "batchedcsvreader"]], "polars.LazyFrame.median": [[616, "polars-lazyframe-median"]], "polars.LazyFrame.head": [[605, "polars-lazyframe-head"]], "polars.when": [[564, "polars-when"]], "Operators": [[576, "operators"]], "Conjunction": [[576, "conjunction"]], "Comparison": [[576, "comparison"]], "Numeric": [[576, "numeric"], [249, "numeric"]], "polars.var": [[563, "polars-var"]], "polars.LazyFrame.groupby_dynamic": [[603, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.clone": [[588, "polars-lazyframe-clone"]], "polars.LazyFrame.map": [[613, "polars-lazyframe-map"]], "polars.LazyFrame.inspect": [[606, "polars-lazyframe-inspect"]], "polars.LazyFrame.mean": [[615, "polars-lazyframe-mean"]], "polars.DataFrame.iter_rows": [[164, "polars-dataframe-iter-rows"]], "polars.DataFrame.n_chunks": [[176, "polars-dataframe-n-chunks"]], "polars.DataFrame.tail": [[202, "polars-dataframe-tail"]], "polars.DataFrame.sum": [[201, "polars-dataframe-sum"]], "polars.DataFrame.shift_and_fill": [[196, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.extend": [[141, "polars-dataframe-extend"]], "polars.DataFrame.sort": [[199, "polars-dataframe-sort"]], "polars.DataFrame.fill_nan": [[142, "polars-dataframe-fill-nan"]], "polars.DataFrame.limit": [[169, "polars-dataframe-limit"]], "polars.DataFrame.interpolate": [[159, "polars-dataframe-interpolate"]], "polars.DataFrame.reverse": [[188, "polars-dataframe-reverse"]], "polars.DataFrame.row": [[189, "polars-dataframe-row"]], "polars.DataFrame.sample": [[191, "polars-dataframe-sample"]], "polars.DataFrame.to_arrow": [[204, "polars-dataframe-to-arrow"]], "polars.DataFrame.slice": [[198, "polars-dataframe-slice"]], "polars.DataFrame.pipe": [[180, "polars-dataframe-pipe"]], "polars.DataFrame.fill_null": [[143, "polars-dataframe-fill-null"]], "polars.DataFrame.hstack": [[157, "polars-dataframe-hstack"]], "polars.DataFrame.mean": [[171, "polars-dataframe-mean"]], "polars.DataFrame.head": [[155, "polars-dataframe-head"]], "polars.DataFrame.take_every": [[203, "polars-dataframe-take-every"]], "polars.DataFrame.groupby_dynamic": [[152, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.replace": [[186, "polars-dataframe-replace"]], "polars.DataFrame.join_asof": [[167, "polars-dataframe-join-asof"]], "polars.DataFrame.shape": [[194, "polars-dataframe-shape"]], "polars.DataFrame.max": [[170, "polars-dataframe-max"]], "polars.DataFrame.filter": [[144, "polars-dataframe-filter"]], "polars.DataFrame.iter_slices": [[165, "polars-dataframe-iter-slices"]], "polars.DataFrame.lazy": [[168, "polars-dataframe-lazy"]], "polars.DataFrame.glimpse": [[150, "polars-dataframe-glimpse"]], "polars.DataFrame.partition_by": [[179, "polars-dataframe-partition-by"]], "polars.DataFrame.replace_at_idx": [[187, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.groupby_rolling": [[153, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.pivot": [[181, "polars-dataframe-pivot"]], "polars.DataFrame.min": [[175, "polars-dataframe-min"]], "polars.DataFrame.n_unique": [[177, "polars-dataframe-n-unique"]], "polars.DataFrame.product": [[182, "polars-dataframe-product"]], "polars.DataFrame.fold": [[146, "polars-dataframe-fold"]], "polars.DataFrame.select": [[193, "polars-dataframe-select"]], "polars.DataFrame.melt": [[173, "polars-dataframe-melt"]], "polars.DataFrame.is_empty": [[161, "polars-dataframe-is-empty"]], "polars.DataFrame.item": [[163, "polars-dataframe-item"]], "polars.DataFrame.join": [[166, "polars-dataframe-join"]], "polars.DataFrame.explode": [[140, "polars-dataframe-explode"]], "polars.DataFrame.median": [[172, "polars-dataframe-median"]], "polars.DataFrame.dtypes": [[138, "polars-dataframe-dtypes"]], "polars.DataFrame.get_column": [[148, "polars-dataframe-get-column"]], "polars.DataFrame.groupby": [[151, "polars-dataframe-groupby"]], "polars.DataFrame.find_idx_by_name": [[145, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.null_count": [[178, "polars-dataframe-null-count"]], "polars.DataFrame.is_duplicated": [[160, "polars-dataframe-is-duplicated"]], "polars.DataFrame.insert_at_idx": [[158, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.hash_rows": [[154, "polars-dataframe-hash-rows"]], "polars.DataFrame.rename": [[185, "polars-dataframe-rename"]], "polars.DataFrame.shift": [[195, "polars-dataframe-shift"]], "polars.DataFrame.shrink_to_fit": [[197, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.to_dict": [[205, "polars-dataframe-to-dict"]], "polars.DataFrame.to_dicts": [[206, "polars-dataframe-to-dicts"]], "polars.DataFrame.estimated_size": [[139, "polars-dataframe-estimated-size"]], "polars.DataFrame.rows": [[190, "polars-dataframe-rows"]], "polars.DataFrame.merge_sorted": [[174, "polars-dataframe-merge-sorted"]], "polars.DataFrame.rechunk": [[184, "polars-dataframe-rechunk"]], "polars.DataFrame.get_columns": [[149, "polars-dataframe-get-columns"]], "polars.DataFrame.quantile": [[183, "polars-dataframe-quantile"]], "polars.DataFrame.schema": [[192, "polars-dataframe-schema"]], "polars.DataFrame.height": [[156, "polars-dataframe-height"]], "polars.DataFrame.is_unique": [[162, "polars-dataframe-is-unique"]], "polars.DataFrame.frame_equal": [[147, "polars-dataframe-frame-equal"]], "polars.DataFrame.std": [[200, "polars-dataframe-std"]], "polars.DataFrame.upsample": [[219, "polars-dataframe-upsample"]], "polars.DataFrame.to_numpy": [[209, "polars-dataframe-to-numpy"]], "Data types": [[249, "data-types"]], "Nested": [[249, "nested"]], "Other": [[249, "other"]], "Exceptions": [[250, "exceptions"]], "polars.DataFrame.with_columns": [[223, "polars-dataframe-with-columns"]], "polars.dataframe.groupby.GroupBy.all": [[227, "polars-dataframe-groupby-groupby-all"]], "polars.DataFrame.to_init_repr": [[208, "polars-dataframe-to-init-repr"]], "polars.Expr.alias": [[255, "polars-expr-alias"]], "polars.Expr.any": [[258, "polars-expr-any"]], "polars.Expr.arg_sort": [[269, "polars-expr-arg-sort"]], "polars.Expr.arg_unique": [[271, "polars-expr-arg-unique"]], "polars.Expr.arr.concat": [[274, "polars-expr-arr-concat"]], "polars.dataframe.groupby.GroupBy.tail": [[240, "polars-dataframe-groupby-groupby-tail"]], "polars.dataframe.groupby.GroupBy.median": [[235, "polars-dataframe-groupby-groupby-median"]], "polars.Expr.arg_true": [[270, "polars-expr-arg-true"]], "polars.dataframe.groupby.GroupBy.head": [[231, "polars-dataframe-groupby-groupby-head"]], "polars.Expr.arccos": [[261, "polars-expr-arccos"]], "polars.DataFrame.var": [[220, "polars-dataframe-var"]], "polars.dataframe.groupby.GroupBy.agg": [[226, "polars-dataframe-groupby-groupby-agg"]], "polars.DataFrame.to_series": [[211, "polars-dataframe-to-series"]], "polars.DataFrame.transpose": [[214, "polars-dataframe-transpose"]], "polars.dataframe.groupby.GroupBy.count": [[229, "polars-dataframe-groupby-groupby-count"]], "polars.DataFrame.top_k": [[213, "polars-dataframe-top-k"]], "polars.Expr.append": [[259, "polars-expr-append"]], "polars.Expr.arccosh": [[262, "polars-expr-arccosh"]], "polars.Expr.arctanh": [[266, "polars-expr-arctanh"]], "polars.Expr.arg_max": [[267, "polars-expr-arg-max"]], "polars.Expr.arcsin": [[263, "polars-expr-arcsin"]], "polars.DataFrame.width": [[222, "polars-dataframe-width"]], "polars.Expr.apply": [[260, "polars-expr-apply"]], "polars.DataFrame.to_pandas": [[210, "polars-dataframe-to-pandas"]], "polars.dataframe.groupby.GroupBy.apply": [[228, "polars-dataframe-groupby-groupby-apply"]], "polars.DataFrame.with_row_count": [[224, "polars-dataframe-with-row-count"]], "polars.Expr.agg_groups": [[254, "polars-expr-agg-groups"]], "polars.DataFrame.unstack": [[217, "polars-dataframe-unstack"]], "polars.Expr.arr.arg_max": [[272, "polars-expr-arr-arg-max"]], "polars.dataframe.groupby.GroupBy.sum": [[239, "polars-dataframe-groupby-groupby-sum"]], "polars.DataFrame.unique": [[215, "polars-dataframe-unique"]], "polars.Expr.and_": [[257, "polars-expr-and"]], "polars.dataframe.groupby.GroupBy.last": [[232, "polars-dataframe-groupby-groupby-last"]], "polars.dataframe.groupby.GroupBy.min": [[236, "polars-dataframe-groupby-groupby-min"]], "polars.Expr.arctan": [[265, "polars-expr-arctan"]], "polars.dataframe.groupby.GroupBy.max": [[233, "polars-dataframe-groupby-groupby-max"]], "polars.dataframe.groupby.GroupBy.quantile": [[238, "polars-dataframe-groupby-groupby-quantile"]], "polars.dataframe.groupby.GroupBy.mean": [[234, "polars-dataframe-groupby-groupby-mean"]], "polars.dataframe.groupby.GroupBy.n_unique": [[237, "polars-dataframe-groupby-groupby-n-unique"]], "polars.DataFrame.to_struct": [[212, "polars-dataframe-to-struct"]], "polars.Expr.abs": [[252, "polars-expr-abs"]], "polars.dataframe.groupby.GroupBy.first": [[230, "polars-dataframe-groupby-groupby-first"]], "polars.Expr.all": [[256, "polars-expr-all"]], "polars.dataframe.groupby.GroupBy.__iter__": [[225, "polars-dataframe-groupby-groupby-iter"]], "polars.DataFrame.to_dummies": [[207, "polars-dataframe-to-dummies"]], "polars.Expr.arr.contains": [[275, "polars-expr-arr-contains"]], "polars.DataFrame.unnest": [[216, "polars-dataframe-unnest"]], "polars.Expr.arcsinh": [[264, "polars-expr-arcsinh"]], "polars.Expr.arr.arg_min": [[273, "polars-expr-arr-arg-min"]], "polars.Expr.arg_min": [[268, "polars-expr-arg-min"]], "polars.DataFrame.update": [[218, "polars-dataframe-update"]], "polars.DataFrame.vstack": [[221, "polars-dataframe-vstack"]], "polars.Expr.add": [[253, "polars-expr-add"]], "DataFrame": [[246, "dataframe"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[5, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[6, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[7, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[8, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[9, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[10, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[11, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[12, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[13, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[14, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[15, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[16, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[17, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[22, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[23, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[24, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[25, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[26, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[27, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[28, "polars.DataFrame.write_database"]], "write_excel() (polars.dataframe method)": [[29, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[30, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[31, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[32, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[33, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[34, "polars.DataType"]], "__init__() (polars.datatype method)": [[34, "polars.DataType.__init__"]], "date (class in polars)": [[35, "polars.Date"]], "__init__() (polars.date method)": [[35, "polars.Date.__init__"]], "datetime (class in polars)": [[36, "polars.Datetime"]], "__init__() (polars.datetime method)": [[36, "polars.Datetime.__init__"]], "decimal (class in polars)": [[37, "polars.Decimal"]], "__init__() (polars.decimal method)": [[37, "polars.Decimal.__init__"]], "duration (class in polars)": [[38, "polars.Duration"]], "__init__() (polars.duration method)": [[38, "polars.Duration.__init__"]], "float32 (class in polars)": [[39, "polars.Float32"]], "__init__() (polars.float32 method)": [[39, "polars.Float32.__init__"]], "float64 (class in polars)": [[40, "polars.Float64"]], "__init__() (polars.float64 method)": [[40, "polars.Float64.__init__"]], "int16 (class in polars)": [[41, "polars.Int16"]], "__init__() (polars.int16 method)": [[41, "polars.Int16.__init__"]], "int32 (class in polars)": [[42, "polars.Int32"]], "__init__() (polars.int32 method)": [[42, "polars.Int32.__init__"]], "int64 (class in polars)": [[43, "polars.Int64"]], "__init__() (polars.int64 method)": [[43, "polars.Int64.__init__"]], "int8 (class in polars)": [[44, "polars.Int8"]], "__init__() (polars.int8 method)": [[44, "polars.Int8.__init__"]], "list (class in polars)": [[45, "polars.List"]], "__init__() (polars.list method)": [[45, "polars.List.__init__"]], "null (class in polars)": [[46, "polars.Null"]], "__init__() (polars.null method)": [[46, "polars.Null.__init__"]], "object (class in polars)": [[47, "polars.Object"]], "__init__() (polars.object method)": [[47, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[48, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[49, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[50, "polars.SQLContext.register"]], "stringcache (class in polars)": [[51, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[51, "polars.StringCache.__init__"]], "struct (class in polars)": [[52, "polars.Struct"]], "__init__() (polars.struct method)": [[52, "polars.Struct.__init__"]], "time (class in polars)": [[53, "polars.Time"]], "__init__() (polars.time method)": [[53, "polars.Time.__init__"]], "uint16 (class in polars)": [[54, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[54, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[55, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[55, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[56, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[56, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[57, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[57, "polars.UInt8.__init__"]], "unknown (class in polars)": [[58, "polars.Unknown"]], "__init__() (polars.unknown method)": [[58, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[59, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[59, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[60, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[61, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[62, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[63, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[64, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[65, "polars.arg_where"]], "build_info() (in module polars)": [[66, "polars.build_info"]], "collect_all() (in module polars)": [[67, "polars.collect_all"]], "concat() (in module polars)": [[68, "polars.concat"]], "cut() (in module polars)": [[69, "polars.cut"]], "date_range() (in module polars)": [[70, "polars.date_range"]], "enable_string_cache() (in module polars)": [[71, "polars.enable_string_cache"]], "arrowerror": [[72, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[73, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[74, "polars.exceptions.ComputeError"]], "duplicateerror": [[75, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[76, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[77, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[78, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[79, "polars.exceptions.PolarsPanicError"]], "rowserror": [[80, "polars.exceptions.RowsError"]], "schemaerror": [[81, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[82, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[83, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[84, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[85, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[86, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[87, "polars.from_dataframe"]], "from_dict() (in module polars)": [[88, "polars.from_dict"]], "from_dicts() (in module polars)": [[89, "polars.from_dicts"]], "from_numpy() (in module polars)": [[90, "polars.from_numpy"]], "from_pandas() (in module polars)": [[91, "polars.from_pandas"]], "from_records() (in module polars)": [[92, "polars.from_records"]], "from_repr() (in module polars)": [[93, "polars.from_repr"]], "get_dummies() (in module polars)": [[94, "polars.get_dummies"]], "get_index_type() (in module polars)": [[95, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[96, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[97, "polars.ones"]], "read_avro() (in module polars)": [[98, "polars.read_avro"]], "read_csv() (in module polars)": [[99, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[100, "polars.read_csv_batched"]], "read_database() (in module polars)": [[101, "polars.read_database"]], "read_delta() (in module polars)": [[102, "polars.read_delta"]], "read_excel() (in module polars)": [[103, "polars.read_excel"]], "read_ipc() (in module polars)": [[104, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[105, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[106, "polars.read_json"]], "read_ndjson() (in module polars)": [[107, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[108, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[109, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[110, "polars.scan_csv"]], "scan_delta() (in module polars)": [[111, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[112, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[113, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[114, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[115, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[116, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[117, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[118, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[119, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[119, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[120, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[121, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[122, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[123, "polars.threadpool_size"]], "zeros() (in module polars)": [[124, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[127, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[128, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[129, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[130, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[131, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[132, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[133, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[134, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[135, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[136, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[137, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[138, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[139, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[140, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[141, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[142, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[143, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[144, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[145, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[146, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[147, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[148, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[149, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[150, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[151, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[152, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[153, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[154, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[155, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[156, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[157, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[158, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[159, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[160, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[161, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[162, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[163, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[164, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[165, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[166, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[167, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[168, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[169, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[170, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[171, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[172, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[173, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[174, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[175, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[176, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[177, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[178, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[179, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[180, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[181, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[182, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[183, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[184, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[185, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[186, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[187, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[188, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[189, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[190, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[191, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[192, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[193, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[194, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[195, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[196, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[197, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[198, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[199, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[200, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[201, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[202, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[203, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[204, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[205, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[206, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[207, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[208, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[209, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[210, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[211, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[212, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[213, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[214, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[215, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[216, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[217, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[218, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[219, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[220, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[221, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[222, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[223, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[224, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[225, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[226, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[227, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[228, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[229, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[230, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[231, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[232, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[252, "polars.Expr.abs"]], "add() (polars.expr method)": [[253, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[254, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[255, "polars.Expr.alias"]], "all() (polars.expr method)": [[256, "polars.Expr.all"]], "and_() (polars.expr method)": [[257, "polars.Expr.and_"]], "any() (polars.expr method)": [[258, "polars.Expr.any"]], "append() (polars.expr method)": [[259, "polars.Expr.append"]], "apply() (polars.expr method)": [[260, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[261, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[262, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[263, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[264, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[265, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[266, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[267, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[268, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[269, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[270, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[271, "polars.Expr.arg_unique"]], "arg_max() (polars.expr.arr method)": [[272, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[273, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[274, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[275, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[276, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[277, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[278, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[279, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[280, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[281, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[282, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[283, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[284, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[285, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[286, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[287, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[288, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[289, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[290, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[291, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[292, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[293, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[294, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[295, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[296, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[297, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[298, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[299, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[300, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[301, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[302, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[303, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[304, "polars.Expr.bottom_k"]], "cast() (polars.expr method)": [[305, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[306, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[307, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[308, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[309, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[310, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[311, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[312, "polars.Expr.cosh"]], "count() (polars.expr method)": [[313, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[314, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[315, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[316, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[317, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[318, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[319, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[320, "polars.Expr.diff"]], "dot() (polars.expr method)": [[321, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[322, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[323, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[324, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[325, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[326, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[327, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[328, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[329, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[330, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[331, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[332, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[333, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[334, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[335, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[336, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[337, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[338, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[339, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[340, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[341, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[342, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[343, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[344, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[345, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[346, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[347, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[348, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[349, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[350, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[351, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[352, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[353, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[354, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[355, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[356, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[357, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[358, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[359, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[360, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[361, "polars.Expr.eq"]], "ewm_mean() (polars.expr method)": [[362, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[363, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[364, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[365, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[366, "polars.Expr.exp"]], "explode() (polars.expr method)": [[367, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[368, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[369, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[370, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[371, "polars.Expr.filter"]], "first() (polars.expr method)": [[372, "polars.Expr.first"]], "flatten() (polars.expr method)": [[373, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[374, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[375, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[376, "polars.Expr.forward_fill"]], "ge() (polars.expr method)": [[377, "polars.Expr.ge"]], "gt() (polars.expr method)": [[378, "polars.Expr.gt"]], "hash() (polars.expr method)": [[379, "polars.Expr.hash"]], "head() (polars.expr method)": [[380, "polars.Expr.head"]], "inspect() (polars.expr method)": [[381, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[382, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[383, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[384, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[385, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[386, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[387, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[388, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[389, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[390, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[391, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[392, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[393, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[394, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[395, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[396, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[397, "polars.Expr.last"]], "le() (polars.expr method)": [[398, "polars.Expr.le"]], "len() (polars.expr method)": [[399, "polars.Expr.len"]], "limit() (polars.expr method)": [[400, "polars.Expr.limit"]], "list() (polars.expr method)": [[401, "polars.Expr.list"]], "log() (polars.expr method)": [[402, "polars.Expr.log"]], "log10() (polars.expr method)": [[403, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[404, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[405, "polars.Expr.lt"]], "map() (polars.expr method)": [[406, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[407, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[408, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[409, "polars.Expr.max"]], "mean() (polars.expr method)": [[410, "polars.Expr.mean"]], "median() (polars.expr method)": [[411, "polars.Expr.median"]], "has_multiple_outputs() (polars.expr.meta method)": [[412, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[413, "polars.Expr.meta.is_regex_projection"]], "output_name() (polars.expr.meta method)": [[414, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[415, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[416, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[417, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[418, "polars.Expr.min"]], "mod() (polars.expr method)": [[419, "polars.Expr.mod"]], "mode() (polars.expr method)": [[420, "polars.Expr.mode"]], "mul() (polars.expr method)": [[421, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[422, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[423, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[424, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[425, "polars.Expr.ne"]], "null_count() (polars.expr method)": [[426, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[427, "polars.Expr.or_"]], "over() (polars.expr method)": [[428, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[429, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[430, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[431, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[432, "polars.Expr.prefix"]], "product() (polars.expr method)": [[433, "polars.Expr.product"]], "quantile() (polars.expr method)": [[434, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[435, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[436, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[437, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[438, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[439, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[440, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[441, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[442, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[443, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[444, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[445, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[446, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[447, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[448, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[449, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[450, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[451, "polars.Expr.round"]], "sample() (polars.expr method)": [[452, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[453, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[454, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[455, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[456, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[457, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[458, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[459, "polars.Expr.sign"]], "sin() (polars.expr method)": [[460, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[461, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[462, "polars.Expr.skew"]], "slice() (polars.expr method)": [[463, "polars.Expr.slice"]], "sort() (polars.expr method)": [[464, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[465, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[466, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[467, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[468, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[469, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[470, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[471, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[472, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[473, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[474, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[475, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[476, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[477, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[478, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[479, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[480, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[481, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[482, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[483, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[484, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[485, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[486, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[487, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[488, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[489, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[490, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[491, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[492, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[493, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[494, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[495, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[496, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[497, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[498, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[499, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[500, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[501, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[502, "polars.Expr.sum"]], "tail() (polars.expr method)": [[503, "polars.Expr.tail"]], "take() (polars.expr method)": [[504, "polars.Expr.take"]], "take_every() (polars.expr method)": [[505, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[506, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[507, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[508, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[509, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[510, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[511, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[512, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[513, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[514, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[515, "polars.Expr.var"]], "where() (polars.expr method)": [[516, "polars.Expr.where"]], "xor() (polars.expr method)": [[517, "polars.Expr.xor"]], "all() (in module polars)": [[518, "polars.all"]], "any() (in module polars)": [[519, "polars.any"]], "apply() (in module polars)": [[520, "polars.apply"]], "arange() (in module polars)": [[521, "polars.arange"]], "arg_sort_by() (in module polars)": [[522, "polars.arg_sort_by"]], "avg() (in module polars)": [[523, "polars.avg"]], "coalesce() (in module polars)": [[524, "polars.coalesce"]], "col() (in module polars)": [[525, "polars.col"]], "concat_list() (in module polars)": [[526, "polars.concat_list"]], "concat_str() (in module polars)": [[527, "polars.concat_str"]], "corr() (in module polars)": [[528, "polars.corr"]], "count() (in module polars)": [[529, "polars.count"]], "cov() (in module polars)": [[530, "polars.cov"]], "cumfold() (in module polars)": [[531, "polars.cumfold"]], "cumreduce() (in module polars)": [[532, "polars.cumreduce"]], "cumsum() (in module polars)": [[533, "polars.cumsum"]], "date() (in module polars)": [[534, "polars.date"]], "datetime() (in module polars)": [[535, "polars.datetime"]], "duration() (in module polars)": [[536, "polars.duration"]], "element() (in module polars)": [[537, "polars.element"]], "exclude() (in module polars)": [[538, "polars.exclude"]], "first() (in module polars)": [[539, "polars.first"]], "fold() (in module polars)": [[540, "polars.fold"]], "format() (in module polars)": [[541, "polars.format"]], "from_epoch() (in module polars)": [[542, "polars.from_epoch"]], "groups() (in module polars)": [[543, "polars.groups"]], "head() (in module polars)": [[544, "polars.head"]], "list() (in module polars)": [[545, "polars.list"]], "lit() (in module polars)": [[546, "polars.lit"]], "map() (in module polars)": [[547, "polars.map"]], "max() (in module polars)": [[548, "polars.max"]], "mean() (in module polars)": [[549, "polars.mean"]], "median() (in module polars)": [[550, "polars.median"]], "min() (in module polars)": [[551, "polars.min"]], "n_unique() (in module polars)": [[552, "polars.n_unique"]], "pearson_corr() (in module polars)": [[553, "polars.pearson_corr"]], "quantile() (in module polars)": [[554, "polars.quantile"]], "reduce() (in module polars)": [[555, "polars.reduce"]], "repeat() (in module polars)": [[556, "polars.repeat"]], "select() (in module polars)": [[557, "polars.select"]], "spearman_rank_corr() (in module polars)": [[558, "polars.spearman_rank_corr"]], "std() (in module polars)": [[559, "polars.std"]], "struct() (in module polars)": [[560, "polars.struct"]], "sum() (in module polars)": [[561, "polars.sum"]], "tail() (in module polars)": [[562, "polars.tail"]], "var() (in module polars)": [[563, "polars.var"]], "when() (in module polars)": [[564, "polars.when"]], "bottom_k() (polars.lazyframe method)": [[585, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[586, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[587, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[588, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[589, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[590, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[591, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[592, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[593, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[594, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[595, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[596, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[597, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[598, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[599, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[600, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[601, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[602, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[603, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[604, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[605, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[606, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[607, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[608, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[609, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[610, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[611, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[612, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[613, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[614, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[615, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[616, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[617, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[618, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[619, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[620, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[621, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[622, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[623, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[624, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[625, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[626, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[627, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[628, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[629, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[630, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[631, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[632, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[633, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[634, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[635, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[636, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[637, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[638, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[639, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[640, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[641, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[642, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[643, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[644, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[645, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[646, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[647, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[648, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[649, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[650, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[651, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[652, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[653, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[654, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[655, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[656, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[657, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[658, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[659, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[660, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[661, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[662, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[663, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[671, "polars.Series.abs"]], "alias() (polars.series method)": [[672, "polars.Series.alias"]], "all() (polars.series method)": [[673, "polars.Series.all"]], "any() (polars.series method)": [[674, "polars.Series.any"]], "append() (polars.series method)": [[675, "polars.Series.append"]], "apply() (polars.series method)": [[676, "polars.Series.apply"]], "arccos() (polars.series method)": [[677, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[678, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[679, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[680, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[681, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[682, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[683, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[684, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[685, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[686, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[687, "polars.Series.arg_unique"]], "arr (polars.series attribute)": [[688, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[689, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[690, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[691, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[692, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[693, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[694, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[695, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[696, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[697, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[698, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[699, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[700, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[701, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[702, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[703, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[704, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[705, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[706, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[707, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[708, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[709, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[710, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[711, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[712, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[713, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[714, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[715, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[716, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[717, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[718, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[719, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[720, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[721, "polars.Series.cast"]], "cat (polars.series attribute)": [[722, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[723, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[724, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[725, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[726, "polars.Series.clear"]], "clip() (polars.series method)": [[727, "polars.Series.clip"]], "clip_max() (polars.series method)": [[728, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[729, "polars.Series.clip_min"]], "clone() (polars.series method)": [[730, "polars.Series.clone"]], "cos() (polars.series method)": [[731, "polars.Series.cos"]], "cosh() (polars.series method)": [[732, "polars.Series.cosh"]], "cummax() (polars.series method)": [[733, "polars.Series.cummax"]], "cummin() (polars.series method)": [[734, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[735, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[736, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[737, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[738, "polars.Series.cut"]], "describe() (polars.series method)": [[739, "polars.Series.describe"]], "diff() (polars.series method)": [[740, "polars.Series.diff"]], "dot() (polars.series method)": [[741, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[742, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[743, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[744, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[745, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[746, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[747, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[748, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[749, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[750, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[751, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[752, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[753, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[754, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[755, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[756, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[757, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[758, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[759, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[760, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[761, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[762, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[763, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[764, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[765, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[766, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[767, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[768, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[769, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[770, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[771, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[772, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[773, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[774, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[775, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[776, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[777, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[778, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[779, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[780, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[781, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[782, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[783, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[784, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[785, "polars.Series.dtype"]], "entropy() (polars.series method)": [[786, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[787, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[788, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[789, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[790, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[791, "polars.Series.exp"]], "explode() (polars.series method)": [[792, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[793, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[794, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[795, "polars.Series.fill_null"]], "filter() (polars.series method)": [[796, "polars.Series.filter"]], "flags (polars.series attribute)": [[797, "polars.Series.flags"]], "floor() (polars.series method)": [[798, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[799, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[800, "polars.Series.has_validity"]], "hash() (polars.series method)": [[801, "polars.Series.hash"]], "head() (polars.series method)": [[802, "polars.Series.head"]], "hist() (polars.series method)": [[803, "polars.Series.hist"]], "inner_dtype (polars.series attribute)": [[804, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[805, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[806, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[807, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[808, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[809, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[810, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[811, "polars.Series.is_first"]], "is_float() (polars.series method)": [[812, "polars.Series.is_float"]], "is_in() (polars.series method)": [[813, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[814, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[815, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[816, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[817, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[818, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[819, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[820, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[821, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[822, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[823, "polars.Series.is_utf8"]], "item() (polars.series method)": [[824, "polars.Series.item"]], "kurtosis() (polars.series method)": [[825, "polars.Series.kurtosis"]], "len() (polars.series method)": [[826, "polars.Series.len"]], "limit() (polars.series method)": [[827, "polars.Series.limit"]], "log() (polars.series method)": [[828, "polars.Series.log"]], "log10() (polars.series method)": [[829, "polars.Series.log10"]], "lower_bound() (polars.series method)": [[830, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[831, "polars.Series.map_dict"]], "max() (polars.series method)": [[832, "polars.Series.max"]], "mean() (polars.series method)": [[833, "polars.Series.mean"]], "median() (polars.series method)": [[834, "polars.Series.median"]], "min() (polars.series method)": [[835, "polars.Series.min"]], "mode() (polars.series method)": [[836, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[837, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[838, "polars.Series.n_unique"]], "name (polars.series attribute)": [[839, "polars.Series.name"]], "nan_max() (polars.series method)": [[840, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[841, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[842, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[843, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[844, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[845, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[846, "polars.Series.peak_min"]], "product() (polars.series method)": [[847, "polars.Series.product"]], "qcut() (polars.series method)": [[848, "polars.Series.qcut"]], "quantile() (polars.series method)": [[849, "polars.Series.quantile"]], "rank() (polars.series method)": [[850, "polars.Series.rank"]], "rechunk() (polars.series method)": [[851, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[852, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[853, "polars.Series.rename"]], "reshape() (polars.series method)": [[854, "polars.Series.reshape"]], "reverse() (polars.series method)": [[855, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[856, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[857, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[858, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[859, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[860, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[861, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[862, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[863, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[864, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[865, "polars.Series.rolling_var"]], "round() (polars.series method)": [[866, "polars.Series.round"]], "sample() (polars.series method)": [[867, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[868, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[869, "polars.Series.series_equal"]], "set() (polars.series method)": [[870, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[871, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[872, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[873, "polars.Series.shape"]], "shift() (polars.series method)": [[874, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[875, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[876, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[877, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[878, "polars.Series.shuffle"]], "sign() (polars.series method)": [[879, "polars.Series.sign"]], "sin() (polars.series method)": [[880, "polars.Series.sin"]], "sinh() (polars.series method)": [[881, "polars.Series.sinh"]], "skew() (polars.series method)": [[882, "polars.Series.skew"]], "slice() (polars.series method)": [[883, "polars.Series.slice"]], "sort() (polars.series method)": [[884, "polars.Series.sort"]], "sqrt() (polars.series method)": [[885, "polars.Series.sqrt"]], "std() (polars.series method)": [[886, "polars.Series.std"]], "str (polars.series attribute)": [[887, "polars.Series.str"]], "concat() (polars.series.str method)": [[888, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[889, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[890, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[891, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[892, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[893, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[894, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[895, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[896, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[897, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[898, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[899, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[900, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[901, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[902, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[903, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[904, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[905, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[906, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[907, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[908, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[909, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[910, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[911, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[912, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[913, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[914, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[915, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[916, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[917, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[918, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[919, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[920, "polars.Series.struct.rename_fields"]], "unnest() (polars.series.struct method)": [[921, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[922, "polars.Series.sum"]], "tail() (polars.series method)": [[923, "polars.Series.tail"]], "take() (polars.series method)": [[924, "polars.Series.take"]], "take_every() (polars.series method)": [[925, "polars.Series.take_every"]], "tan() (polars.series method)": [[926, "polars.Series.tan"]], "tanh() (polars.series method)": [[927, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[928, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[929, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[930, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[931, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[932, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[933, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[934, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[935, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[936, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[937, "polars.Series.top_k"]], "unique() (polars.series method)": [[938, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[939, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[940, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[941, "polars.Series.value_counts"]], "var() (polars.series method)": [[942, "polars.Series.var"]], "view() (polars.series method)": [[943, "polars.Series.view"]], "zip_with() (polars.series method)": [[944, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[959, "polars.SQLContext"]]}})