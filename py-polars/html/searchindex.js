Search.setIndex({"docnames": ["index", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_global_string_cache", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_change_column_data_type_position_format", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_column_separator", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_utf8_tables", "reference/api/polars.Config.unset_global_string_cache", "reference/api/polars.DataFrame", "reference/api/polars.DataFrame.apply", "reference/api/polars.DataFrame.cleared", "reference/api/polars.DataFrame.clone", "reference/api/polars.DataFrame.columns", "reference/api/polars.DataFrame.describe", "reference/api/polars.DataFrame.drop", "reference/api/polars.DataFrame.drop_in_place", "reference/api/polars.DataFrame.drop_nulls", "reference/api/polars.DataFrame.dtypes", "reference/api/polars.DataFrame.estimated_size", "reference/api/polars.DataFrame.explode", "reference/api/polars.DataFrame.extend", "reference/api/polars.DataFrame.fill_nan", "reference/api/polars.DataFrame.fill_null", "reference/api/polars.DataFrame.filter", "reference/api/polars.DataFrame.find_idx_by_name", "reference/api/polars.DataFrame.fold", "reference/api/polars.DataFrame.frame_equal", "reference/api/polars.DataFrame.get_column", "reference/api/polars.DataFrame.get_columns", "reference/api/polars.DataFrame.groupby", "reference/api/polars.DataFrame.groupby_dynamic", "reference/api/polars.DataFrame.groupby_rolling", "reference/api/polars.DataFrame.hash_rows", "reference/api/polars.DataFrame.head", "reference/api/polars.DataFrame.height", "reference/api/polars.DataFrame.hstack", "reference/api/polars.DataFrame.insert_at_idx", "reference/api/polars.DataFrame.interpolate", "reference/api/polars.DataFrame.is_duplicated", "reference/api/polars.DataFrame.is_empty", "reference/api/polars.DataFrame.is_unique", "reference/api/polars.DataFrame.join", "reference/api/polars.DataFrame.join_asof", "reference/api/polars.DataFrame.lazy", "reference/api/polars.DataFrame.limit", "reference/api/polars.DataFrame.max", "reference/api/polars.DataFrame.mean", "reference/api/polars.DataFrame.median", "reference/api/polars.DataFrame.melt", "reference/api/polars.DataFrame.min", "reference/api/polars.DataFrame.n_chunks", "reference/api/polars.DataFrame.null_count", "reference/api/polars.DataFrame.partition_by", "reference/api/polars.DataFrame.pipe", "reference/api/polars.DataFrame.pivot", "reference/api/polars.DataFrame.product", "reference/api/polars.DataFrame.quantile", "reference/api/polars.DataFrame.rechunk", "reference/api/polars.DataFrame.rename", "reference/api/polars.DataFrame.replace", "reference/api/polars.DataFrame.replace_at_idx", "reference/api/polars.DataFrame.reverse", "reference/api/polars.DataFrame.row", "reference/api/polars.DataFrame.rows", "reference/api/polars.DataFrame.sample", "reference/api/polars.DataFrame.schema", "reference/api/polars.DataFrame.select", "reference/api/polars.DataFrame.shape", "reference/api/polars.DataFrame.shift", "reference/api/polars.DataFrame.shift_and_fill", "reference/api/polars.DataFrame.shrink_to_fit", "reference/api/polars.DataFrame.slice", "reference/api/polars.DataFrame.sort", "reference/api/polars.DataFrame.std", "reference/api/polars.DataFrame.sum", "reference/api/polars.DataFrame.tail", "reference/api/polars.DataFrame.take_every", "reference/api/polars.DataFrame.to_arrow", "reference/api/polars.DataFrame.to_dict", "reference/api/polars.DataFrame.to_dicts", "reference/api/polars.DataFrame.to_dummies", "reference/api/polars.DataFrame.to_numpy", "reference/api/polars.DataFrame.to_pandas", "reference/api/polars.DataFrame.to_series", "reference/api/polars.DataFrame.to_struct", "reference/api/polars.DataFrame.transpose", "reference/api/polars.DataFrame.unique", "reference/api/polars.DataFrame.unnest", "reference/api/polars.DataFrame.unstack", "reference/api/polars.DataFrame.upsample", "reference/api/polars.DataFrame.var", "reference/api/polars.DataFrame.vstack", "reference/api/polars.DataFrame.width", "reference/api/polars.DataFrame.with_column", "reference/api/polars.DataFrame.with_columns", "reference/api/polars.DataFrame.with_row_count", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.Expr", "reference/api/polars.Expr.abs", "reference/api/polars.Expr.agg_groups", "reference/api/polars.Expr.alias", "reference/api/polars.Expr.all", "reference/api/polars.Expr.any", "reference/api/polars.Expr.append", "reference/api/polars.Expr.apply", "reference/api/polars.Expr.arccos", "reference/api/polars.Expr.arccosh", "reference/api/polars.Expr.arcsin", "reference/api/polars.Expr.arcsinh", "reference/api/polars.Expr.arctan", "reference/api/polars.Expr.arctanh", "reference/api/polars.Expr.arg_max", "reference/api/polars.Expr.arg_min", "reference/api/polars.Expr.arg_sort", "reference/api/polars.Expr.arg_unique", "reference/api/polars.Expr.argsort", "reference/api/polars.Expr.arr", "reference/api/polars.Expr.backward_fill", "reference/api/polars.Expr.cast", "reference/api/polars.Expr.cat", "reference/api/polars.Expr.ceil", "reference/api/polars.Expr.clip", "reference/api/polars.Expr.clip_max", "reference/api/polars.Expr.clip_min", "reference/api/polars.Expr.cos", "reference/api/polars.Expr.cosh", "reference/api/polars.Expr.count", "reference/api/polars.Expr.cumcount", "reference/api/polars.Expr.cummax", "reference/api/polars.Expr.cummin", "reference/api/polars.Expr.cumprod", "reference/api/polars.Expr.cumsum", "reference/api/polars.Expr.cumulative_eval", "reference/api/polars.Expr.diff", "reference/api/polars.Expr.dot", "reference/api/polars.Expr.drop_nans", "reference/api/polars.Expr.drop_nulls", "reference/api/polars.Expr.dt", "reference/api/polars.Expr.entropy", "reference/api/polars.Expr.ewm_mean", "reference/api/polars.Expr.ewm_std", "reference/api/polars.Expr.ewm_var", "reference/api/polars.Expr.exclude", "reference/api/polars.Expr.exp", "reference/api/polars.Expr.explode", "reference/api/polars.Expr.extend_constant", "reference/api/polars.Expr.fill_nan", "reference/api/polars.Expr.fill_null", "reference/api/polars.Expr.filter", "reference/api/polars.Expr.first", "reference/api/polars.Expr.flatten", "reference/api/polars.Expr.floor", "reference/api/polars.Expr.forward_fill", "reference/api/polars.Expr.hash", "reference/api/polars.Expr.head", "reference/api/polars.Expr.inspect", "reference/api/polars.Expr.interpolate", "reference/api/polars.Expr.is_between", "reference/api/polars.Expr.is_duplicated", "reference/api/polars.Expr.is_finite", "reference/api/polars.Expr.is_first", "reference/api/polars.Expr.is_in", "reference/api/polars.Expr.is_infinite", "reference/api/polars.Expr.is_nan", "reference/api/polars.Expr.is_not", "reference/api/polars.Expr.is_not_nan", "reference/api/polars.Expr.is_not_null", "reference/api/polars.Expr.is_null", "reference/api/polars.Expr.is_unique", "reference/api/polars.Expr.keep_name", "reference/api/polars.Expr.kurtosis", "reference/api/polars.Expr.last", "reference/api/polars.Expr.len", "reference/api/polars.Expr.limit", "reference/api/polars.Expr.list", "reference/api/polars.Expr.log", "reference/api/polars.Expr.log10", "reference/api/polars.Expr.lower_bound", "reference/api/polars.Expr.map", "reference/api/polars.Expr.map_alias", "reference/api/polars.Expr.max", "reference/api/polars.Expr.mean", "reference/api/polars.Expr.median", "reference/api/polars.Expr.min", "reference/api/polars.Expr.mode", "reference/api/polars.Expr.n_unique", "reference/api/polars.Expr.nan_max", "reference/api/polars.Expr.nan_min", "reference/api/polars.Expr.null_count", "reference/api/polars.Expr.over", "reference/api/polars.Expr.pct_change", "reference/api/polars.Expr.pow", "reference/api/polars.Expr.prefix", "reference/api/polars.Expr.product", "reference/api/polars.Expr.quantile", "reference/api/polars.Expr.rank", "reference/api/polars.Expr.rechunk", "reference/api/polars.Expr.reinterpret", "reference/api/polars.Expr.repeat_by", "reference/api/polars.Expr.reshape", "reference/api/polars.Expr.reverse", "reference/api/polars.Expr.rolling_apply", "reference/api/polars.Expr.rolling_max", "reference/api/polars.Expr.rolling_mean", "reference/api/polars.Expr.rolling_median", "reference/api/polars.Expr.rolling_min", "reference/api/polars.Expr.rolling_quantile", "reference/api/polars.Expr.rolling_skew", "reference/api/polars.Expr.rolling_std", "reference/api/polars.Expr.rolling_sum", "reference/api/polars.Expr.rolling_var", "reference/api/polars.Expr.round", "reference/api/polars.Expr.sample", "reference/api/polars.Expr.search_sorted", "reference/api/polars.Expr.set_sorted", "reference/api/polars.Expr.shift", "reference/api/polars.Expr.shift_and_fill", "reference/api/polars.Expr.shuffle", "reference/api/polars.Expr.sign", "reference/api/polars.Expr.sin", "reference/api/polars.Expr.sinh", "reference/api/polars.Expr.skew", "reference/api/polars.Expr.slice", "reference/api/polars.Expr.sort", "reference/api/polars.Expr.sort_by", "reference/api/polars.Expr.sqrt", "reference/api/polars.Expr.std", "reference/api/polars.Expr.str", "reference/api/polars.Expr.suffix", "reference/api/polars.Expr.sum", "reference/api/polars.Expr.tail", "reference/api/polars.Expr.take", "reference/api/polars.Expr.take_every", "reference/api/polars.Expr.tan", "reference/api/polars.Expr.tanh", "reference/api/polars.Expr.to_physical", "reference/api/polars.Expr.top_k", "reference/api/polars.Expr.unique", "reference/api/polars.Expr.unique_counts", "reference/api/polars.Expr.upper_bound", "reference/api/polars.Expr.value_counts", "reference/api/polars.Expr.var", "reference/api/polars.Expr.where", "reference/api/polars.LazyFrame.cache", "reference/api/polars.LazyFrame.cleared", "reference/api/polars.LazyFrame.clone", "reference/api/polars.LazyFrame.collect", "reference/api/polars.LazyFrame.columns", "reference/api/polars.LazyFrame.describe_optimized_plan", "reference/api/polars.LazyFrame.describe_plan", "reference/api/polars.LazyFrame.drop", "reference/api/polars.LazyFrame.drop_nulls", "reference/api/polars.LazyFrame.dtypes", "reference/api/polars.LazyFrame.explode", "reference/api/polars.LazyFrame.fetch", "reference/api/polars.LazyFrame.fill_nan", "reference/api/polars.LazyFrame.fill_null", "reference/api/polars.LazyFrame.filter", "reference/api/polars.LazyFrame.first", "reference/api/polars.LazyFrame.from_json", "reference/api/polars.LazyFrame.groupby", "reference/api/polars.LazyFrame.groupby_dynamic", "reference/api/polars.LazyFrame.groupby_rolling", "reference/api/polars.LazyFrame.head", "reference/api/polars.LazyFrame.inspect", "reference/api/polars.LazyFrame.interpolate", "reference/api/polars.LazyFrame.join", "reference/api/polars.LazyFrame.join_asof", "reference/api/polars.LazyFrame.last", "reference/api/polars.LazyFrame.limit", "reference/api/polars.LazyFrame.map", "reference/api/polars.LazyFrame.max", "reference/api/polars.LazyFrame.mean", "reference/api/polars.LazyFrame.median", "reference/api/polars.LazyFrame.melt", "reference/api/polars.LazyFrame.min", "reference/api/polars.LazyFrame.pipe", "reference/api/polars.LazyFrame.profile", "reference/api/polars.LazyFrame.quantile", "reference/api/polars.LazyFrame.read_json", "reference/api/polars.LazyFrame.rename", "reference/api/polars.LazyFrame.reverse", "reference/api/polars.LazyFrame.schema", "reference/api/polars.LazyFrame.select", "reference/api/polars.LazyFrame.shift", "reference/api/polars.LazyFrame.shift_and_fill", "reference/api/polars.LazyFrame.show_graph", "reference/api/polars.LazyFrame.slice", "reference/api/polars.LazyFrame.sort", "reference/api/polars.LazyFrame.std", "reference/api/polars.LazyFrame.sum", "reference/api/polars.LazyFrame.tail", "reference/api/polars.LazyFrame.take_every", "reference/api/polars.LazyFrame.unique", "reference/api/polars.LazyFrame.unnest", "reference/api/polars.LazyFrame.var", "reference/api/polars.LazyFrame.with_column", "reference/api/polars.LazyFrame.with_columns", "reference/api/polars.LazyFrame.with_context", "reference/api/polars.LazyFrame.with_row_count", "reference/api/polars.LazyFrame.write_json", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.Series", "reference/api/polars.Series.abs", "reference/api/polars.Series.alias", "reference/api/polars.Series.all", "reference/api/polars.Series.any", "reference/api/polars.Series.append", "reference/api/polars.Series.apply", "reference/api/polars.Series.arccos", "reference/api/polars.Series.arccosh", "reference/api/polars.Series.arcsin", "reference/api/polars.Series.arcsinh", "reference/api/polars.Series.arctan", "reference/api/polars.Series.arctanh", "reference/api/polars.Series.arg_max", "reference/api/polars.Series.arg_min", "reference/api/polars.Series.arg_sort", "reference/api/polars.Series.arg_true", "reference/api/polars.Series.arg_unique", "reference/api/polars.Series.argsort", "reference/api/polars.Series.arr", "reference/api/polars.Series.cast", "reference/api/polars.Series.cat", "reference/api/polars.Series.ceil", "reference/api/polars.Series.chunk_lengths", "reference/api/polars.Series.cleared", "reference/api/polars.Series.clip", "reference/api/polars.Series.clip_max", "reference/api/polars.Series.clip_min", "reference/api/polars.Series.clone", "reference/api/polars.Series.cos", "reference/api/polars.Series.cosh", "reference/api/polars.Series.cummax", "reference/api/polars.Series.cummin", "reference/api/polars.Series.cumprod", "reference/api/polars.Series.cumsum", "reference/api/polars.Series.cumulative_eval", "reference/api/polars.Series.describe", "reference/api/polars.Series.diff", "reference/api/polars.Series.dot", "reference/api/polars.Series.drop_nans", "reference/api/polars.Series.drop_nulls", "reference/api/polars.Series.dt", "reference/api/polars.Series.dtype", "reference/api/polars.Series.entropy", "reference/api/polars.Series.estimated_size", "reference/api/polars.Series.ewm_mean", "reference/api/polars.Series.ewm_std", "reference/api/polars.Series.ewm_var", "reference/api/polars.Series.exp", "reference/api/polars.Series.explode", "reference/api/polars.Series.extend_constant", "reference/api/polars.Series.fill_nan", "reference/api/polars.Series.fill_null", "reference/api/polars.Series.filter", "reference/api/polars.Series.flags", "reference/api/polars.Series.floor", "reference/api/polars.Series.has_validity", "reference/api/polars.Series.hash", "reference/api/polars.Series.head", "reference/api/polars.Series.inner_dtype", "reference/api/polars.Series.interpolate", "reference/api/polars.Series.is_boolean", "reference/api/polars.Series.is_datelike", "reference/api/polars.Series.is_duplicated", "reference/api/polars.Series.is_empty", "reference/api/polars.Series.is_finite", "reference/api/polars.Series.is_first", "reference/api/polars.Series.is_float", "reference/api/polars.Series.is_in", "reference/api/polars.Series.is_infinite", "reference/api/polars.Series.is_nan", "reference/api/polars.Series.is_not_nan", "reference/api/polars.Series.is_not_null", "reference/api/polars.Series.is_null", "reference/api/polars.Series.is_numeric", "reference/api/polars.Series.is_unique", "reference/api/polars.Series.is_utf8", "reference/api/polars.Series.kurtosis", "reference/api/polars.Series.len", "reference/api/polars.Series.limit", "reference/api/polars.Series.log", "reference/api/polars.Series.log10", "reference/api/polars.Series.max", "reference/api/polars.Series.mean", "reference/api/polars.Series.median", "reference/api/polars.Series.min", "reference/api/polars.Series.mode", "reference/api/polars.Series.n_chunks", "reference/api/polars.Series.n_unique", "reference/api/polars.Series.name", "reference/api/polars.Series.nan_max", "reference/api/polars.Series.nan_min", "reference/api/polars.Series.null_count", "reference/api/polars.Series.pct_change", "reference/api/polars.Series.peak_max", "reference/api/polars.Series.peak_min", "reference/api/polars.Series.product", "reference/api/polars.Series.quantile", "reference/api/polars.Series.rank", "reference/api/polars.Series.rechunk", "reference/api/polars.Series.reinterpret", "reference/api/polars.Series.rename", "reference/api/polars.Series.reshape", "reference/api/polars.Series.reverse", "reference/api/polars.Series.rolling_apply", "reference/api/polars.Series.rolling_max", "reference/api/polars.Series.rolling_mean", "reference/api/polars.Series.rolling_median", "reference/api/polars.Series.rolling_min", "reference/api/polars.Series.rolling_quantile", "reference/api/polars.Series.rolling_skew", "reference/api/polars.Series.rolling_std", "reference/api/polars.Series.rolling_sum", "reference/api/polars.Series.rolling_var", "reference/api/polars.Series.round", "reference/api/polars.Series.sample", "reference/api/polars.Series.search_sorted", "reference/api/polars.Series.series_equal", "reference/api/polars.Series.set", "reference/api/polars.Series.set_at_idx", "reference/api/polars.Series.set_sorted", "reference/api/polars.Series.shape", "reference/api/polars.Series.shift", "reference/api/polars.Series.shift_and_fill", "reference/api/polars.Series.shrink_to_fit", "reference/api/polars.Series.shuffle", "reference/api/polars.Series.sign", "reference/api/polars.Series.sin", "reference/api/polars.Series.sinh", "reference/api/polars.Series.skew", "reference/api/polars.Series.slice", "reference/api/polars.Series.sort", "reference/api/polars.Series.sqrt", "reference/api/polars.Series.std", "reference/api/polars.Series.str", "reference/api/polars.Series.sum", "reference/api/polars.Series.tail", "reference/api/polars.Series.take", "reference/api/polars.Series.take_every", "reference/api/polars.Series.tan", "reference/api/polars.Series.tanh", "reference/api/polars.Series.time_unit", "reference/api/polars.Series.to_arrow", "reference/api/polars.Series.to_dummies", "reference/api/polars.Series.to_frame", "reference/api/polars.Series.to_list", "reference/api/polars.Series.to_numpy", "reference/api/polars.Series.to_pandas", "reference/api/polars.Series.to_physical", "reference/api/polars.Series.top_k", "reference/api/polars.Series.unique", "reference/api/polars.Series.unique_counts", "reference/api/polars.Series.value_counts", "reference/api/polars.Series.var", "reference/api/polars.Series.view", "reference/api/polars.Series.zip_with", "reference/api/polars.StringCache", "reference/api/polars.all", "reference/api/polars.any", "reference/api/polars.apply", "reference/api/polars.arange", "reference/api/polars.arg_where", "reference/api/polars.argsort_by", "reference/api/polars.avg", "reference/api/polars.coalesce", "reference/api/polars.col", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.concat_list", "reference/api/polars.concat_str", "reference/api/polars.count", "reference/api/polars.cov", "reference/api/polars.cut", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.datatypes.get_idx_type", "reference/api/polars.date", "reference/api/polars.date_range", "reference/api/polars.datetime", "reference/api/polars.duration", "reference/api/polars.element", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.NotFoundError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.exclude", "reference/api/polars.first", "reference/api/polars.fold", "reference/api/polars.format", "reference/api/polars.from_arrow", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.groups", "reference/api/polars.head", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg_list", "reference/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/api/polars.internals.dataframe.groupby.GroupBy.pivot", "reference/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/api/polars.internals.dataframe.pivot.PivotOps.count", "reference/api/polars.internals.dataframe.pivot.PivotOps.first", "reference/api/polars.internals.dataframe.pivot.PivotOps.last", "reference/api/polars.internals.dataframe.pivot.PivotOps.max", "reference/api/polars.internals.dataframe.pivot.PivotOps.mean", "reference/api/polars.internals.dataframe.pivot.PivotOps.median", "reference/api/polars.internals.dataframe.pivot.PivotOps.min", "reference/api/polars.internals.dataframe.pivot.PivotOps.sum", "reference/api/polars.internals.expr.categorical.ExprCatNameSpace.set_ordering", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.day", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.days", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hour", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hours", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.microsecond", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.microseconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.millisecond", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minute", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.month", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.second", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.week", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.year", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_max", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_min", "reference/api/polars.internals.expr.list.ExprListNameSpace.concat", "reference/api/polars.internals.expr.list.ExprListNameSpace.contains", "reference/api/polars.internals.expr.list.ExprListNameSpace.diff", "reference/api/polars.internals.expr.list.ExprListNameSpace.eval", "reference/api/polars.internals.expr.list.ExprListNameSpace.first", "reference/api/polars.internals.expr.list.ExprListNameSpace.get", "reference/api/polars.internals.expr.list.ExprListNameSpace.head", "reference/api/polars.internals.expr.list.ExprListNameSpace.join", "reference/api/polars.internals.expr.list.ExprListNameSpace.last", "reference/api/polars.internals.expr.list.ExprListNameSpace.lengths", "reference/api/polars.internals.expr.list.ExprListNameSpace.max", "reference/api/polars.internals.expr.list.ExprListNameSpace.mean", "reference/api/polars.internals.expr.list.ExprListNameSpace.min", "reference/api/polars.internals.expr.list.ExprListNameSpace.reverse", "reference/api/polars.internals.expr.list.ExprListNameSpace.shift", "reference/api/polars.internals.expr.list.ExprListNameSpace.slice", "reference/api/polars.internals.expr.list.ExprListNameSpace.sort", "reference/api/polars.internals.expr.list.ExprListNameSpace.sum", "reference/api/polars.internals.expr.list.ExprListNameSpace.tail", "reference/api/polars.internals.expr.list.ExprListNameSpace.to_struct", "reference/api/polars.internals.expr.list.ExprListNameSpace.unique", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.output_name", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.pop", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.root_names", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases", "reference/api/polars.internals.expr.string.ExprStringNameSpace.concat", "reference/api/polars.internals.expr.string.ExprStringNameSpace.contains", "reference/api/polars.internals.expr.string.ExprStringNameSpace.count_match", "reference/api/polars.internals.expr.string.ExprStringNameSpace.decode", "reference/api/polars.internals.expr.string.ExprStringNameSpace.encode", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ends_with", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract_all", "reference/api/polars.internals.expr.string.ExprStringNameSpace.json_path_match", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lengths", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ljust", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lstrip", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace_all", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rjust", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rstrip", "reference/api/polars.internals.expr.string.ExprStringNameSpace.slice", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split_exact", "reference/api/polars.internals.expr.string.ExprStringNameSpace.splitn", "reference/api/polars.internals.expr.string.ExprStringNameSpace.starts_with", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strip", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strptime", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_lowercase", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_uppercase", "reference/api/polars.internals.expr.string.ExprStringNameSpace.zfill", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.field", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.rename_fields", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/api/polars.internals.series.categorical.CatNameSpace.set_ordering", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.day", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.days", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.epoch", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hour", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hours", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.iso_year", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.max", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.mean", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.median", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.microsecond", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.microseconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.millisecond", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.milliseconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.min", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minute", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minutes", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.month", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanosecond", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanoseconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.offset_by", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.ordinal_day", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.quarter", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.second", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.seconds", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.strftime", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.timestamp", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.truncate", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.week", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.weekday", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.with_time_unit", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.year", "reference/api/polars.internals.series.list.ListNameSpace.arg_max", "reference/api/polars.internals.series.list.ListNameSpace.arg_min", "reference/api/polars.internals.series.list.ListNameSpace.concat", "reference/api/polars.internals.series.list.ListNameSpace.contains", "reference/api/polars.internals.series.list.ListNameSpace.diff", "reference/api/polars.internals.series.list.ListNameSpace.eval", "reference/api/polars.internals.series.list.ListNameSpace.first", "reference/api/polars.internals.series.list.ListNameSpace.get", "reference/api/polars.internals.series.list.ListNameSpace.head", "reference/api/polars.internals.series.list.ListNameSpace.join", "reference/api/polars.internals.series.list.ListNameSpace.last", "reference/api/polars.internals.series.list.ListNameSpace.lengths", "reference/api/polars.internals.series.list.ListNameSpace.max", "reference/api/polars.internals.series.list.ListNameSpace.mean", "reference/api/polars.internals.series.list.ListNameSpace.min", "reference/api/polars.internals.series.list.ListNameSpace.reverse", "reference/api/polars.internals.series.list.ListNameSpace.shift", "reference/api/polars.internals.series.list.ListNameSpace.slice", "reference/api/polars.internals.series.list.ListNameSpace.sort", "reference/api/polars.internals.series.list.ListNameSpace.sum", "reference/api/polars.internals.series.list.ListNameSpace.tail", "reference/api/polars.internals.series.list.ListNameSpace.unique", "reference/api/polars.internals.series.string.StringNameSpace.concat", "reference/api/polars.internals.series.string.StringNameSpace.contains", "reference/api/polars.internals.series.string.StringNameSpace.count_match", "reference/api/polars.internals.series.string.StringNameSpace.decode", "reference/api/polars.internals.series.string.StringNameSpace.encode", "reference/api/polars.internals.series.string.StringNameSpace.ends_with", "reference/api/polars.internals.series.string.StringNameSpace.extract", "reference/api/polars.internals.series.string.StringNameSpace.extract_all", "reference/api/polars.internals.series.string.StringNameSpace.json_path_match", "reference/api/polars.internals.series.string.StringNameSpace.lengths", "reference/api/polars.internals.series.string.StringNameSpace.ljust", "reference/api/polars.internals.series.string.StringNameSpace.lstrip", "reference/api/polars.internals.series.string.StringNameSpace.replace", "reference/api/polars.internals.series.string.StringNameSpace.replace_all", "reference/api/polars.internals.series.string.StringNameSpace.rjust", "reference/api/polars.internals.series.string.StringNameSpace.rstrip", "reference/api/polars.internals.series.string.StringNameSpace.slice", "reference/api/polars.internals.series.string.StringNameSpace.split", "reference/api/polars.internals.series.string.StringNameSpace.split_exact", "reference/api/polars.internals.series.string.StringNameSpace.splitn", "reference/api/polars.internals.series.string.StringNameSpace.starts_with", "reference/api/polars.internals.series.string.StringNameSpace.strip", "reference/api/polars.internals.series.string.StringNameSpace.strptime", "reference/api/polars.internals.series.string.StringNameSpace.to_lowercase", "reference/api/polars.internals.series.string.StringNameSpace.to_uppercase", "reference/api/polars.internals.series.string.StringNameSpace.zfill", "reference/api/polars.internals.series.struct.StructNameSpace.field", "reference/api/polars.internals.series.struct.StructNameSpace.fields", "reference/api/polars.internals.series.struct.StructNameSpace.rename_fields", "reference/api/polars.internals.series.struct.StructNameSpace.to_frame", "reference/api/polars.list", "reference/api/polars.lit", "reference/api/polars.map", "reference/api/polars.max", "reference/api/polars.mean", "reference/api/polars.median", "reference/api/polars.min", "reference/api/polars.n_unique", "reference/api/polars.pearson_corr", "reference/api/polars.quantile", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.repeat", "reference/api/polars.scan_csv", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.select", "reference/api/polars.show_versions", "reference/api/polars.spearman_rank_corr", "reference/api/polars.std", "reference/api/polars.struct", "reference/api/polars.sum", "reference/api/polars.tail", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.column", "reference/api/polars.testing.columns", "reference/api/polars.testing.dataframes", "reference/api/polars.testing.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.var", "reference/api/polars.when", "reference/config", "reference/dataframe", "reference/datatypes", "reference/exceptions", "reference/expression", "reference/functions", "reference/index", "reference/io", "reference/lazyframe", "reference/series", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_global_string_cache.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_change_column_data_type_position_format.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_column_separator.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_utf8_tables.rst", "reference/api/polars.Config.unset_global_string_cache.rst", "reference/api/polars.DataFrame.rst", "reference/api/polars.DataFrame.apply.rst", "reference/api/polars.DataFrame.cleared.rst", "reference/api/polars.DataFrame.clone.rst", "reference/api/polars.DataFrame.columns.rst", "reference/api/polars.DataFrame.describe.rst", "reference/api/polars.DataFrame.drop.rst", "reference/api/polars.DataFrame.drop_in_place.rst", "reference/api/polars.DataFrame.drop_nulls.rst", "reference/api/polars.DataFrame.dtypes.rst", "reference/api/polars.DataFrame.estimated_size.rst", "reference/api/polars.DataFrame.explode.rst", "reference/api/polars.DataFrame.extend.rst", "reference/api/polars.DataFrame.fill_nan.rst", "reference/api/polars.DataFrame.fill_null.rst", "reference/api/polars.DataFrame.filter.rst", "reference/api/polars.DataFrame.find_idx_by_name.rst", "reference/api/polars.DataFrame.fold.rst", "reference/api/polars.DataFrame.frame_equal.rst", "reference/api/polars.DataFrame.get_column.rst", "reference/api/polars.DataFrame.get_columns.rst", "reference/api/polars.DataFrame.groupby.rst", "reference/api/polars.DataFrame.groupby_dynamic.rst", "reference/api/polars.DataFrame.groupby_rolling.rst", "reference/api/polars.DataFrame.hash_rows.rst", "reference/api/polars.DataFrame.head.rst", "reference/api/polars.DataFrame.height.rst", "reference/api/polars.DataFrame.hstack.rst", "reference/api/polars.DataFrame.insert_at_idx.rst", "reference/api/polars.DataFrame.interpolate.rst", "reference/api/polars.DataFrame.is_duplicated.rst", "reference/api/polars.DataFrame.is_empty.rst", "reference/api/polars.DataFrame.is_unique.rst", "reference/api/polars.DataFrame.join.rst", "reference/api/polars.DataFrame.join_asof.rst", "reference/api/polars.DataFrame.lazy.rst", "reference/api/polars.DataFrame.limit.rst", "reference/api/polars.DataFrame.max.rst", "reference/api/polars.DataFrame.mean.rst", "reference/api/polars.DataFrame.median.rst", "reference/api/polars.DataFrame.melt.rst", "reference/api/polars.DataFrame.min.rst", "reference/api/polars.DataFrame.n_chunks.rst", "reference/api/polars.DataFrame.null_count.rst", "reference/api/polars.DataFrame.partition_by.rst", "reference/api/polars.DataFrame.pipe.rst", "reference/api/polars.DataFrame.pivot.rst", "reference/api/polars.DataFrame.product.rst", "reference/api/polars.DataFrame.quantile.rst", "reference/api/polars.DataFrame.rechunk.rst", "reference/api/polars.DataFrame.rename.rst", "reference/api/polars.DataFrame.replace.rst", "reference/api/polars.DataFrame.replace_at_idx.rst", "reference/api/polars.DataFrame.reverse.rst", "reference/api/polars.DataFrame.row.rst", "reference/api/polars.DataFrame.rows.rst", "reference/api/polars.DataFrame.sample.rst", "reference/api/polars.DataFrame.schema.rst", "reference/api/polars.DataFrame.select.rst", "reference/api/polars.DataFrame.shape.rst", "reference/api/polars.DataFrame.shift.rst", "reference/api/polars.DataFrame.shift_and_fill.rst", "reference/api/polars.DataFrame.shrink_to_fit.rst", "reference/api/polars.DataFrame.slice.rst", "reference/api/polars.DataFrame.sort.rst", "reference/api/polars.DataFrame.std.rst", "reference/api/polars.DataFrame.sum.rst", "reference/api/polars.DataFrame.tail.rst", "reference/api/polars.DataFrame.take_every.rst", "reference/api/polars.DataFrame.to_arrow.rst", "reference/api/polars.DataFrame.to_dict.rst", "reference/api/polars.DataFrame.to_dicts.rst", "reference/api/polars.DataFrame.to_dummies.rst", "reference/api/polars.DataFrame.to_numpy.rst", "reference/api/polars.DataFrame.to_pandas.rst", "reference/api/polars.DataFrame.to_series.rst", "reference/api/polars.DataFrame.to_struct.rst", "reference/api/polars.DataFrame.transpose.rst", "reference/api/polars.DataFrame.unique.rst", "reference/api/polars.DataFrame.unnest.rst", "reference/api/polars.DataFrame.unstack.rst", "reference/api/polars.DataFrame.upsample.rst", "reference/api/polars.DataFrame.var.rst", "reference/api/polars.DataFrame.vstack.rst", "reference/api/polars.DataFrame.width.rst", "reference/api/polars.DataFrame.with_column.rst", "reference/api/polars.DataFrame.with_columns.rst", "reference/api/polars.DataFrame.with_row_count.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.Expr.rst", "reference/api/polars.Expr.abs.rst", "reference/api/polars.Expr.agg_groups.rst", "reference/api/polars.Expr.alias.rst", "reference/api/polars.Expr.all.rst", "reference/api/polars.Expr.any.rst", "reference/api/polars.Expr.append.rst", "reference/api/polars.Expr.apply.rst", "reference/api/polars.Expr.arccos.rst", "reference/api/polars.Expr.arccosh.rst", "reference/api/polars.Expr.arcsin.rst", "reference/api/polars.Expr.arcsinh.rst", "reference/api/polars.Expr.arctan.rst", "reference/api/polars.Expr.arctanh.rst", "reference/api/polars.Expr.arg_max.rst", "reference/api/polars.Expr.arg_min.rst", "reference/api/polars.Expr.arg_sort.rst", "reference/api/polars.Expr.arg_unique.rst", "reference/api/polars.Expr.argsort.rst", "reference/api/polars.Expr.arr.rst", "reference/api/polars.Expr.backward_fill.rst", "reference/api/polars.Expr.cast.rst", "reference/api/polars.Expr.cat.rst", "reference/api/polars.Expr.ceil.rst", "reference/api/polars.Expr.clip.rst", "reference/api/polars.Expr.clip_max.rst", "reference/api/polars.Expr.clip_min.rst", "reference/api/polars.Expr.cos.rst", "reference/api/polars.Expr.cosh.rst", "reference/api/polars.Expr.count.rst", "reference/api/polars.Expr.cumcount.rst", "reference/api/polars.Expr.cummax.rst", "reference/api/polars.Expr.cummin.rst", "reference/api/polars.Expr.cumprod.rst", "reference/api/polars.Expr.cumsum.rst", "reference/api/polars.Expr.cumulative_eval.rst", "reference/api/polars.Expr.diff.rst", "reference/api/polars.Expr.dot.rst", "reference/api/polars.Expr.drop_nans.rst", "reference/api/polars.Expr.drop_nulls.rst", "reference/api/polars.Expr.dt.rst", "reference/api/polars.Expr.entropy.rst", "reference/api/polars.Expr.ewm_mean.rst", "reference/api/polars.Expr.ewm_std.rst", "reference/api/polars.Expr.ewm_var.rst", "reference/api/polars.Expr.exclude.rst", "reference/api/polars.Expr.exp.rst", "reference/api/polars.Expr.explode.rst", "reference/api/polars.Expr.extend_constant.rst", "reference/api/polars.Expr.fill_nan.rst", "reference/api/polars.Expr.fill_null.rst", "reference/api/polars.Expr.filter.rst", "reference/api/polars.Expr.first.rst", "reference/api/polars.Expr.flatten.rst", "reference/api/polars.Expr.floor.rst", "reference/api/polars.Expr.forward_fill.rst", "reference/api/polars.Expr.hash.rst", "reference/api/polars.Expr.head.rst", "reference/api/polars.Expr.inspect.rst", "reference/api/polars.Expr.interpolate.rst", "reference/api/polars.Expr.is_between.rst", "reference/api/polars.Expr.is_duplicated.rst", "reference/api/polars.Expr.is_finite.rst", "reference/api/polars.Expr.is_first.rst", "reference/api/polars.Expr.is_in.rst", "reference/api/polars.Expr.is_infinite.rst", "reference/api/polars.Expr.is_nan.rst", "reference/api/polars.Expr.is_not.rst", "reference/api/polars.Expr.is_not_nan.rst", "reference/api/polars.Expr.is_not_null.rst", "reference/api/polars.Expr.is_null.rst", "reference/api/polars.Expr.is_unique.rst", "reference/api/polars.Expr.keep_name.rst", "reference/api/polars.Expr.kurtosis.rst", "reference/api/polars.Expr.last.rst", "reference/api/polars.Expr.len.rst", "reference/api/polars.Expr.limit.rst", "reference/api/polars.Expr.list.rst", "reference/api/polars.Expr.log.rst", "reference/api/polars.Expr.log10.rst", "reference/api/polars.Expr.lower_bound.rst", "reference/api/polars.Expr.map.rst", "reference/api/polars.Expr.map_alias.rst", "reference/api/polars.Expr.max.rst", "reference/api/polars.Expr.mean.rst", "reference/api/polars.Expr.median.rst", "reference/api/polars.Expr.min.rst", "reference/api/polars.Expr.mode.rst", "reference/api/polars.Expr.n_unique.rst", "reference/api/polars.Expr.nan_max.rst", "reference/api/polars.Expr.nan_min.rst", "reference/api/polars.Expr.null_count.rst", "reference/api/polars.Expr.over.rst", "reference/api/polars.Expr.pct_change.rst", "reference/api/polars.Expr.pow.rst", "reference/api/polars.Expr.prefix.rst", "reference/api/polars.Expr.product.rst", "reference/api/polars.Expr.quantile.rst", "reference/api/polars.Expr.rank.rst", "reference/api/polars.Expr.rechunk.rst", "reference/api/polars.Expr.reinterpret.rst", "reference/api/polars.Expr.repeat_by.rst", "reference/api/polars.Expr.reshape.rst", "reference/api/polars.Expr.reverse.rst", "reference/api/polars.Expr.rolling_apply.rst", "reference/api/polars.Expr.rolling_max.rst", "reference/api/polars.Expr.rolling_mean.rst", "reference/api/polars.Expr.rolling_median.rst", "reference/api/polars.Expr.rolling_min.rst", "reference/api/polars.Expr.rolling_quantile.rst", "reference/api/polars.Expr.rolling_skew.rst", "reference/api/polars.Expr.rolling_std.rst", "reference/api/polars.Expr.rolling_sum.rst", "reference/api/polars.Expr.rolling_var.rst", "reference/api/polars.Expr.round.rst", "reference/api/polars.Expr.sample.rst", "reference/api/polars.Expr.search_sorted.rst", "reference/api/polars.Expr.set_sorted.rst", "reference/api/polars.Expr.shift.rst", "reference/api/polars.Expr.shift_and_fill.rst", "reference/api/polars.Expr.shuffle.rst", "reference/api/polars.Expr.sign.rst", "reference/api/polars.Expr.sin.rst", "reference/api/polars.Expr.sinh.rst", "reference/api/polars.Expr.skew.rst", "reference/api/polars.Expr.slice.rst", "reference/api/polars.Expr.sort.rst", "reference/api/polars.Expr.sort_by.rst", "reference/api/polars.Expr.sqrt.rst", "reference/api/polars.Expr.std.rst", "reference/api/polars.Expr.str.rst", "reference/api/polars.Expr.suffix.rst", "reference/api/polars.Expr.sum.rst", "reference/api/polars.Expr.tail.rst", "reference/api/polars.Expr.take.rst", "reference/api/polars.Expr.take_every.rst", "reference/api/polars.Expr.tan.rst", "reference/api/polars.Expr.tanh.rst", "reference/api/polars.Expr.to_physical.rst", "reference/api/polars.Expr.top_k.rst", "reference/api/polars.Expr.unique.rst", "reference/api/polars.Expr.unique_counts.rst", "reference/api/polars.Expr.upper_bound.rst", "reference/api/polars.Expr.value_counts.rst", "reference/api/polars.Expr.var.rst", "reference/api/polars.Expr.where.rst", "reference/api/polars.LazyFrame.cache.rst", "reference/api/polars.LazyFrame.cleared.rst", "reference/api/polars.LazyFrame.clone.rst", "reference/api/polars.LazyFrame.collect.rst", "reference/api/polars.LazyFrame.columns.rst", "reference/api/polars.LazyFrame.describe_optimized_plan.rst", "reference/api/polars.LazyFrame.describe_plan.rst", "reference/api/polars.LazyFrame.drop.rst", "reference/api/polars.LazyFrame.drop_nulls.rst", "reference/api/polars.LazyFrame.dtypes.rst", "reference/api/polars.LazyFrame.explode.rst", "reference/api/polars.LazyFrame.fetch.rst", "reference/api/polars.LazyFrame.fill_nan.rst", "reference/api/polars.LazyFrame.fill_null.rst", "reference/api/polars.LazyFrame.filter.rst", "reference/api/polars.LazyFrame.first.rst", "reference/api/polars.LazyFrame.from_json.rst", "reference/api/polars.LazyFrame.groupby.rst", "reference/api/polars.LazyFrame.groupby_dynamic.rst", "reference/api/polars.LazyFrame.groupby_rolling.rst", "reference/api/polars.LazyFrame.head.rst", "reference/api/polars.LazyFrame.inspect.rst", "reference/api/polars.LazyFrame.interpolate.rst", "reference/api/polars.LazyFrame.join.rst", "reference/api/polars.LazyFrame.join_asof.rst", "reference/api/polars.LazyFrame.last.rst", "reference/api/polars.LazyFrame.limit.rst", "reference/api/polars.LazyFrame.map.rst", "reference/api/polars.LazyFrame.max.rst", "reference/api/polars.LazyFrame.mean.rst", "reference/api/polars.LazyFrame.median.rst", "reference/api/polars.LazyFrame.melt.rst", "reference/api/polars.LazyFrame.min.rst", "reference/api/polars.LazyFrame.pipe.rst", "reference/api/polars.LazyFrame.profile.rst", "reference/api/polars.LazyFrame.quantile.rst", "reference/api/polars.LazyFrame.read_json.rst", "reference/api/polars.LazyFrame.rename.rst", "reference/api/polars.LazyFrame.reverse.rst", "reference/api/polars.LazyFrame.schema.rst", "reference/api/polars.LazyFrame.select.rst", "reference/api/polars.LazyFrame.shift.rst", "reference/api/polars.LazyFrame.shift_and_fill.rst", "reference/api/polars.LazyFrame.show_graph.rst", "reference/api/polars.LazyFrame.slice.rst", "reference/api/polars.LazyFrame.sort.rst", "reference/api/polars.LazyFrame.std.rst", "reference/api/polars.LazyFrame.sum.rst", "reference/api/polars.LazyFrame.tail.rst", "reference/api/polars.LazyFrame.take_every.rst", "reference/api/polars.LazyFrame.unique.rst", "reference/api/polars.LazyFrame.unnest.rst", "reference/api/polars.LazyFrame.var.rst", "reference/api/polars.LazyFrame.with_column.rst", "reference/api/polars.LazyFrame.with_columns.rst", "reference/api/polars.LazyFrame.with_context.rst", "reference/api/polars.LazyFrame.with_row_count.rst", "reference/api/polars.LazyFrame.write_json.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.Series.rst", "reference/api/polars.Series.abs.rst", "reference/api/polars.Series.alias.rst", "reference/api/polars.Series.all.rst", "reference/api/polars.Series.any.rst", "reference/api/polars.Series.append.rst", "reference/api/polars.Series.apply.rst", "reference/api/polars.Series.arccos.rst", "reference/api/polars.Series.arccosh.rst", "reference/api/polars.Series.arcsin.rst", "reference/api/polars.Series.arcsinh.rst", "reference/api/polars.Series.arctan.rst", "reference/api/polars.Series.arctanh.rst", "reference/api/polars.Series.arg_max.rst", "reference/api/polars.Series.arg_min.rst", "reference/api/polars.Series.arg_sort.rst", "reference/api/polars.Series.arg_true.rst", "reference/api/polars.Series.arg_unique.rst", "reference/api/polars.Series.argsort.rst", "reference/api/polars.Series.arr.rst", "reference/api/polars.Series.cast.rst", "reference/api/polars.Series.cat.rst", "reference/api/polars.Series.ceil.rst", "reference/api/polars.Series.chunk_lengths.rst", "reference/api/polars.Series.cleared.rst", "reference/api/polars.Series.clip.rst", "reference/api/polars.Series.clip_max.rst", "reference/api/polars.Series.clip_min.rst", "reference/api/polars.Series.clone.rst", "reference/api/polars.Series.cos.rst", "reference/api/polars.Series.cosh.rst", "reference/api/polars.Series.cummax.rst", "reference/api/polars.Series.cummin.rst", "reference/api/polars.Series.cumprod.rst", "reference/api/polars.Series.cumsum.rst", "reference/api/polars.Series.cumulative_eval.rst", "reference/api/polars.Series.describe.rst", "reference/api/polars.Series.diff.rst", "reference/api/polars.Series.dot.rst", "reference/api/polars.Series.drop_nans.rst", "reference/api/polars.Series.drop_nulls.rst", "reference/api/polars.Series.dt.rst", "reference/api/polars.Series.dtype.rst", "reference/api/polars.Series.entropy.rst", "reference/api/polars.Series.estimated_size.rst", "reference/api/polars.Series.ewm_mean.rst", "reference/api/polars.Series.ewm_std.rst", "reference/api/polars.Series.ewm_var.rst", "reference/api/polars.Series.exp.rst", "reference/api/polars.Series.explode.rst", "reference/api/polars.Series.extend_constant.rst", "reference/api/polars.Series.fill_nan.rst", "reference/api/polars.Series.fill_null.rst", "reference/api/polars.Series.filter.rst", "reference/api/polars.Series.flags.rst", "reference/api/polars.Series.floor.rst", "reference/api/polars.Series.has_validity.rst", "reference/api/polars.Series.hash.rst", "reference/api/polars.Series.head.rst", "reference/api/polars.Series.inner_dtype.rst", "reference/api/polars.Series.interpolate.rst", "reference/api/polars.Series.is_boolean.rst", "reference/api/polars.Series.is_datelike.rst", "reference/api/polars.Series.is_duplicated.rst", "reference/api/polars.Series.is_empty.rst", "reference/api/polars.Series.is_finite.rst", "reference/api/polars.Series.is_first.rst", "reference/api/polars.Series.is_float.rst", "reference/api/polars.Series.is_in.rst", "reference/api/polars.Series.is_infinite.rst", "reference/api/polars.Series.is_nan.rst", "reference/api/polars.Series.is_not_nan.rst", "reference/api/polars.Series.is_not_null.rst", "reference/api/polars.Series.is_null.rst", "reference/api/polars.Series.is_numeric.rst", "reference/api/polars.Series.is_unique.rst", "reference/api/polars.Series.is_utf8.rst", "reference/api/polars.Series.kurtosis.rst", "reference/api/polars.Series.len.rst", "reference/api/polars.Series.limit.rst", "reference/api/polars.Series.log.rst", "reference/api/polars.Series.log10.rst", "reference/api/polars.Series.max.rst", "reference/api/polars.Series.mean.rst", "reference/api/polars.Series.median.rst", "reference/api/polars.Series.min.rst", "reference/api/polars.Series.mode.rst", "reference/api/polars.Series.n_chunks.rst", "reference/api/polars.Series.n_unique.rst", "reference/api/polars.Series.name.rst", "reference/api/polars.Series.nan_max.rst", "reference/api/polars.Series.nan_min.rst", "reference/api/polars.Series.null_count.rst", "reference/api/polars.Series.pct_change.rst", "reference/api/polars.Series.peak_max.rst", "reference/api/polars.Series.peak_min.rst", "reference/api/polars.Series.product.rst", "reference/api/polars.Series.quantile.rst", "reference/api/polars.Series.rank.rst", "reference/api/polars.Series.rechunk.rst", "reference/api/polars.Series.reinterpret.rst", "reference/api/polars.Series.rename.rst", "reference/api/polars.Series.reshape.rst", "reference/api/polars.Series.reverse.rst", "reference/api/polars.Series.rolling_apply.rst", "reference/api/polars.Series.rolling_max.rst", "reference/api/polars.Series.rolling_mean.rst", "reference/api/polars.Series.rolling_median.rst", "reference/api/polars.Series.rolling_min.rst", "reference/api/polars.Series.rolling_quantile.rst", "reference/api/polars.Series.rolling_skew.rst", "reference/api/polars.Series.rolling_std.rst", "reference/api/polars.Series.rolling_sum.rst", "reference/api/polars.Series.rolling_var.rst", "reference/api/polars.Series.round.rst", "reference/api/polars.Series.sample.rst", "reference/api/polars.Series.search_sorted.rst", "reference/api/polars.Series.series_equal.rst", "reference/api/polars.Series.set.rst", "reference/api/polars.Series.set_at_idx.rst", "reference/api/polars.Series.set_sorted.rst", "reference/api/polars.Series.shape.rst", "reference/api/polars.Series.shift.rst", "reference/api/polars.Series.shift_and_fill.rst", "reference/api/polars.Series.shrink_to_fit.rst", "reference/api/polars.Series.shuffle.rst", "reference/api/polars.Series.sign.rst", "reference/api/polars.Series.sin.rst", "reference/api/polars.Series.sinh.rst", "reference/api/polars.Series.skew.rst", "reference/api/polars.Series.slice.rst", "reference/api/polars.Series.sort.rst", "reference/api/polars.Series.sqrt.rst", "reference/api/polars.Series.std.rst", "reference/api/polars.Series.str.rst", "reference/api/polars.Series.sum.rst", "reference/api/polars.Series.tail.rst", "reference/api/polars.Series.take.rst", "reference/api/polars.Series.take_every.rst", "reference/api/polars.Series.tan.rst", "reference/api/polars.Series.tanh.rst", "reference/api/polars.Series.time_unit.rst", "reference/api/polars.Series.to_arrow.rst", "reference/api/polars.Series.to_dummies.rst", "reference/api/polars.Series.to_frame.rst", "reference/api/polars.Series.to_list.rst", "reference/api/polars.Series.to_numpy.rst", "reference/api/polars.Series.to_pandas.rst", "reference/api/polars.Series.to_physical.rst", "reference/api/polars.Series.top_k.rst", "reference/api/polars.Series.unique.rst", "reference/api/polars.Series.unique_counts.rst", "reference/api/polars.Series.value_counts.rst", "reference/api/polars.Series.var.rst", "reference/api/polars.Series.view.rst", "reference/api/polars.Series.zip_with.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.all.rst", "reference/api/polars.any.rst", "reference/api/polars.apply.rst", "reference/api/polars.arange.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.argsort_by.rst", "reference/api/polars.avg.rst", "reference/api/polars.coalesce.rst", "reference/api/polars.col.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.concat_list.rst", "reference/api/polars.concat_str.rst", "reference/api/polars.count.rst", "reference/api/polars.cov.rst", "reference/api/polars.cut.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.datatypes.get_idx_type.rst", "reference/api/polars.date.rst", "reference/api/polars.date_range.rst", "reference/api/polars.datetime.rst", "reference/api/polars.duration.rst", "reference/api/polars.element.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.NotFoundError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.exclude.rst", "reference/api/polars.first.rst", "reference/api/polars.fold.rst", "reference/api/polars.format.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.groups.rst", "reference/api/polars.head.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.agg_list.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.pivot.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.count.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.first.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.last.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.max.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.mean.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.median.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.min.rst", "reference/api/polars.internals.dataframe.pivot.PivotOps.sum.rst", "reference/api/polars.internals.expr.categorical.ExprCatNameSpace.set_ordering.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.day.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.days.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hour.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.hours.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.microsecond.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.microseconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.millisecond.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minute.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.month.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.second.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.week.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit.rst", "reference/api/polars.internals.expr.datetime.ExprDateTimeNameSpace.year.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_max.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.arg_min.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.concat.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.contains.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.diff.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.eval.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.first.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.get.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.head.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.join.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.last.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.lengths.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.max.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.mean.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.min.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.reverse.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.shift.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.slice.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.sort.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.sum.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.tail.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.to_struct.rst", "reference/api/polars.internals.expr.list.ExprListNameSpace.unique.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.output_name.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.pop.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.root_names.rst", "reference/api/polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.concat.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.contains.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.count_match.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.decode.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.encode.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ends_with.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.extract_all.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.json_path_match.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lengths.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.ljust.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.lstrip.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.replace_all.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rjust.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.rstrip.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.slice.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.split_exact.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.splitn.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.starts_with.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strip.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.strptime.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_lowercase.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.to_uppercase.rst", "reference/api/polars.internals.expr.string.ExprStringNameSpace.zfill.rst", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.field.rst", "reference/api/polars.internals.expr.struct.ExprStructNameSpace.rename_fields.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/api/polars.internals.series.categorical.CatNameSpace.set_ordering.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.day.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.days.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.epoch.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hour.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.hours.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.iso_year.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.max.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.mean.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.median.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.microsecond.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.microseconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.millisecond.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.milliseconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.min.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minute.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.minutes.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.month.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanosecond.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.nanoseconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.offset_by.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.ordinal_day.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.quarter.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.second.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.seconds.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.strftime.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.timestamp.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.truncate.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.week.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.weekday.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.with_time_unit.rst", "reference/api/polars.internals.series.datetime.DateTimeNameSpace.year.rst", "reference/api/polars.internals.series.list.ListNameSpace.arg_max.rst", "reference/api/polars.internals.series.list.ListNameSpace.arg_min.rst", "reference/api/polars.internals.series.list.ListNameSpace.concat.rst", "reference/api/polars.internals.series.list.ListNameSpace.contains.rst", "reference/api/polars.internals.series.list.ListNameSpace.diff.rst", "reference/api/polars.internals.series.list.ListNameSpace.eval.rst", "reference/api/polars.internals.series.list.ListNameSpace.first.rst", "reference/api/polars.internals.series.list.ListNameSpace.get.rst", "reference/api/polars.internals.series.list.ListNameSpace.head.rst", "reference/api/polars.internals.series.list.ListNameSpace.join.rst", "reference/api/polars.internals.series.list.ListNameSpace.last.rst", "reference/api/polars.internals.series.list.ListNameSpace.lengths.rst", "reference/api/polars.internals.series.list.ListNameSpace.max.rst", "reference/api/polars.internals.series.list.ListNameSpace.mean.rst", "reference/api/polars.internals.series.list.ListNameSpace.min.rst", "reference/api/polars.internals.series.list.ListNameSpace.reverse.rst", "reference/api/polars.internals.series.list.ListNameSpace.shift.rst", "reference/api/polars.internals.series.list.ListNameSpace.slice.rst", "reference/api/polars.internals.series.list.ListNameSpace.sort.rst", "reference/api/polars.internals.series.list.ListNameSpace.sum.rst", "reference/api/polars.internals.series.list.ListNameSpace.tail.rst", "reference/api/polars.internals.series.list.ListNameSpace.unique.rst", "reference/api/polars.internals.series.string.StringNameSpace.concat.rst", "reference/api/polars.internals.series.string.StringNameSpace.contains.rst", "reference/api/polars.internals.series.string.StringNameSpace.count_match.rst", "reference/api/polars.internals.series.string.StringNameSpace.decode.rst", "reference/api/polars.internals.series.string.StringNameSpace.encode.rst", "reference/api/polars.internals.series.string.StringNameSpace.ends_with.rst", "reference/api/polars.internals.series.string.StringNameSpace.extract.rst", "reference/api/polars.internals.series.string.StringNameSpace.extract_all.rst", "reference/api/polars.internals.series.string.StringNameSpace.json_path_match.rst", "reference/api/polars.internals.series.string.StringNameSpace.lengths.rst", "reference/api/polars.internals.series.string.StringNameSpace.ljust.rst", "reference/api/polars.internals.series.string.StringNameSpace.lstrip.rst", "reference/api/polars.internals.series.string.StringNameSpace.replace.rst", "reference/api/polars.internals.series.string.StringNameSpace.replace_all.rst", "reference/api/polars.internals.series.string.StringNameSpace.rjust.rst", "reference/api/polars.internals.series.string.StringNameSpace.rstrip.rst", "reference/api/polars.internals.series.string.StringNameSpace.slice.rst", "reference/api/polars.internals.series.string.StringNameSpace.split.rst", "reference/api/polars.internals.series.string.StringNameSpace.split_exact.rst", "reference/api/polars.internals.series.string.StringNameSpace.splitn.rst", "reference/api/polars.internals.series.string.StringNameSpace.starts_with.rst", "reference/api/polars.internals.series.string.StringNameSpace.strip.rst", "reference/api/polars.internals.series.string.StringNameSpace.strptime.rst", "reference/api/polars.internals.series.string.StringNameSpace.to_lowercase.rst", "reference/api/polars.internals.series.string.StringNameSpace.to_uppercase.rst", "reference/api/polars.internals.series.string.StringNameSpace.zfill.rst", "reference/api/polars.internals.series.struct.StructNameSpace.field.rst", "reference/api/polars.internals.series.struct.StructNameSpace.fields.rst", "reference/api/polars.internals.series.struct.StructNameSpace.rename_fields.rst", "reference/api/polars.internals.series.struct.StructNameSpace.to_frame.rst", "reference/api/polars.list.rst", "reference/api/polars.lit.rst", "reference/api/polars.map.rst", "reference/api/polars.max.rst", "reference/api/polars.mean.rst", "reference/api/polars.median.rst", "reference/api/polars.min.rst", "reference/api/polars.n_unique.rst", "reference/api/polars.pearson_corr.rst", "reference/api/polars.quantile.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.repeat.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.select.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.spearman_rank_corr.rst", "reference/api/polars.std.rst", "reference/api/polars.struct.rst", "reference/api/polars.sum.rst", "reference/api/polars.tail.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.column.rst", "reference/api/polars.testing.columns.rst", "reference/api/polars.testing.dataframes.rst", "reference/api/polars.testing.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.var.rst", "reference/api/polars.when.rst", "reference/config.rst", "reference/dataframe.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expression.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe.rst", "reference/series.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_str_lengths", "polars.Config.set_global_string_cache", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_change_column_data_type_position_format", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_column_separator", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_utf8_tables", "polars.Config.unset_global_string_cache", "polars.DataFrame", "polars.DataFrame.apply", "polars.DataFrame.cleared", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_column", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.Expr", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr", "polars.Expr.backward_fill", "polars.Expr.cast", "polars.Expr.cat", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.LazyFrame.cache", "polars.LazyFrame.cleared", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.describe_optimized_plan", "polars.LazyFrame.describe_plan", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.var", "polars.LazyFrame.with_column", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.Series", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.cast", "polars.Series.cat", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.cleared", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_boolean", "polars.Series.is_datelike", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "polars.StringCache", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_where", "polars.argsort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.collect_all", "polars.concat", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.cut", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Duration", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.datatypes.get_idx_type", "polars.date", "polars.date_range", "polars.datetime", "polars.duration", "polars.element", "polars.exceptions.ArrowError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.NotFoundError", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.ShapeError", "polars.exceptions.TooManyRowsReturned", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_arrow", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.groups", "polars.head", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.agg_list", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.pivot", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "polars.internals.dataframe.pivot.PivotOps.count", "polars.internals.dataframe.pivot.PivotOps.first", "polars.internals.dataframe.pivot.PivotOps.last", "polars.internals.dataframe.pivot.PivotOps.max", "polars.internals.dataframe.pivot.PivotOps.mean", "polars.internals.dataframe.pivot.PivotOps.median", "polars.internals.dataframe.pivot.PivotOps.min", "polars.internals.dataframe.pivot.PivotOps.sum", "polars.internals.expr.categorical.ExprCatNameSpace.set_ordering", "polars.internals.expr.datetime.ExprDateTimeNameSpace.cast_time_unit", "polars.internals.expr.datetime.ExprDateTimeNameSpace.day", "polars.internals.expr.datetime.ExprDateTimeNameSpace.days", "polars.internals.expr.datetime.ExprDateTimeNameSpace.epoch", "polars.internals.expr.datetime.ExprDateTimeNameSpace.hour", "polars.internals.expr.datetime.ExprDateTimeNameSpace.hours", "polars.internals.expr.datetime.ExprDateTimeNameSpace.iso_year", "polars.internals.expr.datetime.ExprDateTimeNameSpace.microsecond", "polars.internals.expr.datetime.ExprDateTimeNameSpace.microseconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.millisecond", "polars.internals.expr.datetime.ExprDateTimeNameSpace.milliseconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.minute", "polars.internals.expr.datetime.ExprDateTimeNameSpace.minutes", "polars.internals.expr.datetime.ExprDateTimeNameSpace.month", "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanosecond", "polars.internals.expr.datetime.ExprDateTimeNameSpace.nanoseconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.offset_by", "polars.internals.expr.datetime.ExprDateTimeNameSpace.ordinal_day", "polars.internals.expr.datetime.ExprDateTimeNameSpace.quarter", "polars.internals.expr.datetime.ExprDateTimeNameSpace.second", "polars.internals.expr.datetime.ExprDateTimeNameSpace.seconds", "polars.internals.expr.datetime.ExprDateTimeNameSpace.strftime", "polars.internals.expr.datetime.ExprDateTimeNameSpace.timestamp", "polars.internals.expr.datetime.ExprDateTimeNameSpace.truncate", "polars.internals.expr.datetime.ExprDateTimeNameSpace.week", "polars.internals.expr.datetime.ExprDateTimeNameSpace.weekday", "polars.internals.expr.datetime.ExprDateTimeNameSpace.with_time_unit", "polars.internals.expr.datetime.ExprDateTimeNameSpace.year", "polars.internals.expr.list.ExprListNameSpace.arg_max", "polars.internals.expr.list.ExprListNameSpace.arg_min", "polars.internals.expr.list.ExprListNameSpace.concat", "polars.internals.expr.list.ExprListNameSpace.contains", "polars.internals.expr.list.ExprListNameSpace.diff", "polars.internals.expr.list.ExprListNameSpace.eval", "polars.internals.expr.list.ExprListNameSpace.first", "polars.internals.expr.list.ExprListNameSpace.get", "polars.internals.expr.list.ExprListNameSpace.head", "polars.internals.expr.list.ExprListNameSpace.join", "polars.internals.expr.list.ExprListNameSpace.last", "polars.internals.expr.list.ExprListNameSpace.lengths", "polars.internals.expr.list.ExprListNameSpace.max", "polars.internals.expr.list.ExprListNameSpace.mean", "polars.internals.expr.list.ExprListNameSpace.min", "polars.internals.expr.list.ExprListNameSpace.reverse", "polars.internals.expr.list.ExprListNameSpace.shift", "polars.internals.expr.list.ExprListNameSpace.slice", "polars.internals.expr.list.ExprListNameSpace.sort", "polars.internals.expr.list.ExprListNameSpace.sum", "polars.internals.expr.list.ExprListNameSpace.tail", "polars.internals.expr.list.ExprListNameSpace.to_struct", "polars.internals.expr.list.ExprListNameSpace.unique", "polars.internals.expr.meta.ExprMetaNameSpace.output_name", "polars.internals.expr.meta.ExprMetaNameSpace.pop", "polars.internals.expr.meta.ExprMetaNameSpace.root_names", "polars.internals.expr.meta.ExprMetaNameSpace.undo_aliases", "polars.internals.expr.string.ExprStringNameSpace.concat", "polars.internals.expr.string.ExprStringNameSpace.contains", "polars.internals.expr.string.ExprStringNameSpace.count_match", "polars.internals.expr.string.ExprStringNameSpace.decode", "polars.internals.expr.string.ExprStringNameSpace.encode", "polars.internals.expr.string.ExprStringNameSpace.ends_with", "polars.internals.expr.string.ExprStringNameSpace.extract", "polars.internals.expr.string.ExprStringNameSpace.extract_all", "polars.internals.expr.string.ExprStringNameSpace.json_path_match", "polars.internals.expr.string.ExprStringNameSpace.lengths", "polars.internals.expr.string.ExprStringNameSpace.ljust", "polars.internals.expr.string.ExprStringNameSpace.lstrip", "polars.internals.expr.string.ExprStringNameSpace.replace", "polars.internals.expr.string.ExprStringNameSpace.replace_all", "polars.internals.expr.string.ExprStringNameSpace.rjust", "polars.internals.expr.string.ExprStringNameSpace.rstrip", "polars.internals.expr.string.ExprStringNameSpace.slice", "polars.internals.expr.string.ExprStringNameSpace.split", "polars.internals.expr.string.ExprStringNameSpace.split_exact", "polars.internals.expr.string.ExprStringNameSpace.splitn", "polars.internals.expr.string.ExprStringNameSpace.starts_with", "polars.internals.expr.string.ExprStringNameSpace.strip", "polars.internals.expr.string.ExprStringNameSpace.strptime", "polars.internals.expr.string.ExprStringNameSpace.to_lowercase", "polars.internals.expr.string.ExprStringNameSpace.to_uppercase", "polars.internals.expr.string.ExprStringNameSpace.zfill", "polars.internals.expr.struct.ExprStructNameSpace.field", "polars.internals.expr.struct.ExprStructNameSpace.rename_fields", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "polars.internals.series.categorical.CatNameSpace.set_ordering", "polars.internals.series.datetime.DateTimeNameSpace.cast_time_unit", "polars.internals.series.datetime.DateTimeNameSpace.day", "polars.internals.series.datetime.DateTimeNameSpace.days", "polars.internals.series.datetime.DateTimeNameSpace.epoch", "polars.internals.series.datetime.DateTimeNameSpace.hour", "polars.internals.series.datetime.DateTimeNameSpace.hours", "polars.internals.series.datetime.DateTimeNameSpace.iso_year", "polars.internals.series.datetime.DateTimeNameSpace.max", "polars.internals.series.datetime.DateTimeNameSpace.mean", "polars.internals.series.datetime.DateTimeNameSpace.median", "polars.internals.series.datetime.DateTimeNameSpace.microsecond", "polars.internals.series.datetime.DateTimeNameSpace.microseconds", "polars.internals.series.datetime.DateTimeNameSpace.millisecond", "polars.internals.series.datetime.DateTimeNameSpace.milliseconds", "polars.internals.series.datetime.DateTimeNameSpace.min", "polars.internals.series.datetime.DateTimeNameSpace.minute", "polars.internals.series.datetime.DateTimeNameSpace.minutes", "polars.internals.series.datetime.DateTimeNameSpace.month", "polars.internals.series.datetime.DateTimeNameSpace.nanosecond", "polars.internals.series.datetime.DateTimeNameSpace.nanoseconds", "polars.internals.series.datetime.DateTimeNameSpace.offset_by", "polars.internals.series.datetime.DateTimeNameSpace.ordinal_day", "polars.internals.series.datetime.DateTimeNameSpace.quarter", "polars.internals.series.datetime.DateTimeNameSpace.second", "polars.internals.series.datetime.DateTimeNameSpace.seconds", "polars.internals.series.datetime.DateTimeNameSpace.strftime", "polars.internals.series.datetime.DateTimeNameSpace.timestamp", "polars.internals.series.datetime.DateTimeNameSpace.truncate", "polars.internals.series.datetime.DateTimeNameSpace.week", "polars.internals.series.datetime.DateTimeNameSpace.weekday", "polars.internals.series.datetime.DateTimeNameSpace.with_time_unit", "polars.internals.series.datetime.DateTimeNameSpace.year", "polars.internals.series.list.ListNameSpace.arg_max", "polars.internals.series.list.ListNameSpace.arg_min", "polars.internals.series.list.ListNameSpace.concat", "polars.internals.series.list.ListNameSpace.contains", "polars.internals.series.list.ListNameSpace.diff", "polars.internals.series.list.ListNameSpace.eval", "polars.internals.series.list.ListNameSpace.first", "polars.internals.series.list.ListNameSpace.get", "polars.internals.series.list.ListNameSpace.head", "polars.internals.series.list.ListNameSpace.join", "polars.internals.series.list.ListNameSpace.last", "polars.internals.series.list.ListNameSpace.lengths", "polars.internals.series.list.ListNameSpace.max", "polars.internals.series.list.ListNameSpace.mean", "polars.internals.series.list.ListNameSpace.min", "polars.internals.series.list.ListNameSpace.reverse", "polars.internals.series.list.ListNameSpace.shift", "polars.internals.series.list.ListNameSpace.slice", "polars.internals.series.list.ListNameSpace.sort", "polars.internals.series.list.ListNameSpace.sum", "polars.internals.series.list.ListNameSpace.tail", "polars.internals.series.list.ListNameSpace.unique", "polars.internals.series.string.StringNameSpace.concat", "polars.internals.series.string.StringNameSpace.contains", "polars.internals.series.string.StringNameSpace.count_match", "polars.internals.series.string.StringNameSpace.decode", "polars.internals.series.string.StringNameSpace.encode", "polars.internals.series.string.StringNameSpace.ends_with", "polars.internals.series.string.StringNameSpace.extract", "polars.internals.series.string.StringNameSpace.extract_all", "polars.internals.series.string.StringNameSpace.json_path_match", "polars.internals.series.string.StringNameSpace.lengths", "polars.internals.series.string.StringNameSpace.ljust", "polars.internals.series.string.StringNameSpace.lstrip", "polars.internals.series.string.StringNameSpace.replace", "polars.internals.series.string.StringNameSpace.replace_all", "polars.internals.series.string.StringNameSpace.rjust", "polars.internals.series.string.StringNameSpace.rstrip", "polars.internals.series.string.StringNameSpace.slice", "polars.internals.series.string.StringNameSpace.split", "polars.internals.series.string.StringNameSpace.split_exact", "polars.internals.series.string.StringNameSpace.splitn", "polars.internals.series.string.StringNameSpace.starts_with", "polars.internals.series.string.StringNameSpace.strip", "polars.internals.series.string.StringNameSpace.strptime", "polars.internals.series.string.StringNameSpace.to_lowercase", "polars.internals.series.string.StringNameSpace.to_uppercase", "polars.internals.series.string.StringNameSpace.zfill", "polars.internals.series.struct.StructNameSpace.field", "polars.internals.series.struct.StructNameSpace.fields", "polars.internals.series.struct.StructNameSpace.rename_fields", "polars.internals.series.struct.StructNameSpace.to_frame", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.read_avro", "polars.read_csv", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.repeat", "polars.scan_csv", "polars.scan_ds", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.select", "polars.show_versions", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.column", "polars.testing.columns", "polars.testing.dataframes", "polars.testing.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.var", "polars.when", "Config", "DataFrame", "Data Types", "Exceptions", "Expressions", "Functions", "API reference", "Input/output", "LazyFrame", "Series", "Utils", "Testing", "Utils"], "terms": {"api": [0, 17, 117, 544, 546, 653, 763, 785], "refer": [0, 101, 208, 415, 646, 733, 752, 753], "input": [0, 189, 398, 476, 532, 621, 627, 714, 743, 744, 747, 752, 753, 790], "output": [0, 17, 38, 39, 60, 62, 97, 105, 107, 108, 113, 117, 191, 192, 253, 274, 275, 283, 313, 323, 469, 476, 515, 620, 653, 743, 753, 769, 776, 790], "function": [0, 17, 26, 33, 56, 61, 62, 93, 96, 114, 117, 145, 152, 153, 154, 191, 192, 202, 214, 215, 216, 217, 218, 219, 221, 222, 223, 234, 248, 283, 287, 289, 323, 352, 361, 362, 363, 364, 421, 435, 436, 441, 446, 474, 476, 478, 489, 532, 533, 546, 556, 618, 653, 684, 743, 752, 753, 762, 777, 790], "seri": [0, 16, 17, 23, 31, 33, 35, 36, 40, 43, 44, 46, 48, 53, 54, 57, 67, 68, 74, 82, 86, 91, 92, 101, 102, 116, 117, 118, 119, 120, 121, 122, 123, 126, 128, 133, 137, 138, 157, 158, 163, 164, 168, 170, 172, 173, 174, 175, 176, 178, 179, 180, 190, 191, 204, 208, 209, 210, 211, 212, 214, 227, 232, 233, 244, 245, 246, 247, 252, 270, 296, 309, 310, 473, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 489, 515, 532, 533, 535, 536, 539, 543, 545, 568, 569, 571, 574, 577, 579, 581, 584, 589, 592, 595, 597, 598, 599, 601, 605, 606, 613, 614, 617, 618, 624, 640, 646, 650, 742, 743, 744, 745, 746, 747, 748, 761, 767, 770, 771, 772, 773, 775, 776, 782, 790], "datafram": [0, 6, 11, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 259, 260, 263, 264, 265, 266, 267, 270, 271, 273, 274, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 315, 317, 322, 353, 460, 461, 469, 473, 474, 477, 478, 481, 482, 483, 484, 485, 486, 489, 517, 518, 531, 534, 535, 536, 537, 538, 539, 540, 541, 568, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 615, 616, 618, 619, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 694, 717, 719, 729, 730, 740, 751, 752, 753, 754, 756, 757, 758, 760, 762, 764, 765, 766, 767, 771, 772, 774, 776, 777, 783, 788, 790], "lazyfram": [0, 16, 51, 161, 314, 316, 483, 484, 762, 763, 764, 765, 766, 774, 778, 790, 794], "express": [0, 17, 29, 31, 37, 62, 70, 80, 102, 110, 113, 114, 116, 117, 134, 135, 136, 139, 145, 147, 155, 161, 168, 170, 174, 177, 182, 185, 190, 191, 192, 204, 205, 206, 211, 225, 226, 227, 229, 235, 241, 244, 250, 252, 255, 259, 267, 270, 290, 298, 299, 301, 309, 310, 311, 342, 343, 344, 352, 433, 440, 477, 478, 481, 482, 483, 488, 518, 531, 532, 533, 534, 544, 546, 585, 602, 620, 621, 632, 646, 652, 653, 677, 694, 719, 742, 743, 749, 761, 767, 769, 771, 772, 776, 778, 779, 783, 790], "data": [0, 5, 8, 16, 18, 19, 28, 49, 51, 61, 65, 71, 72, 78, 85, 89, 90, 131, 169, 208, 224, 225, 234, 248, 250, 257, 258, 267, 289, 317, 322, 337, 341, 345, 357, 359, 415, 431, 432, 441, 446, 462, 463, 465, 467, 471, 473, 481, 484, 492, 522, 523, 528, 529, 535, 536, 537, 538, 539, 540, 569, 588, 595, 652, 657, 687, 752, 753, 754, 755, 759, 760, 762, 769, 774, 775, 777, 778, 779, 790], "type": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 25, 27, 33, 38, 39, 40, 54, 73, 85, 89, 90, 92, 94, 95, 117, 131, 134, 135, 136, 155, 166, 170, 172, 174, 175, 191, 211, 248, 259, 265, 267, 274, 275, 283, 290, 295, 299, 306, 307, 317, 323, 337, 342, 343, 344, 359, 374, 376, 441, 462, 463, 465, 472, 476, 482, 483, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 522, 531, 532, 535, 537, 540, 568, 571, 574, 577, 579, 581, 584, 589, 606, 618, 641, 642, 643, 646, 653, 656, 659, 662, 668, 670, 673, 676, 681, 698, 728, 729, 730, 733, 742, 743, 752, 753, 755, 759, 762, 768, 774, 775, 776, 777, 778, 779, 781, 790], "config": [0, 102, 310, 790], "except": [0, 50, 280, 463, 790], "test": [0, 276, 282, 753, 790], "util": [0, 267, 790], "classmethod": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 272, 292], "cfg": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 792, 794], "us": [1, 2, 6, 12, 13, 14, 16, 17, 29, 30, 33, 38, 39, 50, 54, 56, 58, 62, 70, 72, 80, 82, 93, 94, 97, 105, 109, 110, 112, 117, 145, 148, 149, 151, 152, 153, 154, 155, 160, 161, 169, 183, 191, 195, 208, 210, 212, 215, 216, 217, 218, 219, 221, 222, 223, 225, 227, 230, 234, 236, 237, 259, 268, 269, 273, 274, 275, 276, 280, 282, 287, 301, 306, 309, 317, 323, 352, 360, 362, 363, 364, 369, 373, 394, 415, 417, 419, 432, 435, 436, 437, 446, 450, 454, 462, 463, 470, 471, 473, 476, 477, 479, 482, 484, 486, 513, 515, 536, 538, 540, 544, 546, 556, 568, 595, 602, 618, 627, 628, 629, 634, 638, 640, 642, 644, 646, 653, 656, 687, 694, 714, 715, 721, 725, 727, 729, 733, 742, 744, 747, 752, 753, 754, 758, 760, 761, 762, 763, 764, 765, 766, 772, 776, 777, 778, 779, 788], "ascii": [1, 634, 638, 649, 721, 725, 736], "charact": [1, 2, 13, 14, 105, 163, 585, 634, 638, 641, 642, 649, 677, 721, 725, 728, 729, 736, 752, 762], "print": [1, 2, 6, 12, 14, 25, 37, 51, 168, 277, 385, 421, 768], "tabl": [1, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 62, 85, 90, 96, 316, 535, 556, 752, 762], "n": [2, 6, 12, 17, 28, 38, 41, 52, 60, 72, 83, 84, 90, 145, 146, 158, 167, 186, 203, 211, 225, 234, 243, 245, 249, 259, 276, 282, 304, 305, 317, 322, 352, 354, 367, 375, 396, 410, 432, 446, 450, 453, 455, 458, 466, 470, 494, 495, 515, 543, 549, 559, 569, 572, 591, 595, 601, 605, 617, 642, 643, 654, 655, 657, 660, 683, 687, 693, 697, 709, 729, 730, 752, 761, 762, 773], "int": [2, 6, 12, 13, 17, 26, 29, 30, 32, 40, 41, 42, 44, 50, 52, 53, 54, 57, 58, 68, 70, 72, 75, 76, 77, 79, 81, 82, 83, 84, 91, 96, 98, 100, 103, 105, 109, 130, 134, 135, 136, 145, 146, 152, 153, 154, 158, 159, 160, 165, 166, 167, 170, 186, 203, 204, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 235, 239, 243, 244, 245, 249, 254, 267, 268, 269, 276, 280, 282, 297, 298, 300, 302, 304, 305, 308, 312, 330, 331, 337, 340, 342, 343, 344, 352, 354, 361, 362, 363, 364, 367, 368, 369, 374, 375, 395, 396, 399, 400, 402, 404, 405, 407, 408, 409, 410, 413, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 439, 440, 442, 447, 450, 452, 453, 454, 455, 466, 470, 477, 481, 487, 537, 540, 543, 549, 559, 600, 601, 604, 605, 613, 614, 617, 618, 630, 634, 638, 640, 642, 643, 649, 650, 651, 654, 655, 692, 693, 696, 697, 705, 706, 709, 717, 721, 725, 727, 729, 730, 736, 744, 746, 747, 748, 749, 751, 752, 753, 754, 758, 760, 761, 762, 764, 765, 766, 769, 770, 771, 772, 773, 776, 777, 778, 779, 780, 782], "set": [2, 4, 6, 7, 12, 13, 16, 20, 40, 50, 56, 72, 79, 93, 105, 107, 108, 117, 166, 174, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 230, 234, 235, 259, 260, 267, 279, 280, 283, 287, 300, 313, 317, 322, 323, 371, 374, 385, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 436, 446, 447, 463, 491, 515, 537, 540, 595, 614, 640, 687, 706, 727, 752, 753, 754, 758, 762, 764, 765, 766, 774, 775, 777, 778, 779], "number": [2, 6, 12, 13, 26, 27, 29, 30, 41, 51, 52, 58, 72, 76, 77, 83, 96, 105, 109, 130, 139, 145, 146, 152, 153, 154, 158, 160, 165, 167, 185, 186, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 228, 229, 230, 243, 249, 266, 267, 268, 269, 276, 282, 297, 298, 304, 352, 354, 361, 362, 363, 364, 367, 369, 375, 384, 396, 404, 405, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 439, 440, 442, 450, 453, 466, 470, 487, 527, 543, 547, 549, 559, 573, 575, 580, 582, 588, 593, 594, 596, 601, 605, 613, 617, 618, 642, 643, 654, 655, 661, 663, 672, 674, 680, 685, 686, 688, 693, 697, 705, 709, 729, 730, 752, 753, 762, 765, 769, 773, 777, 778], "string": [2, 3, 15, 33, 38, 39, 50, 80, 96, 97, 105, 107, 108, 110, 215, 216, 217, 218, 219, 221, 222, 223, 240, 259, 261, 262, 267, 272, 274, 275, 280, 313, 317, 451, 473, 482, 486, 491, 494, 512, 515, 534, 568, 585, 592, 606, 656, 677, 684, 698, 752, 762, 776, 777, 779, 781, 790], "valu": [2, 17, 24, 28, 29, 30, 34, 38, 39, 40, 45, 53, 54, 55, 56, 57, 60, 62, 63, 64, 66, 72, 76, 77, 80, 81, 82, 86, 96, 97, 98, 105, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 134, 135, 136, 137, 138, 139, 145, 146, 148, 149, 152, 153, 154, 156, 158, 159, 160, 162, 164, 165, 166, 168, 169, 171, 172, 173, 175, 176, 178, 179, 180, 181, 184, 185, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 207, 208, 211, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 228, 229, 232, 233, 234, 236, 237, 238, 242, 244, 245, 246, 247, 250, 251, 252, 253, 264, 268, 269, 274, 275, 277, 278, 284, 285, 286, 287, 288, 291, 293, 297, 298, 301, 302, 303, 308, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 339, 342, 343, 344, 346, 347, 352, 353, 354, 356, 357, 361, 362, 363, 364, 367, 368, 369, 371, 372, 373, 374, 377, 380, 382, 383, 385, 386, 387, 388, 389, 390, 392, 399, 400, 402, 403, 405, 407, 408, 409, 410, 413, 414, 415, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 433, 434, 435, 436, 439, 440, 444, 445, 446, 452, 454, 455, 456, 457, 465, 468, 469, 471, 472, 481, 484, 486, 487, 489, 502, 503, 511, 532, 533, 537, 539, 547, 548, 550, 551, 552, 554, 555, 556, 560, 561, 562, 563, 564, 565, 566, 568, 570, 582, 586, 593, 597, 598, 601, 603, 604, 605, 607, 609, 610, 611, 613, 616, 617, 619, 624, 625, 626, 627, 628, 629, 630, 631, 632, 636, 637, 640, 642, 643, 644, 649, 652, 656, 658, 674, 678, 685, 689, 690, 693, 695, 696, 697, 699, 701, 702, 703, 705, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 723, 724, 727, 729, 730, 731, 736, 742, 744, 745, 746, 747, 748, 752, 760, 761, 762, 772, 774, 775, 776, 777, 778, 779, 781, 783], "paramet": [2, 6, 12, 13, 16, 17, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 49, 50, 52, 54, 56, 58, 60, 61, 62, 64, 66, 67, 68, 70, 72, 74, 76, 77, 79, 80, 81, 82, 83, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 113, 116, 117, 126, 128, 130, 131, 134, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 158, 160, 161, 165, 166, 167, 170, 174, 183, 186, 188, 191, 192, 202, 203, 207, 208, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 234, 235, 236, 237, 239, 243, 244, 249, 250, 253, 254, 255, 259, 263, 264, 267, 268, 269, 270, 272, 273, 274, 275, 276, 279, 280, 282, 283, 287, 289, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 304, 306, 307, 309, 310, 311, 312, 313, 314, 316, 317, 319, 322, 323, 332, 335, 337, 342, 343, 344, 348, 349, 350, 351, 352, 354, 355, 360, 361, 362, 363, 364, 367, 369, 370, 374, 375, 394, 396, 410, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 442, 446, 447, 448, 450, 453, 454, 461, 462, 463, 466, 467, 469, 470, 472, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 494, 495, 502, 505, 514, 515, 516, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 546, 549, 556, 557, 559, 568, 569, 572, 585, 591, 592, 595, 599, 600, 601, 602, 604, 605, 606, 613, 614, 617, 618, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 636, 637, 638, 640, 641, 642, 643, 644, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 677, 683, 684, 687, 691, 692, 693, 694, 696, 697, 698, 705, 706, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 723, 724, 725, 727, 728, 729, 730, 731, 733, 736, 737, 739, 742, 743, 744, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779], "turn": [3, 15, 163, 253, 259, 267, 283, 290, 483, 752, 762, 781], "global": [3, 15, 259, 267, 473, 778, 781], "cach": [3, 15, 215, 216, 217, 218, 219, 221, 222, 223, 259, 267, 299, 473, 483, 754, 762, 764, 766, 781], "format": [4, 5, 7, 27, 56, 105, 107, 266, 272, 287, 313, 590, 646, 682, 733, 751, 752, 756, 762, 763], "liter": [4, 7, 53, 54, 57, 58, 60, 82, 86, 114, 115, 209, 320, 321, 477, 478, 514, 516, 625, 636, 637, 712, 723, 724, 742, 753, 761, 771, 779, 783], "left": [4, 38, 39, 49, 50, 152, 153, 154, 169, 215, 216, 217, 218, 219, 221, 222, 223, 248, 274, 275, 279, 280, 362, 363, 364, 465, 481, 515, 533, 634, 649, 721, 736, 774, 775], "center": [4, 152, 153, 154, 214, 215, 216, 217, 218, 219, 221, 222, 223, 362, 363, 364, 421, 422, 423, 424, 425, 426, 428, 429, 430], "right": [4, 38, 39, 49, 50, 152, 153, 154, 215, 216, 217, 218, 219, 221, 222, 223, 234, 274, 275, 279, 280, 362, 363, 364, 446, 481, 515, 638, 725, 752, 774, 775], "cell": 4, "align": [4, 649, 736], "rais": [4, 7, 70, 204, 463, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 620, 646, 733, 742, 774, 775], "keyerror": [4, 7], "wrong": [4, 7], "kei": [4, 7, 38, 50, 60, 62, 66, 69, 280, 293, 556], "chang": [5, 96, 97, 145, 182, 203, 215, 216, 217, 218, 219, 221, 222, 223, 352, 410, 441, 489, 684, 752, 763], "posit": [5, 317], "directli": [5, 152, 153, 154, 362, 363, 364, 778, 779], "below": [5, 24, 37, 169, 264, 783], "column": [5, 6, 8, 9, 10, 16, 17, 22, 23, 24, 25, 26, 27, 32, 35, 37, 38, 39, 43, 44, 49, 50, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 66, 67, 68, 73, 74, 80, 81, 82, 86, 88, 91, 93, 94, 95, 96, 97, 98, 101, 102, 103, 114, 115, 117, 126, 128, 155, 161, 182, 202, 205, 209, 211, 215, 216, 217, 218, 219, 221, 222, 223, 236, 237, 241, 255, 263, 264, 265, 266, 273, 274, 275, 279, 280, 283, 284, 285, 286, 287, 288, 291, 293, 295, 296, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 317, 320, 321, 461, 473, 474, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 514, 516, 521, 525, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 556, 570, 573, 575, 576, 578, 580, 582, 583, 586, 587, 588, 593, 594, 596, 599, 620, 622, 642, 643, 646, 658, 661, 663, 667, 669, 672, 674, 675, 678, 679, 680, 685, 686, 688, 691, 729, 730, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 758, 759, 760, 762, 764, 765, 766, 769, 770, 771, 772, 773, 774, 778, 782, 783, 790], "name": [5, 9, 10, 16, 17, 20, 22, 23, 24, 32, 35, 49, 50, 56, 62, 66, 73, 86, 92, 93, 95, 101, 102, 103, 113, 155, 182, 192, 205, 241, 260, 263, 279, 280, 287, 293, 295, 301, 307, 310, 312, 316, 317, 319, 341, 371, 418, 461, 474, 475, 482, 488, 489, 515, 521, 531, 537, 538, 539, 540, 543, 592, 618, 620, 622, 650, 651, 652, 684, 737, 738, 739, 741, 749, 750, 751, 752, 753, 754, 755, 758, 759, 761, 762, 764, 765, 766, 769, 772, 773, 774, 775, 776, 777, 778, 779, 790], "exampl": [6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 260, 264, 265, 266, 270, 273, 275, 277, 278, 279, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 317, 319, 322, 323, 324, 325, 326, 327, 328, 329, 332, 337, 341, 342, 346, 347, 348, 349, 350, 351, 352, 353, 355, 359, 360, 361, 366, 367, 369, 370, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 399, 400, 401, 402, 403, 405, 410, 411, 412, 414, 415, 418, 420, 421, 422, 423, 425, 429, 431, 432, 434, 439, 443, 444, 445, 447, 448, 450, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 472, 473, 474, 477, 478, 481, 482, 484, 485, 486, 489, 515, 517, 518, 531, 534, 535, 536, 537, 538, 539, 540, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 568, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 684, 693, 694, 697, 698, 700, 705, 706, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 727, 729, 730, 731, 733, 742, 753, 760, 762, 763, 767, 768, 771, 772, 774, 775, 776, 777, 778, 779, 783], "pl": [6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 260, 264, 265, 266, 270, 273, 275, 277, 278, 279, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 317, 319, 322, 323, 324, 325, 326, 327, 328, 329, 332, 337, 341, 342, 346, 347, 348, 349, 350, 351, 352, 353, 355, 359, 360, 361, 366, 367, 369, 370, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 399, 400, 401, 402, 403, 405, 410, 411, 412, 414, 415, 417, 418, 420, 421, 422, 423, 425, 429, 431, 432, 434, 435, 436, 439, 443, 444, 445, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 472, 473, 474, 477, 478, 481, 482, 484, 485, 486, 487, 489, 514, 515, 516, 517, 518, 531, 532, 534, 535, 536, 537, 538, 539, 540, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 568, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 677, 684, 693, 694, 697, 698, 700, 705, 706, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 727, 729, 730, 731, 733, 741, 742, 750, 752, 753, 760, 762, 763, 767, 768, 771, 772, 774, 775, 776, 777, 778, 779, 783, 788], "5": [6, 16, 17, 18, 19, 21, 27, 28, 29, 30, 33, 35, 36, 37, 38, 39, 41, 42, 44, 45, 47, 50, 52, 56, 58, 62, 63, 64, 67, 71, 75, 83, 84, 85, 86, 87, 92, 94, 96, 97, 100, 101, 102, 103, 105, 112, 131, 133, 134, 145, 147, 154, 155, 157, 158, 164, 167, 170, 173, 176, 178, 179, 180, 187, 202, 203, 205, 207, 208, 212, 213, 214, 215, 216, 218, 222, 224, 231, 241, 243, 245, 249, 257, 266, 273, 275, 276, 278, 282, 285, 286, 287, 297, 298, 300, 302, 303, 304, 305, 309, 310, 312, 322, 325, 329, 332, 342, 348, 352, 353, 355, 367, 377, 410, 411, 412, 414, 415, 421, 422, 423, 425, 429, 432, 434, 443, 449, 466, 472, 478, 485, 489, 517, 518, 531, 535, 537, 538, 539, 540, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 568, 571, 588, 589, 593, 602, 605, 610, 616, 617, 626, 632, 633, 649, 654, 655, 656, 694, 697, 700, 709, 713, 719, 720, 768, 772, 778, 779], "df": [6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 257, 260, 264, 266, 273, 275, 277, 278, 279, 284, 285, 286, 287, 288, 289, 291, 296, 297, 298, 300, 302, 303, 307, 308, 309, 312, 461, 474, 477, 478, 481, 482, 485, 486, 517, 518, 531, 534, 535, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 615, 616, 618, 619, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 654, 655, 656, 694, 717, 719, 724, 729, 730, 760, 762, 767, 771, 772, 777, 778, 779, 783, 788], "str": [6, 8, 16, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 33, 35, 37, 38, 39, 41, 43, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 67, 68, 69, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 86, 87, 88, 92, 93, 94, 95, 96, 97, 98, 99, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 117, 147, 155, 158, 159, 161, 163, 168, 174, 177, 182, 192, 202, 205, 211, 213, 215, 216, 217, 218, 219, 221, 222, 223, 229, 236, 237, 241, 244, 255, 260, 261, 262, 263, 264, 266, 268, 270, 272, 273, 274, 275, 277, 279, 280, 283, 287, 292, 293, 295, 296, 298, 299, 300, 301, 306, 307, 310, 312, 313, 314, 315, 316, 317, 319, 337, 353, 367, 368, 369, 371, 399, 402, 406, 407, 408, 418, 435, 436, 461, 473, 474, 475, 476, 479, 480, 481, 482, 485, 486, 487, 488, 489, 494, 514, 515, 516, 517, 531, 532, 533, 534, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 585, 590, 592, 599, 600, 606, 618, 620, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 677, 682, 684, 692, 698, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 727, 728, 729, 730, 731, 733, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 769, 770, 771, 772, 773, 776, 777, 778, 779, 782, 788, 793], "i": [6, 16, 17, 24, 26, 34, 37, 38, 39, 40, 44, 45, 47, 50, 51, 54, 56, 60, 62, 70, 72, 79, 82, 85, 87, 93, 94, 96, 97, 102, 105, 107, 108, 109, 114, 115, 116, 117, 145, 152, 153, 154, 157, 163, 166, 168, 170, 183, 191, 202, 208, 210, 212, 215, 216, 217, 218, 219, 221, 222, 223, 225, 226, 227, 230, 234, 235, 236, 237, 253, 259, 264, 267, 273, 274, 275, 278, 280, 283, 287, 290, 300, 306, 310, 313, 317, 321, 322, 323, 352, 361, 362, 363, 364, 366, 373, 374, 377, 378, 379, 381, 391, 393, 394, 415, 417, 419, 432, 433, 434, 435, 436, 437, 446, 447, 450, 459, 463, 469, 470, 473, 477, 479, 483, 484, 485, 487, 489, 513, 515, 521, 522, 524, 525, 533, 535, 538, 539, 540, 544, 546, 556, 585, 602, 604, 614, 621, 626, 630, 631, 632, 634, 638, 640, 643, 646, 649, 653, 677, 684, 694, 696, 706, 713, 717, 718, 719, 721, 725, 727, 730, 736, 742, 752, 754, 758, 760, 762, 763, 764, 765, 766, 767, 772, 776, 777, 778, 779, 785], "rang": [6, 26, 38, 169, 361, 410, 477, 485, 489, 514, 515, 516, 570, 582, 586, 587, 592, 593, 658, 674, 678, 679, 684, 685, 760], "100": [6, 422, 423, 425, 477, 649, 752, 762, 765], "shape": [6, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 74, 76, 77, 79, 80, 81, 82, 83, 84, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 257, 264, 266, 270, 273, 275, 278, 279, 284, 285, 286, 287, 288, 289, 291, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 317, 322, 323, 324, 325, 326, 327, 328, 329, 332, 337, 341, 342, 346, 347, 348, 349, 350, 351, 352, 353, 366, 367, 369, 370, 374, 375, 377, 380, 382, 385, 386, 387, 388, 389, 390, 392, 403, 410, 411, 412, 415, 418, 419, 420, 421, 422, 423, 425, 429, 431, 432, 439, 443, 444, 445, 447, 448, 449, 453, 454, 455, 456, 457, 460, 461, 465, 467, 468, 469, 472, 473, 474, 478, 481, 482, 484, 485, 486, 489, 515, 517, 518, 529, 531, 534, 535, 536, 537, 538, 539, 540, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 568, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 684, 693, 694, 697, 698, 700, 705, 706, 709, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 727, 729, 730, 731, 733, 762, 763, 767, 771, 772, 778, 779, 783], "1": [6, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 260, 264, 265, 266, 270, 273, 274, 275, 277, 278, 279, 280, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 317, 319, 322, 323, 324, 325, 326, 327, 328, 329, 332, 337, 342, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 359, 360, 362, 363, 364, 366, 367, 369, 370, 374, 375, 377, 379, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 395, 399, 400, 401, 402, 403, 405, 410, 411, 412, 414, 415, 418, 419, 420, 426, 429, 431, 432, 433, 434, 439, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 472, 473, 474, 477, 478, 481, 482, 484, 485, 486, 489, 514, 515, 516, 517, 518, 531, 534, 535, 536, 537, 538, 539, 540, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 568, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 624, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 658, 674, 677, 678, 679, 684, 685, 693, 694, 696, 697, 700, 705, 706, 709, 711, 717, 719, 729, 730, 733, 742, 749, 750, 752, 762, 763, 767, 768, 769, 770, 771, 772, 774, 775, 776, 778, 779, 782, 783], "0": [6, 16, 17, 18, 19, 21, 22, 25, 29, 30, 33, 34, 36, 38, 40, 44, 49, 53, 54, 55, 57, 58, 59, 63, 64, 68, 72, 73, 77, 79, 80, 81, 82, 88, 91, 93, 94, 96, 97, 98, 101, 102, 103, 109, 111, 112, 118, 119, 120, 121, 122, 123, 126, 127, 128, 131, 133, 137, 138, 140, 145, 148, 149, 152, 153, 154, 156, 159, 160, 164, 166, 169, 172, 175, 176, 178, 179, 180, 183, 188, 189, 191, 193, 194, 195, 196, 201, 203, 204, 207, 208, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 231, 232, 233, 234, 238, 239, 242, 246, 247, 248, 254, 257, 265, 279, 286, 291, 295, 298, 299, 302, 308, 309, 310, 312, 317, 324, 325, 326, 327, 328, 329, 332, 337, 341, 346, 347, 352, 353, 355, 360, 362, 363, 364, 374, 382, 384, 386, 387, 388, 389, 390, 394, 400, 401, 410, 414, 415, 421, 423, 426, 432, 443, 444, 445, 449, 450, 456, 457, 460, 465, 470, 477, 478, 481, 485, 489, 518, 533, 546, 547, 548, 550, 551, 552, 553, 554, 555, 557, 558, 570, 573, 577, 579, 580, 584, 586, 588, 589, 594, 597, 598, 602, 604, 610, 630, 649, 661, 672, 680, 686, 694, 696, 711, 717, 719, 736, 750, 752, 753, 754, 758, 760, 762, 763, 764, 765, 766, 768, 772, 776, 777, 778, 779, 783], "2": [6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 111, 112, 113, 115, 116, 117, 124, 126, 127, 128, 130, 131, 132, 133, 134, 139, 140, 141, 142, 143, 144, 145, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 234, 235, 236, 237, 238, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 257, 260, 264, 265, 266, 270, 273, 275, 277, 279, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 317, 319, 322, 323, 325, 329, 332, 346, 349, 350, 351, 352, 353, 355, 359, 360, 361, 362, 363, 364, 366, 367, 369, 370, 374, 375, 377, 379, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 395, 397, 399, 400, 401, 402, 403, 405, 410, 411, 412, 414, 415, 418, 420, 421, 422, 423, 426, 429, 431, 432, 434, 439, 444, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 472, 473, 474, 478, 481, 482, 484, 485, 486, 489, 517, 518, 531, 534, 535, 536, 537, 538, 539, 540, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 568, 571, 573, 574, 577, 579, 580, 581, 582, 584, 585, 587, 588, 589, 592, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 624, 626, 629, 631, 632, 633, 636, 637, 640, 642, 643, 644, 647, 648, 650, 651, 653, 654, 655, 656, 684, 693, 694, 697, 698, 700, 705, 706, 709, 711, 713, 718, 719, 723, 724, 729, 730, 742, 760, 762, 763, 767, 768, 771, 772, 774, 775, 778, 783], "98": [6, 44, 236, 237, 244], "99": [6, 29, 30, 44, 47, 112, 158, 160, 236, 237, 244, 360, 367, 481], "i64": [6, 8, 16, 17, 18, 19, 20, 22, 24, 25, 27, 28, 30, 31, 35, 36, 37, 38, 39, 41, 43, 44, 45, 49, 50, 52, 53, 56, 57, 60, 61, 62, 63, 66, 67, 68, 69, 72, 74, 76, 77, 79, 80, 82, 83, 84, 86, 91, 93, 94, 95, 96, 97, 99, 101, 102, 103, 113, 116, 117, 130, 134, 141, 142, 143, 144, 146, 147, 155, 157, 158, 160, 161, 162, 165, 167, 168, 169, 170, 173, 176, 178, 179, 180, 182, 184, 187, 190, 191, 192, 193, 196, 197, 202, 203, 205, 206, 209, 210, 212, 213, 225, 227, 228, 230, 231, 235, 236, 241, 242, 243, 244, 245, 250, 252, 255, 257, 264, 266, 270, 273, 275, 278, 279, 284, 287, 288, 289, 296, 297, 298, 300, 303, 305, 307, 309, 310, 312, 317, 322, 323, 342, 348, 349, 350, 351, 353, 366, 367, 369, 370, 375, 377, 385, 403, 418, 422, 425, 429, 432, 439, 443, 447, 448, 453, 454, 455, 461, 467, 469, 472, 474, 482, 484, 486, 518, 531, 535, 536, 537, 538, 539, 540, 544, 545, 546, 548, 549, 550, 551, 554, 556, 558, 559, 568, 571, 572, 574, 577, 579, 581, 584, 589, 591, 602, 603, 604, 607, 609, 611, 612, 615, 616, 619, 636, 637, 651, 653, 654, 655, 656, 694, 762, 767, 771, 772, 779, 783], "10": [6, 19, 28, 36, 38, 39, 41, 43, 44, 45, 58, 61, 63, 67, 68, 83, 94, 102, 105, 109, 116, 124, 125, 126, 127, 128, 134, 139, 144, 146, 148, 149, 163, 166, 167, 169, 174, 185, 186, 189, 203, 216, 235, 243, 274, 275, 278, 289, 303, 310, 323, 342, 360, 366, 375, 385, 396, 398, 410, 453, 489, 515, 518, 543, 547, 548, 550, 551, 552, 553, 554, 555, 557, 558, 595, 601, 605, 613, 614, 617, 649, 693, 697, 705, 706, 709, 760, 762, 768, 773], "3": [6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 112, 113, 114, 117, 126, 127, 128, 130, 131, 133, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 181, 182, 183, 185, 187, 188, 189, 190, 192, 197, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 234, 236, 237, 238, 241, 243, 244, 245, 251, 252, 253, 255, 257, 260, 264, 265, 266, 270, 273, 274, 275, 277, 278, 279, 280, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 317, 319, 322, 323, 324, 326, 327, 328, 332, 337, 346, 347, 348, 349, 350, 351, 352, 353, 355, 359, 361, 366, 367, 369, 370, 374, 375, 377, 379, 380, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 399, 400, 401, 402, 403, 405, 410, 411, 412, 414, 415, 418, 420, 421, 425, 429, 431, 432, 434, 439, 444, 445, 446, 447, 448, 450, 452, 453, 454, 455, 456, 457, 459, 460, 462, 463, 467, 468, 469, 470, 472, 473, 474, 478, 481, 482, 484, 485, 486, 489, 515, 518, 531, 534, 535, 536, 537, 538, 539, 540, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 568, 569, 570, 571, 572, 573, 580, 582, 586, 587, 588, 591, 592, 593, 594, 595, 600, 601, 602, 603, 604, 605, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 625, 627, 628, 629, 630, 633, 635, 639, 640, 641, 642, 643, 644, 645, 650, 651, 653, 654, 655, 656, 684, 693, 694, 697, 700, 705, 706, 709, 714, 715, 716, 717, 720, 727, 731, 742, 753, 762, 763, 767, 768, 771, 772, 774, 775, 783], "4": [6, 16, 17, 18, 19, 21, 24, 27, 28, 29, 30, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 58, 60, 61, 62, 63, 67, 71, 75, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 111, 112, 116, 117, 127, 130, 131, 133, 134, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 156, 157, 159, 160, 164, 165, 167, 168, 169, 170, 176, 178, 179, 180, 185, 187, 189, 192, 202, 204, 205, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 228, 229, 231, 235, 236, 237, 238, 241, 243, 244, 245, 248, 257, 264, 266, 273, 274, 275, 278, 279, 280, 284, 285, 286, 287, 288, 289, 291, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 322, 325, 332, 342, 352, 353, 355, 366, 369, 377, 380, 385, 387, 388, 389, 390, 392, 410, 411, 412, 415, 429, 432, 434, 443, 447, 448, 454, 455, 465, 472, 473, 478, 481, 484, 486, 515, 518, 535, 536, 537, 538, 539, 540, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 570, 574, 580, 581, 582, 586, 587, 589, 592, 593, 594, 596, 601, 602, 605, 613, 614, 617, 625, 634, 638, 640, 642, 643, 646, 653, 654, 655, 679, 684, 693, 694, 697, 705, 706, 709, 712, 720, 721, 725, 727, 729, 730, 733, 762, 768, 771, 772, 774, 775, 779, 783], "95": [6, 112], "96": [6, 112], "97": [6, 44, 112], "ascii_ful": 7, "ascii_no_bord": 7, "ascii_borders_onli": 7, "ascii_borders_only_condens": 7, "ascii_horizontal_onli": 7, "ascii_markdown": 7, "utf8_ful": 7, "utf8_no_bord": 7, "utf8_borders_onli": 7, "utf8_horizontal_onli": 7, "noth": [7, 626, 630, 631, 632, 713, 717, 718, 719], "style": [7, 62], "hide": [8, 9, 10, 11], "f64": [8, 18, 19, 21, 22, 24, 25, 29, 30, 33, 36, 44, 49, 50, 54, 55, 63, 64, 79, 80, 81, 94, 98, 101, 102, 111, 118, 119, 120, 121, 122, 123, 131, 133, 137, 138, 145, 148, 149, 151, 152, 153, 154, 155, 156, 164, 169, 176, 178, 179, 180, 183, 188, 189, 194, 195, 203, 204, 207, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 232, 233, 234, 238, 239, 246, 247, 254, 257, 264, 279, 285, 286, 291, 302, 308, 309, 310, 324, 325, 326, 327, 328, 329, 346, 347, 352, 353, 410, 421, 423, 431, 444, 445, 449, 456, 457, 481, 485, 489, 531, 548, 550, 551, 552, 553, 554, 557, 558, 588, 610, 763, 778], "etc": [8, 435, 436, 477, 538, 540, 752, 754, 758, 764, 766], "separ": [10, 93, 105, 163, 486, 606, 698], "from": [10, 16, 21, 22, 26, 28, 38, 39, 50, 51, 56, 66, 70, 72, 74, 93, 94, 96, 97, 105, 140, 155, 169, 183, 199, 200, 203, 225, 236, 237, 251, 253, 263, 264, 267, 272, 274, 275, 287, 292, 293, 296, 306, 311, 322, 357, 361, 379, 394, 407, 408, 410, 432, 469, 472, 481, 514, 515, 516, 517, 531, 535, 536, 537, 538, 539, 540, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 630, 646, 658, 659, 661, 662, 663, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 688, 717, 742, 751, 752, 753, 754, 756, 757, 758, 760, 762, 764, 765, 766, 769, 776, 777, 778, 779], "row": [10, 12, 16, 17, 24, 28, 31, 33, 38, 40, 41, 46, 48, 50, 51, 52, 56, 79, 83, 84, 87, 94, 96, 103, 105, 107, 109, 117, 157, 163, 167, 186, 203, 212, 235, 243, 259, 264, 267, 270, 271, 274, 276, 280, 281, 282, 283, 287, 300, 304, 305, 306, 312, 322, 366, 375, 396, 410, 419, 447, 453, 524, 527, 530, 533, 537, 538, 540, 543, 546, 549, 559, 654, 655, 752, 753, 754, 758, 762, 764, 765, 766, 773, 777, 778], "inform": [11, 134, 135, 136, 183, 234, 290, 342, 343, 344, 394, 446], "when": [11, 16, 17, 25, 26, 28, 30, 33, 38, 70, 134, 135, 136, 152, 153, 154, 160, 191, 269, 317, 322, 342, 343, 344, 361, 362, 363, 364, 369, 435, 436, 473, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 621, 646, 752, 754, 758, 762, 764, 765, 778, 779, 781], "displai": 11, "width": [13, 16, 634, 638, 649, 721, 725, 736, 752], "draw": 13, "char": [13, 473], "utf8": [14, 25, 26, 33, 73, 89, 157, 163, 265, 295, 366, 393, 463, 473, 486, 606, 624, 628, 630, 631, 632, 640, 641, 642, 643, 646, 682, 698, 711, 715, 717, 718, 719, 727, 728, 729, 730, 733, 752, 762, 776], "off": [15, 253, 259, 267, 283, 290, 483, 752, 762, 781], "class": [16, 25, 73, 89, 90, 110, 265, 295, 317, 359, 462, 463, 473, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 535, 539, 776, 777, 790, 792, 794], "dict": [16, 60, 66, 73, 86, 87, 109, 283, 293, 295, 371, 536, 537, 653, 752, 753, 754, 755, 758, 759, 762, 764, 766, 778], "sequenc": [16, 28, 37, 49, 74, 93, 97, 102, 155, 170, 174, 191, 279, 296, 301, 310, 317, 322, 385, 436, 474, 475, 476, 479, 481, 482, 483, 484, 485, 486, 505, 531, 533, 536, 537, 538, 540, 544, 652, 743, 744, 747, 767, 771, 772, 777, 778, 779], "ani": [16, 17, 24, 28, 30, 31, 33, 60, 61, 70, 71, 86, 87, 89, 90, 96, 105, 117, 131, 160, 174, 191, 212, 214, 229, 236, 244, 264, 269, 289, 317, 322, 323, 369, 385, 419, 421, 436, 454, 462, 463, 476, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 532, 536, 537, 538, 540, 588, 599, 602, 623, 646, 680, 691, 694, 733, 742, 752, 762, 769, 776, 778, 779], "np": [16, 31, 38, 89, 172, 175, 244, 317, 382, 386, 387, 388, 421, 436, 454, 463, 538], "ndarrai": [16, 31, 89, 244, 317, 436, 454, 463, 538], "pa": [16, 85, 459, 535, 763], "pd": [16, 90, 248, 464, 465, 539, 753, 760], "pli": [16, 31, 38, 39, 49, 62, 244, 274, 275, 279, 454, 515, 533, 557, 568, 569, 572, 591, 595, 601, 618, 627, 628, 656, 657, 660, 683, 687, 693, 714, 715, 750], "none": [16, 17, 18, 21, 24, 29, 30, 38, 39, 40, 45, 49, 50, 56, 59, 70, 72, 77, 79, 86, 88, 93, 94, 95, 96, 97, 102, 104, 105, 106, 107, 108, 109, 113, 116, 117, 127, 130, 134, 139, 148, 149, 152, 153, 154, 155, 158, 159, 160, 165, 166, 169, 176, 177, 178, 179, 180, 182, 185, 191, 201, 203, 209, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 229, 230, 231, 235, 248, 257, 264, 268, 269, 274, 275, 278, 279, 280, 283, 287, 298, 299, 300, 306, 307, 310, 313, 316, 317, 323, 330, 331, 341, 342, 353, 355, 360, 362, 363, 364, 367, 368, 369, 373, 374, 376, 377, 389, 390, 394, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 436, 440, 442, 443, 446, 447, 450, 458, 461, 465, 470, 474, 476, 481, 486, 487, 489, 494, 503, 515, 516, 517, 531, 532, 536, 537, 538, 539, 540, 541, 592, 604, 614, 618, 624, 625, 627, 628, 629, 632, 633, 634, 638, 640, 642, 643, 644, 646, 649, 650, 651, 653, 684, 696, 706, 711, 712, 714, 715, 716, 719, 720, 721, 725, 727, 729, 730, 731, 733, 742, 743, 751, 752, 753, 754, 756, 758, 760, 761, 762, 764, 765, 766, 768, 770, 771, 774, 775, 776, 777, 778, 779, 781, 782], "columnstyp": 16, "orient": [16, 107, 538, 540], "two": [16, 33, 56, 62, 92, 112, 147, 236, 237, 244, 287, 355, 474, 488, 536, 538, 540, 544, 545, 546, 556, 749, 760, 769, 771], "dimension": [16, 317, 536, 538, 540], "structur": [16, 28, 322, 523, 528, 529], "repres": [16, 105, 317, 436, 450, 470, 482, 503, 511, 515, 535, 536, 538, 539, 540, 742], "panda": [16, 90, 248, 464, 465, 539, 753, 760, 768], "variou": [16, 110, 317, 790], "form": [16, 96, 203, 317, 410], "must": [16, 38, 39, 50, 70, 155, 191, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 283, 317, 489, 536, 538, 540, 774], "contain": [16, 62, 174, 290, 317, 371, 404, 459, 536, 539, 626, 629, 630, 631, 632, 643, 644, 713, 716, 717, 718, 719, 730, 731], "mai": [16, 17, 26, 28, 50, 76, 77, 96, 109, 145, 155, 158, 215, 216, 217, 218, 219, 221, 222, 223, 228, 229, 283, 297, 298, 312, 322, 352, 361, 367, 439, 440, 484, 489, 533, 535, 569, 575, 613, 653, 657, 663, 684, 705, 752, 754, 763, 764], "other": [16, 24, 28, 34, 49, 50, 56, 70, 116, 134, 135, 136, 147, 174, 237, 248, 264, 279, 280, 287, 311, 317, 322, 342, 343, 344, 355, 385, 434, 465, 472, 515, 599, 691, 752, 753, 762, 774, 775, 790], "datatyp": [16, 17, 25, 33, 73, 105, 117, 131, 155, 191, 248, 265, 283, 295, 317, 323, 337, 353, 359, 376, 379, 391, 393, 465, 476, 482, 531, 646, 653, 733, 742, 743, 752, 753, 755, 759, 776, 777, 778, 779, 790], "pair": [16, 66, 293], "default": [16, 26, 37, 39, 40, 50, 56, 62, 72, 103, 104, 105, 106, 107, 108, 109, 151, 166, 170, 188, 199, 200, 203, 208, 225, 230, 273, 275, 280, 287, 313, 317, 360, 361, 374, 407, 408, 410, 415, 432, 450, 470, 479, 535, 536, 538, 539, 540, 568, 614, 618, 630, 640, 646, 656, 706, 717, 727, 742, 752, 762, 769, 776, 777, 778, 779], "label": [16, 214, 215, 216, 217, 218, 219, 221, 222, 223, 421, 422, 423, 424, 425, 426, 428, 429, 430, 489, 536, 538, 540], "result": [16, 28, 38, 77, 105, 107, 108, 152, 153, 154, 183, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 227, 229, 256, 283, 298, 313, 322, 362, 363, 364, 394, 419, 421, 422, 423, 424, 425, 426, 428, 429, 430, 437, 440, 463, 536, 538, 540, 544, 641, 642, 728, 729, 743, 760, 762, 764, 766, 772, 779], "If": [16, 17, 28, 38, 39, 50, 56, 60, 72, 79, 89, 90, 93, 105, 107, 108, 109, 117, 134, 135, 136, 161, 183, 191, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 230, 234, 235, 236, 237, 249, 274, 275, 279, 280, 283, 287, 300, 313, 317, 322, 323, 342, 343, 344, 373, 394, 417, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 437, 446, 447, 459, 463, 466, 473, 474, 477, 479, 487, 489, 515, 536, 538, 539, 540, 556, 614, 640, 641, 642, 643, 646, 653, 706, 727, 728, 729, 730, 733, 742, 752, 753, 754, 758, 760, 762, 764, 765, 766, 769], "specifi": [16, 26, 30, 105, 152, 153, 154, 160, 211, 269, 317, 361, 362, 363, 364, 369, 515, 525, 536, 538, 540, 634, 638, 721, 725, 778], "overrid": [16, 536, 776, 777, 779], "alreadi": [16, 145, 352, 536, 602, 694], "present": [16, 174, 536, 778], "match": [16, 50, 70, 280, 484, 527, 536, 538, 540, 625, 626, 629, 631, 632, 636, 637, 644, 646, 712, 713, 716, 718, 719, 723, 724, 731, 733, 774, 775], "dimens": [16, 212, 419, 536, 538, 540], "col": [16, 17, 31, 37, 38, 39, 47, 61, 70, 80, 95, 101, 102, 105, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 156, 157, 161, 162, 163, 164, 168, 169, 170, 171, 173, 174, 177, 181, 182, 183, 184, 188, 189, 190, 193, 194, 195, 196, 198, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 270, 273, 275, 277, 289, 307, 309, 310, 419, 477, 478, 485, 486, 517, 532, 534, 538, 540, 542, 544, 568, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 615, 616, 618, 619, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 677, 694, 717, 719, 733, 750, 762, 771, 772, 777, 778, 783, 788], "whether": [16, 38, 39, 105, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 478, 515, 538, 540, 779], "interpret": [16, 538, 540, 752, 762], "infer": [16, 17, 105, 212, 317, 419, 538, 540, 646, 752, 753, 762, 765, 776], "thi": [16, 17, 24, 26, 28, 33, 37, 38, 39, 40, 44, 46, 48, 50, 51, 53, 54, 55, 56, 57, 58, 60, 63, 64, 65, 72, 74, 77, 79, 81, 82, 85, 87, 89, 90, 93, 94, 96, 97, 98, 99, 103, 105, 107, 109, 114, 116, 117, 126, 128, 139, 145, 155, 157, 158, 163, 168, 169, 170, 174, 185, 190, 191, 199, 200, 202, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 225, 227, 229, 230, 235, 236, 237, 249, 250, 251, 252, 253, 256, 259, 264, 267, 273, 274, 275, 277, 280, 283, 287, 290, 296, 298, 299, 300, 306, 311, 312, 313, 316, 317, 322, 323, 332, 335, 352, 357, 359, 361, 366, 367, 373, 378, 379, 384, 385, 391, 393, 395, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 425, 428, 429, 430, 432, 435, 436, 437, 438, 440, 441, 442, 447, 448, 450, 452, 459, 461, 462, 463, 464, 466, 467, 470, 471, 473, 474, 477, 478, 483, 484, 485, 487, 489, 513, 531, 532, 533, 535, 536, 537, 538, 539, 540, 544, 546, 568, 569, 575, 585, 595, 602, 606, 620, 621, 634, 638, 649, 650, 653, 656, 657, 663, 677, 684, 687, 694, 698, 721, 725, 736, 737, 740, 752, 753, 754, 758, 762, 763, 764, 765, 766, 767, 772, 774, 775, 776, 777, 778, 779, 781, 785, 790, 792], "doe": [16, 28, 251, 267, 273, 283, 322, 373, 441, 471, 527, 532, 538, 540, 595, 651, 687, 752, 753, 762, 774, 775], "yield": [16, 26, 28, 93, 322, 361, 538, 540, 752, 762], "conclus": [16, 538, 540], "note": [16, 17, 29, 37, 38, 39, 49, 50, 54, 70, 87, 89, 93, 94, 97, 143, 144, 148, 149, 215, 216, 217, 218, 219, 221, 222, 223, 234, 242, 259, 267, 268, 274, 275, 276, 282, 299, 306, 350, 351, 435, 436, 441, 446, 452, 463, 515, 538, 540, 556, 585, 602, 646, 677, 694, 752, 760, 777, 778, 779, 785], "some": [16, 24, 264, 385, 752, 762], "method": [16, 24, 45, 64, 104, 106, 109, 110, 114, 129, 132, 150, 207, 208, 215, 216, 217, 218, 219, 221, 222, 223, 240, 251, 264, 278, 291, 317, 323, 336, 338, 358, 377, 414, 415, 426, 451, 465, 473, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 557, 750, 752, 753, 776, 788, 790, 793], "intern": [16, 27, 29, 36, 37, 43, 74, 80, 86, 101, 102, 147, 159, 170, 202, 204, 211, 226, 229, 235, 237, 266, 268, 270, 273, 277, 290, 296, 298, 301, 309, 310, 368, 370, 440, 476, 477, 478, 479, 481, 483, 485, 486, 488, 514, 516, 534, 744, 747, 749, 753, 761, 767, 769, 771, 772, 774, 776, 778, 783], "convert": [16, 71, 86, 87, 88, 89, 90, 92, 462, 463, 464, 539, 541, 618, 740, 753, 760], "befor": [16, 28, 50, 95, 143, 144, 145, 203, 214, 215, 216, 217, 218, 219, 221, 222, 223, 242, 277, 280, 307, 322, 350, 351, 352, 410, 421, 422, 423, 424, 425, 426, 428, 429, 430, 452, 649, 736, 762], "collect": [16, 51, 85, 117, 202, 264, 266, 267, 270, 273, 278, 279, 284, 285, 286, 287, 288, 289, 291, 296, 297, 298, 300, 302, 303, 305, 308, 309, 310, 312, 477, 483, 485, 653, 761, 763, 771], "back": [16, 28, 322], "can": [16, 17, 25, 33, 37, 38, 62, 80, 93, 96, 110, 117, 145, 155, 169, 182, 197, 210, 215, 216, 217, 218, 219, 221, 222, 223, 227, 234, 253, 259, 274, 301, 312, 317, 323, 352, 403, 417, 435, 436, 437, 446, 474, 477, 482, 515, 523, 531, 544, 546, 585, 602, 618, 632, 653, 677, 694, 719, 744, 752, 753, 754, 762, 763, 764, 772, 777, 778, 779, 788], "lead": [16, 227, 244, 253, 283, 437, 635, 639, 645, 649, 653, 722, 732, 736, 744, 747, 769], "unexpect": [16, 526], "behavior": [16, 117, 476, 744, 747], "subclass": 16, "For": [16, 28, 39, 49, 50, 80, 131, 210, 234, 275, 280, 322, 417, 446, 463, 533, 534, 546, 621, 753], "mydatafram": 16, "pass": [16, 109, 168, 277, 283, 299, 323, 515, 536, 572, 660, 753, 777, 778, 779], "isinst": [16, 778, 779], "lazi": [16, 50, 117, 202, 257, 260, 264, 265, 266, 270, 273, 277, 278, 279, 280, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 477, 484, 544, 653, 762, 778, 790, 792], "fals": [16, 18, 19, 21, 33, 34, 36, 37, 38, 43, 44, 46, 47, 48, 50, 54, 58, 60, 62, 63, 72, 78, 80, 86, 90, 93, 94, 97, 99, 102, 107, 109, 114, 115, 126, 128, 140, 141, 142, 143, 144, 145, 151, 152, 153, 154, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 191, 208, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 234, 236, 237, 249, 250, 253, 257, 259, 267, 273, 274, 279, 280, 283, 290, 299, 301, 310, 317, 322, 332, 335, 337, 341, 348, 349, 350, 351, 352, 360, 362, 363, 364, 370, 378, 380, 382, 385, 386, 387, 388, 389, 390, 392, 394, 411, 412, 415, 416, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 434, 437, 441, 446, 448, 462, 463, 466, 467, 469, 471, 472, 477, 478, 479, 483, 547, 548, 550, 551, 552, 554, 558, 588, 600, 602, 615, 625, 627, 629, 636, 637, 641, 642, 644, 646, 680, 694, 707, 712, 714, 716, 723, 724, 728, 729, 731, 733, 742, 752, 753, 754, 758, 761, 762, 765, 766, 769, 771, 774, 775, 776, 777, 778, 779, 783], "construct": [16, 272, 292, 317, 535, 536, 537, 538, 539, 540], "dictionari": [16, 60, 86, 87, 353, 371, 536, 537, 540, 752, 755, 759, 762], "b": [16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 43, 44, 46, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 113, 116, 117, 127, 130, 131, 132, 139, 147, 148, 149, 155, 157, 159, 160, 161, 165, 166, 169, 172, 175, 176, 177, 178, 179, 180, 182, 185, 187, 192, 197, 201, 205, 213, 235, 240, 241, 251, 253, 255, 257, 260, 264, 265, 266, 270, 273, 279, 284, 285, 286, 287, 288, 289, 291, 295, 296, 297, 298, 300, 302, 303, 305, 307, 308, 309, 310, 312, 322, 353, 355, 360, 361, 369, 385, 393, 418, 434, 468, 473, 474, 481, 484, 486, 488, 518, 531, 534, 535, 536, 537, 538, 539, 540, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 568, 599, 602, 606, 608, 636, 650, 651, 653, 654, 655, 656, 694, 723, 749, 753, 769, 771, 772], "notic": [16, 317], "dtype": [16, 38, 39, 50, 90, 117, 118, 119, 120, 121, 122, 123, 126, 128, 131, 134, 135, 136, 137, 138, 143, 144, 155, 157, 163, 190, 191, 210, 211, 215, 216, 217, 218, 219, 221, 222, 223, 232, 233, 242, 244, 246, 247, 248, 252, 253, 274, 275, 280, 317, 337, 341, 342, 343, 344, 350, 351, 361, 366, 376, 381, 420, 434, 452, 463, 465, 476, 485, 487, 531, 571, 574, 577, 579, 581, 584, 589, 595, 597, 598, 599, 606, 624, 640, 659, 662, 668, 670, 673, 676, 681, 687, 689, 690, 691, 698, 711, 727, 733, 742, 743, 752, 762, 771, 776, 777, 778, 779], "automat": [16, 317, 752, 760, 762, 778, 779], "int64": [16, 25, 33, 38, 39, 61, 73, 85, 143, 144, 155, 210, 242, 248, 265, 274, 275, 289, 295, 317, 350, 351, 359, 417, 434, 452, 463, 465, 531, 571, 574, 577, 579, 581, 584, 589, 659, 662, 668, 670, 673, 676, 681], "In": [16, 17, 26, 28, 38, 39, 117, 236, 237, 274, 275, 317, 322, 361, 416, 620, 766, 778, 779], "order": [16, 37, 38, 39, 60, 62, 72, 94, 97, 126, 128, 132, 208, 225, 226, 227, 236, 237, 250, 251, 273, 274, 275, 301, 306, 332, 335, 415, 420, 432, 433, 437, 467, 468, 479, 568, 651, 656, 739, 774], "your": [16, 259, 276, 282, 283, 752, 774, 775], "initi": [16, 533], "list": [16, 20, 22, 24, 25, 26, 27, 31, 36, 38, 39, 43, 50, 56, 58, 60, 62, 71, 80, 86, 87, 88, 93, 94, 95, 96, 102, 110, 112, 129, 155, 157, 163, 182, 191, 202, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 229, 236, 237, 244, 260, 263, 264, 265, 266, 270, 273, 274, 275, 280, 287, 306, 307, 310, 311, 317, 336, 340, 361, 366, 370, 376, 385, 419, 421, 422, 423, 424, 425, 426, 428, 429, 430, 454, 462, 483, 485, 489, 494, 518, 541, 545, 556, 621, 622, 631, 641, 650, 651, 718, 728, 738, 739, 744, 747, 751, 752, 754, 758, 760, 762, 771, 772, 777, 778, 779, 790], "col1": [16, 96], "float32": [16, 33, 105, 317, 381], "col2": [16, 96], "df2": [16, 28, 34, 99, 473, 484, 774], "f32": [16, 208, 317, 415, 518, 602, 694], "Or": [16, 38, 39, 50, 97, 202, 274, 275, 280, 783], "compat": [16, 109], "all": [16, 24, 46, 48, 51, 54, 56, 58, 65, 79, 88, 97, 110, 115, 116, 129, 130, 132, 139, 145, 150, 155, 165, 166, 169, 172, 175, 176, 178, 179, 180, 185, 187, 191, 192, 197, 201, 205, 208, 213, 235, 240, 241, 253, 264, 283, 287, 300, 317, 336, 338, 352, 358, 380, 392, 415, 447, 451, 482, 483, 484, 492, 515, 531, 535, 537, 539, 540, 541, 602, 606, 616, 626, 631, 632, 636, 637, 694, 698, 708, 713, 718, 719, 723, 724, 752, 753, 754, 762, 764, 765, 771, 776, 777, 779, 788, 790], "valid": [16, 26, 145, 236, 352, 361, 373, 625, 626, 630, 631, 632, 712, 713, 717, 718, 719, 723, 724, 754, 758, 779], "df3": 16, "numpi": [16, 89, 199, 200, 317, 382, 386, 387, 388, 407, 408, 421, 463, 471, 538, 768], "import": [16, 21, 38, 50, 90, 96, 97, 105, 283, 346, 379, 382, 386, 387, 388, 421, 444, 456, 494, 515, 517, 535, 538, 539, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 684, 742, 760, 762, 763, 776, 777, 778, 779], "arrai": [16, 26, 85, 89, 134, 135, 136, 140, 141, 142, 143, 144, 189, 215, 216, 218, 221, 222, 223, 227, 317, 342, 343, 344, 348, 349, 350, 351, 361, 398, 422, 423, 425, 428, 429, 430, 437, 441, 459, 463, 471, 485, 502, 518, 535, 538, 599, 608, 609, 610, 611, 612, 615, 616, 626, 628, 630, 631, 632, 691, 700, 701, 702, 703, 704, 707, 708, 713, 715, 717, 718, 719, 752], "df4": 16, "6": [16, 17, 20, 22, 23, 24, 25, 27, 28, 31, 32, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 47, 49, 52, 53, 54, 55, 56, 57, 59, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 95, 96, 97, 98, 99, 101, 102, 103, 105, 117, 130, 131, 143, 144, 147, 151, 157, 159, 160, 165, 167, 169, 187, 202, 206, 208, 209, 212, 215, 216, 217, 218, 219, 221, 222, 223, 236, 237, 243, 245, 260, 264, 265, 266, 270, 273, 275, 278, 279, 287, 295, 296, 297, 298, 300, 305, 307, 309, 310, 312, 322, 346, 350, 351, 353, 355, 366, 415, 434, 452, 474, 518, 535, 537, 538, 539, 540, 544, 549, 556, 558, 559, 570, 585, 586, 587, 588, 594, 626, 654, 655, 686, 713, 771, 772], "c": [16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 31, 32, 33, 34, 36, 37, 38, 41, 43, 44, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 66, 68, 69, 70, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 88, 89, 90, 91, 93, 94, 96, 98, 99, 102, 105, 109, 117, 251, 253, 257, 260, 264, 265, 266, 270, 273, 279, 287, 295, 296, 300, 310, 353, 393, 468, 473, 474, 481, 486, 534, 539, 547, 548, 549, 550, 551, 552, 554, 556, 558, 559, 599, 606, 608, 642, 646, 653, 654, 655, 729, 733, 753, 762, 771, 772, 777], "attribut": [16, 110, 317, 494, 495, 502, 776, 790], "get": [16, 20, 25, 35, 36, 38, 39, 41, 42, 46, 48, 52, 58, 70, 73, 75, 79, 83, 88, 100, 112, 124, 125, 126, 127, 128, 140, 141, 142, 143, 144, 162, 167, 171, 173, 181, 184, 186, 193, 194, 195, 196, 199, 200, 207, 235, 239, 242, 243, 250, 254, 260, 265, 271, 274, 275, 276, 281, 282, 295, 300, 304, 317, 330, 331, 332, 333, 334, 335, 340, 348, 349, 350, 351, 359, 371, 375, 376, 380, 383, 392, 396, 399, 401, 402, 404, 406, 407, 408, 411, 412, 414, 447, 450, 453, 458, 459, 460, 467, 470, 471, 513, 532, 543, 549, 559, 561, 562, 563, 564, 565, 566, 567, 572, 603, 607, 608, 619, 620, 622, 633, 654, 655, 660, 695, 699, 700, 710, 720, 738, 744, 745, 746, 747, 755, 759, 770, 773, 780, 782], "height": [16, 24], "schema": [16, 17, 18, 19, 25, 257, 258, 265, 283, 345, 484, 528, 620, 653, 752, 755, 759, 762, 765, 778], "__init__": [16, 110, 317, 473, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 776], "f": [17, 21, 24, 52, 85, 93, 96, 117, 191, 192, 264, 283, 310, 476, 485, 533, 546, 618, 646, 653, 733, 743], "callabl": [17, 33, 61, 117, 191, 192, 214, 283, 289, 323, 421, 476, 533, 546, 618, 653, 743, 762], "tupl": [17, 70, 71, 75, 212, 290, 299, 419, 438, 760], "return_dtyp": [17, 117, 191, 323, 476, 743], "option": [17, 24, 40, 50, 56, 70, 72, 79, 86, 88, 93, 97, 102, 117, 130, 152, 153, 154, 165, 166, 183, 191, 214, 215, 216, 217, 218, 219, 221, 222, 223, 230, 234, 235, 264, 279, 280, 287, 299, 300, 310, 323, 394, 421, 422, 423, 424, 425, 426, 428, 429, 430, 432, 442, 446, 461, 462, 474, 476, 489, 516, 517, 536, 541, 592, 614, 640, 646, 653, 727, 742, 743, 752, 753, 754, 758, 760, 764, 765, 766, 768, 776, 777, 778, 779], "union": [17, 24, 25, 37, 53, 54, 56, 57, 66, 73, 74, 80, 82, 93, 97, 102, 117, 131, 155, 170, 174, 191, 235, 259, 264, 267, 283, 287, 295, 296, 299, 301, 310, 385, 474, 475, 476, 479, 482, 483, 484, 485, 486, 502, 513, 516, 517, 531, 536, 544, 592, 646, 652, 653, 733, 743, 744, 747, 767, 771, 772, 776, 777, 778, 779], "inference_s": 17, "256": [17, 410], "custom": [17, 117, 191, 214, 283, 323, 421, 476, 546, 618, 653, 743], "user": [17, 117, 227, 323, 437, 476, 546, 653], "defin": [17, 38, 39, 105, 117, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 323, 476, 494, 515, 546, 653, 742, 776, 777, 778], "udf": [17, 117, 323, 476, 546, 653], "over": [17, 28, 37, 93, 117, 145, 160, 169, 191, 192, 214, 215, 216, 217, 218, 219, 221, 222, 223, 322, 323, 352, 421, 422, 423, 425, 429, 476, 533, 546, 556, 653, 743, 752, 762, 778], "The": [17, 38, 39, 40, 45, 50, 70, 95, 97, 109, 117, 130, 158, 163, 165, 166, 191, 208, 211, 214, 215, 216, 217, 218, 219, 221, 222, 223, 234, 237, 257, 259, 267, 273, 274, 275, 276, 278, 280, 282, 283, 290, 307, 341, 367, 374, 377, 415, 421, 422, 423, 424, 425, 426, 428, 429, 430, 446, 479, 502, 505, 546, 556, 570, 582, 585, 586, 592, 593, 624, 627, 628, 634, 638, 649, 653, 658, 674, 677, 678, 684, 685, 711, 714, 715, 721, 725, 736, 752, 758, 760, 762, 788, 793], "receiv": 17, "each": [17, 50, 117, 163, 208, 280, 290, 340, 415, 476, 546, 547, 549, 559, 605, 617, 631, 642, 643, 653, 654, 655, 697, 709, 718, 729, 730, 765, 774, 775, 777], "implement": [17, 109, 117, 546, 653], "logic": [17, 117, 248, 272, 279, 292, 313, 465, 546, 653], "python": [17, 71, 117, 191, 323, 462, 476, 504, 515, 546, 653, 664, 665, 666, 671, 752, 768], "almost": [17, 117, 546, 653], "alwai": [17, 117, 283, 546, 620, 653, 752], "_significantly_": [17, 117, 546, 653], "slower": [17, 60, 97, 107, 117, 538, 540, 546, 653], "more": [17, 37, 51, 56, 70, 72, 94, 107, 109, 117, 134, 135, 136, 183, 191, 225, 234, 250, 273, 287, 306, 323, 342, 343, 344, 394, 432, 446, 467, 530, 546, 653, 758, 772], "memori": [17, 28, 78, 109, 117, 209, 322, 416, 441, 484, 535, 538, 539, 540, 546, 556, 653, 752, 754, 758, 762, 764, 765, 766], "intens": [17, 117, 546, 653], "than": [17, 37, 50, 70, 72, 96, 117, 225, 234, 236, 273, 280, 432, 446, 515, 530, 538, 540, 546, 634, 638, 643, 649, 653, 721, 725, 730, 736, 752, 769, 772], "same": [17, 94, 111, 116, 117, 157, 163, 214, 215, 216, 217, 218, 219, 221, 222, 223, 306, 318, 322, 323, 366, 421, 422, 423, 424, 425, 426, 428, 429, 430, 472, 473, 483, 546, 653, 774, 777], "nativ": [17, 117, 546, 653, 752, 754, 758], "becaus": [17, 26, 38, 51, 96, 117, 274, 323, 361, 546, 602, 653, 694], "engin": [17, 117, 546, 653, 760], "run": [17, 51, 117, 145, 259, 267, 290, 299, 352, 483, 494, 546, 602, 653, 694, 761, 767, 794], "rust": [17, 105, 109, 117, 526, 546, 653, 754, 758], "forc": [17, 50, 117, 279, 280, 546, 653], "materi": [17, 117, 290, 546, 653], "parallelis": [17, 117, 546, 653], "cannot": [17, 72, 117, 225, 299, 432, 546, 642, 653, 729, 752], "optimis": [17, 117, 435, 436, 546, 653], "wherev": [17, 117, 546, 653], "possibl": [17, 117, 190, 252, 317, 546, 620, 643, 653, 730, 752], "you": [17, 24, 28, 50, 89, 93, 109, 117, 134, 135, 136, 155, 161, 191, 210, 215, 216, 217, 218, 219, 221, 222, 223, 259, 264, 276, 280, 282, 299, 317, 322, 342, 343, 344, 417, 463, 471, 477, 536, 546, 556, 602, 653, 694, 752, 753, 762], "should": [17, 38, 50, 104, 105, 106, 107, 108, 109, 112, 117, 145, 214, 215, 216, 217, 218, 219, 221, 222, 223, 226, 234, 263, 279, 280, 283, 299, 313, 323, 352, 421, 422, 423, 424, 425, 426, 428, 429, 430, 433, 446, 546, 568, 595, 602, 653, 656, 687, 694, 742, 776, 777, 779], "strongli": [17, 117, 546, 653], "prefer": [17, 28, 117, 214, 322, 421, 546, 653], "achiev": [17, 117, 546, 653], "best": [17, 117, 546, 653], "perform": [17, 38, 39, 50, 65, 109, 117, 274, 275, 280, 312, 523, 546, 653, 752, 754, 758, 762, 764, 765, 766], "lambda": [17, 24, 33, 117, 152, 153, 154, 191, 192, 214, 264, 283, 323, 362, 363, 364, 546, 618, 653, 762, 772], "oper": [17, 28, 33, 37, 44, 51, 60, 65, 85, 89, 90, 93, 96, 112, 140, 141, 142, 143, 144, 145, 208, 210, 267, 273, 276, 279, 282, 322, 348, 349, 350, 351, 352, 415, 417, 459, 462, 463, 471, 473, 474, 475, 484, 518, 522, 523, 535, 536, 537, 538, 539, 540, 544, 556, 623], "given": [17, 26, 70, 76, 77, 151, 158, 188, 208, 211, 212, 215, 216, 218, 221, 222, 223, 228, 229, 249, 297, 298, 314, 316, 323, 360, 361, 367, 397, 415, 419, 422, 423, 425, 428, 429, 430, 439, 440, 466, 472, 474, 489, 591, 600, 613, 631, 646, 653, 683, 692, 705, 718, 752, 762, 776, 777, 778, 779], "tri": 17, "onli": [17, 24, 37, 50, 54, 80, 82, 112, 133, 134, 135, 136, 164, 210, 251, 259, 264, 276, 280, 282, 301, 339, 342, 343, 344, 372, 417, 459, 473, 484, 585, 677, 752, 753, 754, 758, 761, 762, 764, 765, 766, 771, 778, 779], "case": [17, 28, 38, 39, 191, 274, 275, 317, 322, 620, 621, 766, 783], "return": [17, 18, 22, 24, 25, 26, 27, 29, 30, 33, 41, 43, 49, 51, 52, 58, 60, 61, 62, 70, 72, 83, 84, 90, 93, 94, 101, 105, 107, 108, 114, 115, 118, 119, 120, 121, 122, 123, 126, 128, 137, 138, 157, 163, 167, 170, 172, 173, 174, 175, 176, 178, 179, 180, 186, 190, 197, 211, 212, 225, 232, 233, 243, 244, 245, 246, 247, 249, 251, 252, 253, 259, 265, 267, 276, 282, 283, 289, 290, 299, 305, 306, 313, 319, 320, 321, 323, 333, 353, 361, 366, 371, 373, 375, 376, 380, 382, 383, 385, 386, 387, 388, 389, 390, 392, 396, 403, 419, 420, 432, 434, 436, 453, 455, 466, 468, 472, 476, 477, 478, 482, 483, 489, 514, 515, 516, 517, 524, 527, 530, 535, 536, 537, 538, 539, 540, 543, 544, 546, 549, 553, 559, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 600, 604, 605, 606, 617, 621, 624, 626, 628, 630, 631, 632, 634, 638, 640, 641, 642, 643, 649, 654, 655, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 692, 696, 697, 698, 709, 711, 712, 713, 715, 717, 718, 719, 720, 721, 725, 727, 728, 729, 730, 733, 736, 742, 743, 751, 752, 753, 754, 755, 758, 759, 762, 767, 773, 783], "first": [17, 41, 50, 52, 58, 62, 93, 94, 97, 126, 127, 128, 145, 167, 173, 186, 259, 276, 280, 282, 306, 317, 332, 335, 352, 353, 375, 383, 396, 479, 481, 543, 549, 556, 585, 602, 604, 605, 630, 632, 636, 637, 654, 677, 694, 696, 697, 717, 719, 723, 724, 752, 753, 760, 762, 765], "determin": [17, 33, 38, 39, 93, 97, 211, 215, 216, 217, 218, 219, 221, 222, 223, 234, 274, 275, 446, 479, 484, 511, 537, 540, 568, 618, 620, 656, 752, 753, 758, 766], "frame": [17, 43, 90, 96, 105, 277, 290, 483, 753, 774, 778], "level": [17, 33, 109, 161, 276, 282, 762, 764, 765, 766], "track": 17, "black": [17, 473], "box": 17, "arbitrarili": 17, "drop": [17, 23, 24, 94, 146, 148, 149, 264, 306, 354, 356, 601, 693], "rearrang": 17, "transform": [17, 191, 314, 647, 648], "add": [17, 28, 38, 102, 103, 205, 241, 274, 279, 309, 310, 311, 312, 316, 322, 517, 783], "new": [17, 22, 24, 43, 44, 59, 66, 67, 84, 96, 101, 113, 157, 163, 169, 192, 245, 293, 305, 319, 323, 357, 366, 418, 455, 461, 472, 636, 637, 642, 643, 650, 651, 653, 723, 724, 729, 730, 737, 739], "want": [17, 28, 109, 134, 135, 136, 161, 191, 215, 216, 217, 218, 219, 221, 222, 223, 259, 276, 282, 322, 342, 343, 344, 463], "ar": [17, 24, 26, 29, 33, 38, 39, 50, 51, 56, 70, 86, 90, 97, 109, 114, 143, 144, 148, 149, 151, 172, 174, 175, 176, 178, 179, 180, 183, 208, 211, 212, 214, 220, 234, 236, 237, 242, 264, 268, 274, 275, 276, 280, 282, 283, 287, 290, 311, 317, 320, 322, 350, 351, 360, 361, 371, 373, 382, 385, 386, 387, 388, 389, 390, 394, 415, 419, 421, 427, 446, 452, 463, 471, 473, 477, 479, 484, 486, 515, 524, 530, 535, 537, 539, 540, 592, 618, 684, 752, 753, 760, 762, 764, 765, 769, 774, 775, 777, 778, 781, 788, 790, 793], "preserv": 17, "syntax": [17, 80, 299, 317], "instead": [17, 38, 54, 60, 105, 107, 108, 126, 128, 268, 273, 274, 313, 332, 335, 435, 436, 477, 758, 772, 778], "foo": [17, 20, 22, 23, 24, 25, 28, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 47, 49, 52, 53, 54, 55, 57, 59, 60, 62, 64, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 93, 95, 98, 99, 100, 105, 113, 134, 163, 167, 168, 204, 212, 228, 229, 243, 245, 260, 264, 265, 270, 277, 278, 279, 295, 296, 307, 310, 342, 474, 477, 482, 542, 544, 556, 585, 600, 603, 604, 607, 608, 624, 626, 627, 628, 631, 635, 639, 641, 643, 645, 647, 648, 653, 677, 698, 713, 714, 715, 718, 720, 730, 742, 750, 767, 783], "bar": [17, 20, 22, 23, 24, 25, 28, 31, 32, 33, 34, 35, 36, 41, 43, 44, 45, 47, 49, 52, 53, 54, 55, 57, 59, 60, 62, 64, 66, 67, 68, 70, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 95, 98, 99, 105, 113, 168, 234, 260, 264, 265, 270, 277, 278, 279, 295, 296, 307, 446, 474, 544, 556, 608, 627, 628, 641, 643, 653, 698, 714, 715, 730, 767, 783], "8": [17, 20, 21, 22, 23, 24, 25, 27, 31, 32, 34, 41, 43, 49, 53, 54, 55, 57, 64, 66, 68, 70, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 96, 98, 99, 102, 105, 116, 127, 139, 145, 148, 149, 169, 185, 202, 204, 205, 212, 213, 216, 217, 219, 221, 223, 235, 241, 245, 260, 264, 265, 266, 270, 279, 295, 296, 305, 310, 352, 410, 421, 501, 510, 512, 518, 601, 602, 634, 638, 646, 693, 694, 721, 725, 733, 768, 771, 772, 777, 778], "map": [17, 25, 66, 86, 192, 253, 265, 293, 476, 536, 537, 752, 754, 755, 758, 759, 762, 764], "t": [17, 96, 145, 151, 152, 153, 154, 352, 360, 362, 363, 364, 434, 471, 476, 484, 602, 646, 694, 733, 753, 762, 783], "column_0": [17, 93, 538, 540], "column_1": [17, 93, 538, 540], "15": [17, 38, 39, 44, 145, 275, 352], "24": [17, 26, 39, 143, 145, 275, 352, 516, 574], "It": [17, 117, 283, 317, 515, 546, 620, 653], "better": [17, 117, 253, 546, 653], "an": [17, 18, 19, 26, 29, 33, 38, 39, 50, 60, 62, 68, 70, 85, 89, 96, 110, 113, 114, 117, 129, 131, 132, 134, 135, 136, 140, 141, 142, 143, 144, 145, 150, 161, 191, 192, 206, 214, 215, 216, 217, 218, 219, 221, 222, 223, 240, 244, 257, 258, 274, 275, 280, 283, 301, 311, 317, 336, 337, 338, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 358, 361, 421, 422, 423, 424, 425, 426, 428, 429, 430, 435, 436, 451, 463, 477, 482, 518, 519, 522, 523, 526, 535, 546, 556, 595, 602, 604, 621, 627, 631, 646, 653, 687, 694, 696, 714, 718, 733, 742, 752, 753, 760, 762, 764, 767, 777, 778, 779, 790], "select": [17, 50, 54, 70, 79, 91, 95, 97, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 162, 163, 164, 165, 166, 168, 169, 171, 172, 174, 175, 177, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 250, 251, 252, 253, 254, 260, 277, 280, 300, 307, 447, 454, 474, 476, 477, 478, 482, 485, 517, 531, 534, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 615, 616, 618, 619, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 638, 639, 641, 642, 643, 645, 647, 648, 650, 651, 694, 717, 719, 751, 752, 754, 758, 760, 762, 763, 771, 772, 790], "scalar": [17, 226, 433], "9": [17, 33, 39, 41, 45, 83, 88, 96, 99, 101, 102, 105, 116, 127, 139, 144, 148, 149, 169, 174, 185, 202, 212, 214, 216, 222, 231, 235, 245, 275, 278, 309, 310, 366, 385, 421, 429, 431, 443, 481, 485, 544, 558, 570, 586, 593, 594, 612, 615, 771], "14": [17, 94, 169, 547, 548, 550, 551, 552, 553, 554, 555, 557, 558, 768], "follow": [17, 38, 39, 50, 97, 117, 163, 208, 215, 216, 217, 218, 219, 221, 222, 223, 273, 274, 275, 280, 415, 476, 585, 592, 677, 684, 752, 760, 762, 788, 793, 795], "creat": [18, 19, 38, 39, 59, 62, 97, 110, 129, 132, 150, 209, 240, 253, 257, 258, 261, 262, 274, 275, 317, 336, 338, 341, 345, 357, 358, 416, 451, 463, 477, 485, 489, 514, 515, 516, 517, 535, 538, 540, 592, 640, 684, 727, 777, 778, 779], "empti": [18, 19, 47, 56, 105, 257, 258, 287, 317, 341, 345, 381, 523, 753, 767], "copi": [18, 19, 85, 257, 258, 319, 341, 345, 357, 459, 463, 535, 649, 736], "current": [18, 19, 102, 203, 257, 258, 310, 341, 345, 410], "ident": [18, 19, 257, 258, 341, 345], "clone": [18, 89, 90, 257, 341, 462, 463, 471, 536, 537, 538, 539, 540], "cheap": [18, 19, 257, 258, 322, 341, 345], "deepcopi": [18, 19, 257, 258, 341, 345], "13": [18, 19, 29, 30, 36, 39, 44, 58, 94, 102, 214, 216, 257, 275, 310, 323, 485, 547, 548, 550, 551, 552, 553, 554, 555, 557, 558], "true": [18, 19, 21, 24, 33, 34, 36, 38, 44, 46, 47, 48, 50, 54, 58, 60, 62, 63, 80, 86, 93, 94, 95, 96, 97, 102, 105, 112, 114, 115, 116, 117, 131, 140, 141, 142, 143, 144, 151, 152, 153, 154, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 210, 220, 225, 234, 236, 237, 244, 249, 250, 253, 257, 259, 261, 264, 267, 273, 274, 279, 280, 283, 290, 299, 306, 307, 310, 317, 320, 321, 322, 323, 333, 337, 341, 360, 362, 363, 364, 370, 373, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 411, 412, 417, 427, 434, 446, 448, 463, 466, 472, 477, 478, 483, 484, 535, 539, 544, 545, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 588, 592, 600, 625, 627, 629, 632, 641, 642, 644, 646, 650, 651, 653, 680, 684, 712, 714, 716, 719, 728, 729, 731, 733, 752, 753, 754, 758, 761, 762, 763, 764, 765, 766, 769, 771, 774, 775, 776, 777, 778, 783], "bool": [18, 19, 31, 33, 34, 36, 37, 38, 43, 44, 46, 47, 48, 50, 54, 60, 62, 72, 78, 80, 86, 90, 93, 94, 95, 97, 99, 102, 105, 107, 109, 114, 115, 116, 126, 128, 131, 140, 141, 142, 143, 144, 145, 151, 152, 153, 154, 158, 159, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 191, 208, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 227, 229, 234, 236, 237, 249, 250, 253, 257, 259, 261, 267, 270, 273, 274, 279, 280, 283, 290, 299, 301, 306, 307, 310, 313, 317, 320, 321, 322, 323, 332, 335, 337, 341, 348, 349, 350, 351, 352, 360, 362, 363, 364, 367, 368, 370, 371, 373, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 411, 412, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 434, 436, 437, 441, 446, 448, 462, 463, 466, 467, 469, 471, 477, 478, 479, 481, 483, 484, 535, 539, 548, 550, 552, 588, 600, 602, 615, 625, 627, 629, 636, 637, 641, 642, 644, 646, 650, 651, 680, 692, 694, 707, 712, 714, 716, 723, 724, 728, 729, 731, 733, 742, 752, 754, 756, 758, 761, 762, 763, 764, 765, 766, 769, 771, 774, 775, 776, 777, 778, 779, 781, 783], "clear": [19, 258, 345], "properti": [20, 25, 42, 73, 75, 100, 129, 132, 150, 240, 260, 265, 295, 336, 338, 358, 359, 371, 376, 406, 438, 451, 458, 738, 790], "7": [20, 21, 22, 23, 25, 27, 31, 32, 34, 38, 39, 41, 43, 45, 49, 53, 54, 55, 57, 59, 64, 66, 68, 70, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 96, 97, 98, 99, 105, 144, 156, 167, 169, 202, 212, 216, 222, 243, 245, 260, 265, 266, 270, 275, 278, 279, 291, 295, 296, 305, 329, 429, 515, 570, 586, 594, 596, 771], "ham": [20, 22, 23, 24, 25, 31, 32, 34, 40, 41, 43, 49, 53, 54, 55, 57, 59, 64, 66, 68, 70, 72, 73, 74, 76, 77, 79, 80, 81, 82, 83, 88, 89, 90, 91, 98, 99, 105, 260, 264, 265, 270, 279, 295, 296, 482], "appl": [20, 43, 49, 66, 68, 86, 205, 213, 241, 279, 547, 548, 550, 551, 552, 553, 554, 555, 557, 558, 629, 644, 716, 731], "banana": [20, 86, 205, 213, 241, 547, 548, 550, 551, 552, 553, 554, 555, 557, 558], "orang": [20, 473, 547, 548, 550, 551, 552, 554, 557, 558], "summari": [21, 353], "statist": [21, 109, 153, 154, 183, 215, 216, 217, 218, 219, 220, 221, 222, 223, 234, 353, 363, 364, 394, 427, 446, 752], "datetim": [21, 38, 39, 50, 97, 105, 110, 150, 170, 215, 216, 217, 218, 219, 221, 222, 223, 248, 274, 275, 280, 317, 358, 379, 399, 402, 407, 408, 436, 458, 465, 481, 515, 517, 600, 646, 692, 733, 742, 747], "date": [21, 38, 39, 50, 90, 215, 216, 217, 218, 219, 221, 222, 223, 248, 274, 275, 280, 379, 399, 402, 407, 408, 436, 465, 481, 494, 515, 569, 570, 571, 572, 573, 574, 575, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 646, 658, 663, 664, 665, 666, 671, 674, 677, 678, 679, 682, 684, 685, 686, 688, 692, 733, 747, 752, 762, 763, 790], "d": [21, 40, 41, 44, 49, 52, 83, 85, 96, 99, 102, 105, 163, 279, 310, 473, 481, 547, 548, 550, 551, 552, 553, 554, 555, 557, 558, 572, 626, 631, 642, 646, 660, 713, 718, 729, 733, 763], "e": [21, 41, 52, 83, 85, 96, 102, 105, 151, 155, 163, 188, 227, 234, 310, 360, 434, 437, 446, 463, 473, 531, 752, 753, 754, 758, 764, 766], "usd": 21, "eur": [21, 776], "2020": [21, 39, 275, 571, 574, 577, 579, 581, 584, 589], "2021": [21, 38, 97, 379, 646, 733, 742], "2022": [21, 515, 517, 646, 733, 768], "count": [21, 38, 39, 50, 59, 62, 93, 97, 103, 140, 185, 198, 201, 215, 216, 217, 218, 219, 221, 222, 223, 251, 253, 274, 275, 280, 312, 353, 405, 409, 468, 469, 546, 555, 585, 626, 677, 713, 748, 752, 754, 758, 762, 764, 765, 766], "null_count": [21, 24, 145, 352, 353], "mean": [21, 30, 62, 88, 109, 157, 160, 163, 216, 234, 269, 353, 366, 369, 373, 423, 446, 480, 541, 630, 717, 752, 762], "266667": 21, "null": [21, 24, 30, 33, 34, 45, 49, 54, 55, 59, 64, 76, 77, 80, 81, 82, 86, 95, 98, 105, 113, 116, 126, 128, 130, 134, 139, 146, 148, 149, 152, 153, 154, 155, 158, 159, 160, 161, 165, 169, 176, 177, 178, 179, 180, 182, 185, 201, 203, 209, 214, 215, 216, 217, 218, 219, 221, 222, 223, 228, 229, 231, 236, 248, 255, 264, 269, 278, 279, 297, 298, 301, 307, 323, 332, 335, 342, 354, 357, 362, 363, 364, 367, 369, 373, 389, 390, 409, 410, 421, 422, 423, 424, 425, 426, 428, 429, 430, 434, 439, 440, 443, 463, 465, 474, 481, 484, 485, 486, 531, 552, 571, 574, 577, 579, 581, 584, 589, 601, 603, 604, 607, 613, 618, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 638, 640, 642, 643, 644, 649, 693, 705, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 725, 727, 729, 730, 731, 742, 752, 762, 771], "std": [21, 214, 353, 428], "101514": 21, "707107": [21, 153], "min": [21, 30, 38, 39, 62, 109, 134, 136, 142, 160, 208, 218, 269, 275, 342, 344, 349, 353, 369, 415, 425, 767, 778, 779], "01": [21, 38, 39, 97, 275, 515, 517, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 646, 684, 733], "max": [21, 30, 38, 39, 62, 109, 134, 135, 141, 160, 202, 208, 215, 269, 275, 342, 343, 348, 353, 369, 415, 422, 643, 652, 730, 778, 779], "median": [21, 62, 217, 424], "remov": [22, 155, 263, 531, 635, 639, 645, 722, 726, 732], "": [22, 24, 26, 37, 38, 44, 49, 50, 67, 68, 84, 105, 155, 158, 183, 197, 199, 200, 202, 203, 210, 214, 237, 264, 273, 274, 280, 305, 317, 322, 323, 324, 325, 326, 327, 328, 329, 332, 337, 341, 342, 346, 347, 348, 349, 350, 351, 352, 355, 359, 361, 366, 367, 369, 370, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 399, 400, 401, 402, 403, 405, 407, 408, 410, 411, 412, 414, 415, 418, 420, 421, 422, 423, 425, 429, 431, 432, 434, 439, 443, 444, 445, 447, 448, 450, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 489, 517, 531, 534, 544, 572, 592, 601, 605, 606, 613, 614, 617, 621, 633, 634, 638, 640, 641, 643, 646, 649, 651, 652, 660, 684, 693, 697, 698, 700, 705, 706, 709, 712, 713, 714, 715, 716, 718, 720, 721, 723, 725, 727, 730, 731, 733, 736, 739, 744, 747, 749, 752, 772, 779], "place": [23, 43, 44, 67, 76, 77, 80, 99, 105, 126, 128, 228, 229, 297, 298, 301, 332, 335, 416, 418, 439, 440, 448, 606, 613, 698, 705], "subset": [24, 88, 94, 264, 306, 541], "where": [24, 28, 56, 101, 151, 226, 234, 287, 322, 333, 360, 433, 446, 450, 470, 472, 478, 594, 686, 760, 769, 783], "which": [24, 28, 80, 94, 104, 105, 106, 107, 108, 109, 114, 172, 175, 176, 178, 179, 180, 264, 306, 313, 322, 382, 386, 387, 388, 389, 390, 435, 621, 752, 753, 760, 762], "appli": [24, 33, 61, 105, 153, 154, 191, 202, 214, 215, 216, 218, 222, 264, 276, 282, 283, 289, 363, 364, 421, 422, 423, 425, 429, 474, 478, 484, 533, 544, 570, 573, 575, 576, 578, 580, 582, 583, 586, 587, 588, 593, 594, 596, 658, 661, 663, 667, 669, 672, 674, 675, 678, 679, 680, 685, 686, 688, 743, 762, 776, 778, 779, 790], "wise": [24, 33, 118, 119, 120, 121, 122, 123, 137, 138, 156, 189, 231, 232, 233, 246, 247, 264, 324, 325, 326, 327, 328, 329, 346, 347, 365, 398, 443, 444, 445, 456, 457, 533], "singl": [24, 28, 35, 80, 161, 191, 209, 212, 255, 264, 301, 317, 322, 416, 419, 459, 482, 484, 544, 585, 624, 652, 677, 711, 743, 752, 760, 761, 762, 777], "snippet": [24, 264], "show": [24, 51, 59, 264, 299], "how": [24, 49, 96, 146, 169, 211, 264, 279, 317, 354, 473, 484, 537, 540, 568, 601, 627, 656, 693, 714, 760], "could": [24, 38, 131, 264, 274, 337, 511, 520, 533], "base": [24, 31, 38, 39, 151, 188, 189, 264, 270, 274, 275, 360, 397, 398, 472, 492, 556, 744, 747, 790], "condit": [24, 31, 70, 264, 270, 478, 629, 644], "filter": [24, 47, 255, 264, 267, 277, 435, 477, 546, 629, 644, 762, 763], "fold": [24, 264, 481, 621, 772], "acc": [24, 264, 533], "is_nul": [24, 264], "expr": [24, 27, 29, 31, 37, 38, 39, 49, 62, 70, 74, 80, 101, 102, 264, 266, 268, 270, 273, 274, 275, 279, 296, 298, 301, 309, 310, 352, 368, 440, 454, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 514, 516, 517, 518, 531, 532, 533, 534, 542, 543, 544, 652, 694, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 761, 767, 769, 770, 771, 772, 773, 782, 783, 788], "also": [25, 37, 38, 39, 80, 155, 169, 208, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 311, 415, 515, 533, 778, 779, 788], "found": [25, 105, 525, 632, 646, 651, 719], "header": [25, 62, 93, 105, 109, 752, 753, 762], "colnam": [25, 192, 265, 778], "float64": [25, 26, 33, 73, 105, 118, 119, 120, 121, 122, 123, 131, 137, 138, 155, 232, 233, 246, 247, 265, 295, 481, 531, 588, 680, 778], "unit": [26, 190, 252, 290, 317, 361, 458, 494, 495, 515, 569, 572, 591, 595, 621, 657, 660, 683, 687, 778, 779], "sizeunit": [26, 361], "float": [26, 29, 50, 64, 72, 77, 133, 134, 135, 136, 148, 149, 151, 152, 153, 154, 158, 159, 164, 169, 176, 178, 179, 180, 188, 204, 207, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 229, 268, 280, 291, 298, 299, 337, 339, 342, 343, 344, 355, 360, 361, 362, 363, 364, 367, 368, 372, 384, 394, 397, 399, 400, 401, 402, 407, 408, 413, 414, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 435, 436, 446, 450, 452, 470, 480, 481, 489, 496, 497, 557, 588, 600, 680, 692, 744, 745, 746, 747, 750, 761, 763, 770, 772, 774, 775, 776, 778, 779, 782], "estim": [26, 153, 154, 183, 361, 363, 364, 394, 752], "total": [26, 361], "heap": [26, 361], "alloc": [26, 65, 361, 752], "size": [26, 38, 96, 109, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 274, 361, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 477, 752, 777, 778, 779, 780], "byte": [26, 105, 361, 752, 753, 754, 755, 758, 759, 762], "sum": [26, 33, 37, 39, 62, 117, 143, 144, 151, 161, 202, 215, 216, 218, 221, 222, 223, 255, 273, 275, 350, 351, 360, 361, 422, 423, 425, 428, 429, 430, 474, 533, 544, 653, 747], "its": [26, 95, 307, 361], "buffer": [26, 361, 752], "includ": [26, 38, 93, 96, 105, 170, 361, 471, 588, 641, 642, 680, 728, 729, 778], "nest": [26, 361, 473, 502, 790], "multipl": [26, 28, 31, 38, 43, 60, 62, 80, 102, 155, 197, 212, 215, 216, 217, 218, 219, 221, 222, 223, 237, 263, 270, 274, 301, 310, 311, 322, 361, 403, 419, 479, 483, 484, 531, 533, 544, 621, 652, 743, 752, 762, 764, 766, 777, 779, 783], "share": [26, 361, 473], "bitmap": [26, 361], "therefor": [26, 361], "comput": [26, 50, 94, 109, 111, 118, 119, 120, 121, 122, 123, 137, 138, 140, 141, 142, 143, 144, 147, 151, 156, 183, 188, 189, 197, 203, 206, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 231, 232, 233, 234, 238, 246, 247, 277, 279, 280, 306, 311, 318, 324, 325, 326, 327, 328, 329, 346, 347, 348, 349, 350, 351, 355, 360, 361, 365, 394, 397, 398, 403, 410, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 443, 444, 445, 446, 449, 456, 457, 483, 484, 488, 518, 520, 557, 609, 610, 611, 701, 702, 703, 749, 769, 790, 792], "particular": [26, 361, 752, 754, 758, 764, 766], "structarrai": [26, 361], "upper": [26, 38, 170, 252, 274, 361, 477, 515, 752], "bound": [26, 38, 170, 190, 252, 274, 361, 477, 515, 604, 696, 752], "slice": [26, 214, 215, 216, 217, 218, 219, 221, 222, 223, 259, 267, 283, 290, 299, 361, 421, 422, 423, 424, 425, 426, 428, 429, 430, 483, 605, 617, 697, 709], "remain": [26, 37, 117, 273, 283, 361, 642, 643, 729, 730, 752, 762], "constant": [26, 39, 275, 361], "unchang": [26, 117, 248, 283, 361, 465, 653], "howev": [26, 361], "smaller": [26, 109, 267, 361], "visibl": [26, 361], "capac": [26, 78, 361, 441], "ffi": [26, 361], "kb": [26, 361], "mb": [26, 361], "gb": [26, 361], "tb": [26, 361], "scale": [26, 361], "x": [26, 43, 46, 48, 49, 56, 117, 166, 191, 211, 234, 248, 279, 287, 300, 319, 323, 369, 393, 446, 465, 599, 606, 642, 653, 729, 752, 762, 772, 777, 778], "revers": [26, 80, 126, 128, 140, 141, 142, 143, 144, 192, 205, 208, 227, 236, 237, 241, 249, 301, 332, 335, 348, 349, 350, 351, 415, 437, 448, 466, 479, 615, 707], "1_000_000": [26, 361], "y": [26, 46, 48, 49, 56, 211, 279, 287, 300, 319, 599, 606, 646, 733, 772, 777, 778], "v": [26, 109, 226, 433, 489], "1000": [26, 516, 577, 649, 753], "z": [26, 46, 48, 49, 56, 166, 211, 279, 287, 300, 369, 568, 599, 656, 777, 778], "uint32": [26, 126, 128, 211, 244, 248, 333, 337, 361, 434, 465, 513, 570, 573, 576, 578, 580, 582, 583, 586, 587, 588, 593, 594, 597, 598, 608, 626, 633, 658, 661, 667, 669, 672, 674, 675, 678, 679, 680, 685, 686, 689, 690, 700, 713, 768], "25888898": 26, "689577102661133": 26, "long": [27, 56, 96, 266, 287], "largelist": 27, "letter": [27, 155, 240, 266, 531, 549, 559, 654, 655], "differ": [28, 38, 39, 93, 146, 199, 200, 251, 274, 275, 322, 354, 407, 408, 434, 532, 570, 585, 586, 593, 601, 646, 658, 677, 678, 685, 693, 733, 744, 747, 752], "vstack": [28, 484], "chunk": [28, 58, 109, 116, 209, 322, 340, 404, 416, 459, 752, 762, 764, 765, 766], "append": [28, 49, 50, 209, 279, 280, 778], "underli": [28, 85, 210, 224, 317, 322, 417, 431, 441, 458, 459, 463, 519, 526, 569, 570, 573, 575, 576, 578, 580, 582, 583, 586, 587, 588, 593, 594, 595, 596, 657, 658, 661, 663, 667, 669, 672, 674, 675, 678, 679, 680, 685, 686, 687, 688, 758, 778, 779], "locat": [28, 68, 91, 95, 307, 322, 436, 454], "thu": [28, 322, 762, 769], "caus": [28, 322, 526, 752, 762], "realloc": [28, 322, 762, 764, 765], "have": [28, 65, 145, 152, 153, 154, 208, 299, 312, 322, 352, 362, 363, 364, 373, 415, 556, 621, 752, 753, 774, 781], "extra": [28, 60, 109, 322, 752, 753, 754, 758, 764, 766], "faster": [28, 96, 214, 251, 322, 323, 421], "queri": [28, 51, 259, 261, 262, 267, 276, 282, 290, 299, 312, 314, 322, 632, 653, 719, 754, 760, 762, 764, 765, 766, 792, 794], "do": [28, 50, 85, 93, 96, 145, 259, 280, 283, 290, 299, 322, 352, 463, 471, 474, 483, 556, 602, 694, 762], "after": [28, 95, 208, 307, 322, 415, 649, 736, 751, 752, 754, 758, 762, 764, 765, 766], "instanc": [28, 33, 131, 215, 216, 217, 218, 219, 221, 222, 223, 283, 312, 322, 337, 533, 621, 752, 762, 778, 779], "dure": [28, 322, 752, 762], "onlin": [28, 322], "rerun": [28, 322], "mani": [28, 322, 537, 540, 760], "time": [28, 38, 39, 50, 97, 248, 249, 259, 274, 275, 280, 290, 317, 322, 458, 465, 466, 483, 485, 486, 494, 495, 514, 515, 516, 517, 569, 572, 585, 591, 595, 599, 600, 646, 657, 660, 677, 683, 687, 691, 733, 761, 762, 790], "read": [28, 191, 267, 272, 292, 322, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 764, 765, 766], "file": [28, 104, 105, 106, 107, 108, 109, 267, 292, 313, 322, 751, 752, 753, 754, 755, 756, 757, 758, 759, 762, 764, 765, 766], "store": [28, 322], "them": [28, 38, 39, 50, 97, 199, 200, 274, 275, 280, 322, 407, 408, 485, 606, 698], "latter": [28, 322], "finish": [28, 322, 473, 520], "rechunk": [28, 322, 484, 535, 539, 752, 754, 762, 764, 765, 766], "vertic": [28, 96, 99, 484, 624, 711, 744], "df1": [28, 34, 99, 473, 484, 774], "20": [28, 43, 44, 61, 63, 67, 68, 124, 125, 126, 128, 146, 166, 169, 289, 592, 684, 742, 778, 779], "30": [28, 38, 43, 61, 67, 68, 86, 102, 124, 125, 126, 128, 146, 166, 289, 310, 489, 571, 587, 592, 596, 684], "40": [28, 61, 166, 289], "50": [28, 134, 342, 537, 540], "60": [28, 516, 588, 589, 646, 680, 733], "fill_valu": [29, 77, 96, 159, 229, 268, 298, 368, 440], "fill": [29, 30, 77, 96, 130, 158, 159, 160, 165, 169, 215, 216, 218, 221, 222, 223, 229, 268, 269, 298, 367, 368, 369, 422, 423, 425, 428, 429, 430, 440, 484, 534, 634, 638, 649, 721, 725, 736], "point": [29, 51, 72, 133, 148, 149, 159, 164, 224, 225, 268, 283, 339, 368, 372, 384, 431, 432, 496, 497, 588, 680], "nan": [29, 148, 149, 159, 169, 176, 178, 179, 180, 199, 200, 268, 317, 325, 329, 356, 368, 387, 388, 407, 408, 421, 539, 769, 774, 775, 778], "evalu": [29, 31, 50, 54, 102, 145, 168, 170, 174, 270, 277, 279, 280, 309, 310, 333, 352, 472, 475, 477, 478, 518, 771], "replac": [29, 30, 68, 93, 101, 268, 309, 435, 436, 627, 637, 714, 724, 752, 762], "Not": [29, 268], "miss": [29, 130, 165, 169, 268, 471, 484, 769], "To": [29, 148, 149, 160, 268, 772], "fill_nul": [29, 268, 646, 733], "strategi": [30, 49, 50, 58, 160, 269, 279, 280, 369, 618, 752, 776, 777, 778, 779], "fillnullstrategi": [30, 160, 269, 369], "limit": [30, 130, 134, 135, 136, 160, 165, 269, 276, 342, 343, 344, 369, 762], "forward": [30, 50, 160, 165, 269, 280, 369], "backward": [30, 50, 130, 160, 269, 280, 369], "zero": [30, 70, 85, 159, 160, 234, 269, 369, 446, 459, 463, 535, 649, 736, 751, 752, 754, 758], "one": [30, 31, 38, 39, 56, 62, 70, 88, 92, 112, 160, 214, 236, 237, 244, 263, 269, 270, 274, 275, 287, 311, 322, 369, 421, 474, 524, 544, 545, 556, 650, 737, 771, 772], "consecut": [30, 130, 160, 165, 269, 369, 624, 711], "fill_nan": 30, "predic": [31, 70, 161, 255, 259, 267, 270, 283, 290, 299, 312, 370, 435, 436, 483, 762, 764, 765, 766, 783], "boolean": [31, 33, 54, 102, 114, 115, 161, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 255, 270, 310, 320, 321, 333, 370, 378, 380, 382, 383, 385, 386, 387, 388, 389, 390, 392, 411, 412, 435, 472, 478, 600, 692, 712, 790], "find": [32, 226, 433, 479, 484], "index": [32, 38, 39, 44, 50, 62, 68, 70, 79, 91, 97, 103, 112, 124, 125, 126, 127, 128, 215, 216, 217, 218, 219, 221, 222, 223, 235, 244, 274, 275, 280, 300, 312, 330, 331, 332, 333, 334, 335, 436, 447, 454, 479, 513, 585, 597, 598, 604, 614, 630, 640, 677, 689, 690, 696, 706, 717, 727, 768], "horizont": [33, 43, 96, 484, 486, 518, 533, 744, 747, 772], "reduct": 33, "effect": [33, 109, 312], "aggreg": [33, 37, 38, 53, 54, 55, 57, 62, 63, 64, 81, 82, 96, 98, 112, 161, 182, 187, 191, 202, 214, 215, 216, 217, 218, 219, 221, 222, 223, 253, 283, 284, 285, 286, 288, 291, 302, 303, 308, 421, 422, 423, 425, 428, 429, 430, 484, 533, 544, 545, 548, 550, 556, 652, 741, 744, 747, 752, 772, 790], "supercast": 33, "cast": [33, 38, 39, 54, 61, 90, 116, 132, 143, 144, 210, 242, 248, 274, 275, 289, 350, 351, 417, 452, 461, 465, 486, 535, 568, 569, 632, 649, 656, 657, 719, 781], "similar": [33, 50, 202, 280], "parent": 33, "rule": [33, 590, 682], "arithmet": 33, "int8": [33, 143, 144, 242, 350, 351, 420, 452], "take": [33, 84, 245, 305, 455, 472, 518, 532, 585, 677, 778], "A": [33, 38, 50, 60, 62, 86, 88, 96, 97, 105, 111, 172, 175, 182, 191, 192, 205, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 240, 241, 274, 280, 301, 314, 317, 421, 422, 423, 425, 428, 429, 430, 482, 483, 485, 491, 515, 518, 534, 541, 556, 571, 574, 577, 579, 581, 584, 589, 618, 621, 625, 626, 630, 631, 632, 649, 659, 662, 668, 670, 673, 676, 681, 712, 713, 717, 718, 719, 723, 724, 733, 736, 752, 762, 788], "s1": [33, 472, 775], "s2": [33, 317, 322, 355, 385, 434, 472, 775], "minimum": [33, 57, 134, 136, 152, 153, 154, 196, 200, 208, 288, 342, 344, 362, 363, 364, 408, 412, 415, 671, 747, 777, 778, 779], "zip_with": 33, "concaten": [33, 484], "foo11": 33, "bar22": 33, "null_equ": [34, 434], "check": [34, 47, 114, 115, 170, 174, 283, 320, 321, 378, 379, 381, 384, 385, 391, 393, 434, 600, 625, 629, 644, 692, 712, 716, 731, 752, 762, 774, 775], "equal": [34, 38, 50, 214, 215, 216, 217, 218, 219, 221, 222, 223, 274, 280, 421, 422, 423, 424, 425, 426, 428, 429, 430, 434, 477, 634, 638, 649, 721, 725, 736, 752, 762, 774, 775, 781], "compar": [34, 94, 306, 434, 774, 775], "consid": [34, 56, 96, 102, 109, 134, 135, 136, 145, 215, 216, 217, 218, 219, 221, 222, 223, 236, 276, 282, 287, 310, 317, 342, 343, 344, 352, 434, 435, 436, 489, 544, 556, 684, 763], "retriev": [35, 597, 598, 650, 689, 690, 737], "maintain_ord": [37, 60, 62, 94, 97, 112, 117, 244, 250, 273, 306, 467, 544, 545, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 653], "start": [37, 38, 51, 79, 97, 103, 155, 170, 235, 273, 300, 312, 447, 482, 531, 533, 570, 572, 573, 580, 582, 586, 587, 591, 592, 593, 594, 596, 614, 625, 629, 640, 644, 658, 674, 678, 684, 685, 706, 716, 727, 731, 751, 752, 754, 758, 762, 764, 765, 766, 783], "group": [37, 38, 39, 60, 62, 96, 97, 109, 112, 117, 202, 236, 237, 244, 273, 274, 275, 476, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 602, 630, 652, 653, 654, 655, 694, 717], "make": [37, 38, 39, 65, 97, 153, 154, 211, 273, 274, 275, 363, 364, 484, 505, 535, 539, 642, 649, 729, 736, 752, 754, 758, 760, 764, 766], "sure": [37, 65, 273, 477, 484, 535, 539, 752, 754, 760], "consist": [37, 273], "expens": [37, 93, 273, 322, 752, 758, 762, 765, 766], "work": [37, 39, 67, 94, 133, 134, 135, 136, 164, 250, 273, 275, 306, 339, 342, 343, 344, 372, 467, 602, 651, 694, 753], "we": [37, 50, 80, 182, 280, 283, 323, 602, 694, 742, 752, 753, 762, 783], "agg": [37, 38, 39, 112, 117, 161, 182, 236, 244, 255, 273, 275, 653], "sort": [37, 38, 39, 50, 60, 62, 97, 126, 128, 161, 182, 227, 237, 253, 255, 274, 275, 280, 332, 335, 437, 467, 469, 479, 544, 549, 559, 568, 654, 655, 656], "11": [37, 39, 109, 148, 149, 169, 203, 222, 235, 273, 275, 323, 421, 482, 585, 649, 772], "loop": 37, "sub_df": 37, "index_column": [38, 39, 274, 275], "everi": [38, 84, 87, 97, 140, 141, 142, 143, 144, 145, 157, 163, 245, 267, 274, 305, 348, 349, 350, 351, 352, 366, 455, 592, 597, 598, 601, 604, 605, 614, 617, 684, 689, 690, 693, 696, 697, 706, 709, 752, 762], "period": [38, 39, 76, 77, 97, 152, 153, 154, 203, 228, 229, 274, 275, 297, 298, 362, 363, 364, 410, 439, 440, 515, 592, 613, 684, 705], "offset": [38, 39, 79, 97, 103, 235, 274, 275, 300, 312, 447, 585, 592, 614, 640, 677, 684, 706, 727, 752, 754, 758, 762, 764, 765, 766], "truncat": [38, 274], "include_boundari": [38, 274], "close": [38, 39, 215, 216, 217, 218, 219, 221, 222, 223, 234, 274, 275, 446, 515], "closedwindow": [38, 39, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 515], "dynamicgroupbi": 38, "int32": [38, 39, 131, 248, 274, 275, 465, 575, 596, 663, 688, 778, 779], "window": [38, 39, 145, 152, 153, 154, 202, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 274, 275, 352, 362, 363, 364, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 485, 515, 592, 684, 790], "calcul": [38, 146, 152, 153, 154, 183, 190, 220, 234, 252, 274, 354, 362, 363, 364, 394, 427, 446, 450, 470, 601, 693], "assign": [38, 208, 274, 415, 489, 642, 643, 729, 730, 777], "normal": [38, 151, 183, 234, 274, 360, 394, 446], "groupbi": [38, 39, 112, 117, 145, 161, 182, 202, 236, 237, 244, 255, 274, 275, 352, 476, 602, 694, 790], "member": [38, 274, 385], "seen": [38, 130, 165, 274], "roll": [38, 39, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 274, 275, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 485], "slot": [38, 145, 146, 274, 352, 354, 601, 693], "interv": [38, 39, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 515, 588, 592, 684], "length": [38, 39, 79, 145, 214, 215, 216, 217, 218, 219, 221, 222, 223, 235, 274, 275, 300, 340, 352, 395, 421, 422, 423, 424, 425, 426, 428, 429, 430, 447, 484, 489, 592, 614, 621, 634, 638, 640, 649, 684, 706, 721, 725, 727, 736, 765, 777], "argument": [38, 39, 54, 61, 62, 82, 90, 97, 107, 109, 215, 216, 217, 218, 219, 221, 222, 223, 259, 267, 274, 275, 289, 313, 317, 483, 592, 684, 752, 756, 758], "languag": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 585, 592, 677, 684, 762], "1n": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 585, 592, 677, 684], "nanosecond": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 517, 585, 588, 592, 677, 680, 684], "1u": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 585, 592, 677, 684], "microsecond": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 290, 585, 588, 592, 677, 684], "1m": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 577, 579, 584, 585, 589, 592, 677, 684], "millisecond": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 516, 517, 585, 592, 677, 684], "second": [38, 39, 50, 97, 105, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 479, 515, 516, 517, 585, 592, 646, 677, 684], "minut": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 515, 516, 517, 585, 592, 677, 684], "1h": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 585, 592, 677, 684], "hour": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 515, 516, 517, 585, 592, 677, 684], "1d": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 515, 569, 574, 581, 585, 592, 595, 677, 684], "dai": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 506, 514, 515, 516, 517, 572, 582, 585, 586, 587, 591, 592, 593, 594, 596, 677, 678, 684, 686], "1w": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 585, 592, 677, 684], "week": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 517, 585, 592, 594, 677, 684, 686], "1mo": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 515, 571, 585, 592, 677, 684], "calendar": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 493, 494, 575, 585, 592, 596, 663, 677, 684, 688], "month": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 514, 516, 570, 585, 592, 658, 677, 684], "1y": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 585, 592, 677, 684], "year": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 514, 516, 575, 585, 586, 592, 593, 663, 677, 678, 684, 685], "1i": [38, 39, 50, 97, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 280, 585, 677], "combin": [38, 39, 40, 50, 97, 274, 275, 280, 299, 528, 529, 544], "3d12h4m25": [38, 39, 50, 97, 274, 275, 280, 515, 592, 684], "12": [38, 39, 50, 97, 143, 203, 274, 275, 280, 299, 323, 431, 489, 514, 515, 516, 573, 582, 587, 592, 596, 674, 684], "25": [38, 39, 50, 97, 101, 102, 274, 275, 280, 285, 308, 309, 310, 360, 410, 515, 592, 596, 684], "integ": [38, 39, 133, 164, 210, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 339, 372, 417, 436, 498, 499, 500, 501, 507, 508, 509, 510, 588, 680, 742, 777, 778], "10i": [38, 39, 274, 275], "often": [38, 39, 182, 211, 274, 275], "ascend": [38, 39, 274, 275, 479], "sens": [38, 39, 97, 274, 275, 752, 754, 758, 764, 766], "dynam": [38, 215, 216, 217, 218, 219, 221, 222, 223, 274], "indic": [38, 39, 172, 175, 176, 178, 179, 180, 215, 216, 217, 218, 219, 221, 222, 223, 226, 231, 244, 274, 275, 317, 382, 386, 387, 388, 389, 390, 433, 443, 454, 478, 541, 751, 752, 754, 758, 762, 776, 777, 779], "need": [38, 39, 78, 89, 274, 275, 463, 652, 752, 753, 774, 775], "temporarili": [38, 39, 274, 275, 473], "so": [38, 39, 62, 274, 275, 473, 479, 604, 696, 762], "matter": [38, 39, 274, 275], "neg": [38, 76, 77, 79, 228, 229, 235, 274, 297, 298, 300, 312, 439, 440, 447, 613, 614, 640, 705, 706, 727], "lower": [38, 64, 170, 190, 207, 210, 219, 267, 274, 291, 414, 417, 426, 477, 515, 557, 750, 762], "_lower_bound": [38, 274], "_upper_bound": [38, 274], "impact": [38, 274], "harder": [38, 274], "parallel": [38, 50, 51, 145, 274, 279, 280, 352, 483, 484, 602, 694, 758, 760, 766, 790], "both": [38, 39, 49, 50, 70, 105, 116, 170, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 279, 280, 473, 515, 635, 639, 645], "tempor": [38, 39, 215, 216, 217, 218, 219, 221, 222, 223, 274, 275, 515], "date_rang": [38, 97, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 684], "low": [38, 477, 515, 588], "16": [38, 39, 101, 102, 169, 216, 275, 299, 309, 310, 410, 444, 456, 498, 507, 517, 518, 768], "high": [38, 477, 515, 588], "30m": 38, "\u03bc": [38, 39, 50, 97, 275, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 684], "00": [38, 50, 97, 515, 517, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 646, 684, 733], "02": [38, 39, 97, 224, 275, 515, 517, 569, 572, 573, 574, 580, 581, 582, 589, 591, 592, 593, 595, 684], "03": [38, 39, 97, 275, 515, 569, 571, 572, 574, 581, 582, 588, 589, 591, 592, 593, 595, 684], "alia": [38, 39, 52, 95, 101, 102, 117, 128, 134, 140, 141, 142, 143, 144, 161, 163, 168, 173, 174, 185, 186, 202, 203, 210, 248, 255, 275, 277, 282, 307, 309, 310, 335, 396, 480, 481, 485, 486, 517, 518, 534, 569, 570, 571, 572, 574, 577, 579, 581, 584, 585, 586, 588, 589, 591, 594, 595, 602, 623, 625, 626, 629, 631, 633, 640, 642, 643, 644, 652, 694, 729, 730, 761, 771, 772], "time_min": 38, "time_max": 38, "boundari": [38, 134, 135, 136, 342, 343, 344], "ad": [38, 93, 101, 116, 309], "time_count": 38, "_lower_boundari": 38, "_upper_boundari": 38, "u32": [38, 59, 103, 112, 124, 125, 126, 127, 128, 139, 140, 185, 198, 201, 208, 248, 251, 312, 332, 337, 415, 465, 468, 469, 478, 547, 551, 554, 555, 558, 570, 573, 580, 582, 586, 587, 588, 593, 594, 597, 598, 608, 626, 633, 700, 713, 720], "23": [38, 39, 275, 573, 592, 661, 684, 768], "end": [38, 155, 170, 276, 282, 482, 531, 614, 625, 629, 640, 644, 706, 716, 727, 731, 752, 762], "lower_bound": 38, "upper_bound": 38, "time_agg_list": 38, "belong": 38, "04": [38, 97, 515, 517, 570, 571, 574, 580, 581, 582, 586, 589, 592, 593, 594, 595, 646, 684, 733, 763], "idx": [38, 436, 618], "arang": [38, 96, 546], "2i": 38, "3i": 38, "a_agg_list": 38, "rollinggroupbi": 39, "dynamic_groupbi": [39, 275], "now": [39, 275], "individu": [39, 117, 129, 132, 240, 275, 340, 631, 718], "groupby_dynam": [39, 275], "45": [39, 275, 626, 631, 713, 718], "48": [39, 275], "42": [39, 40, 275, 374], "09": [39, 275], "18": [39, 169, 275, 592, 595, 684], "19": [39, 50, 275, 592, 684], "32": [39, 275, 355, 410, 496, 499, 508, 768], "08": [39, 275, 515, 517, 646, 733, 774, 775], "43": [39, 275], "dt": [39, 110, 275, 317, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 684, 788, 793], "with_column": [39, 61, 117, 131, 134, 166, 169, 170, 173, 176, 178, 179, 180, 202, 203, 248, 275, 289, 477, 481, 485, 486, 518, 568, 602, 629, 636, 637, 640, 642, 643, 644, 646, 649, 651, 656, 694, 733, 771, 772, 783], "strptime": [39, 275, 590, 682], "out": [39, 172, 175, 275, 604, 696, 763, 768], "2d": [39, 89, 275], "sum_a": [39, 275], "min_a": [39, 275], "max_a": [39, 275], "assert": [39, 275, 373, 774, 775, 777, 778, 779, 790], "to_list": [39, 275, 618], "seed": [40, 72, 166, 225, 230, 374, 432, 442], "seed_1": [40, 166, 374], "seed_2": [40, 166, 374], "seed_3": [40, 166, 374], "hash": 40, "uint64": [40, 166, 210, 374, 417, 513, 597, 598, 689, 690], "random": [40, 72, 166, 208, 225, 230, 374, 415, 432, 442, 777, 778], "u64": [40, 166, 210, 374], "1381515935931787907": 40, "14326417405130769253": 40, "12561864296213327929": 40, "11391467306893437193": 40, "in_plac": [43, 78, 99, 416, 418, 441, 448], "grown": 43, "stack": [43, 99, 484], "modifi": [43, 99, 418, 595, 687, 734, 735, 752, 762], "insert": [44, 67, 93, 95, 226, 307, 433, 624, 649, 711, 736, 752, 754, 758, 762, 764, 765, 766], "certain": [44, 97, 155, 259, 290, 317, 522, 531], "baz": [44, 45, 62, 95, 278, 307, 556, 641, 643, 730], "intermedi": [45, 278, 377], "linear": [45, 64, 169, 195, 207, 219, 278, 291, 377, 414, 426, 485, 486, 557, 599, 691, 750], "mask": [46, 48, 171, 173, 181, 370, 380, 383, 392, 411, 412, 435, 472, 600, 692, 712], "duplic": [46, 49, 50, 94, 171, 279, 280, 306, 380, 479, 521], "uniqu": [48, 127, 173, 181, 198, 251, 253, 334, 353, 383, 392, 405, 468, 469, 555, 748, 776, 777, 779], "left_on": [49, 50, 279, 280], "right_on": [49, 50, 279, 280], "joinstrategi": [49, 279], "inner": [49, 147, 279, 317, 355, 376, 473, 502, 606, 698], "suffix": [49, 50, 176, 178, 179, 180, 213, 279, 280, 544, 629, 716], "_right": [49, 50, 279, 280], "sql": [49, 314, 760, 790, 794], "like": [49, 208, 267, 292, 415, 515, 556, 602, 623, 694, 751, 752, 753, 754, 755, 756, 757, 758, 759], "fashion": 49, "outer": [49, 279], "semi": [49, 279], "anti": [49, 279, 317, 435, 436], "cross": [49, 279], "join_asof": [49, 279], "categor": [49, 110, 132, 248, 317, 338, 465, 473, 541, 781], "see": [49, 129, 132, 134, 135, 136, 160, 169, 183, 191, 234, 240, 342, 343, 344, 394, 446, 590, 682, 753, 760, 774, 775, 778, 779, 795], "stringcach": [49, 790], "other_df": [49, 279], "by_left": [50, 280], "by_right": [50, 280], "asofjoinstrategi": [50, 280], "toler": [50, 280, 774, 775], "allow_parallel": [50, 279, 280], "force_parallel": [50, 279, 280], "asof": [50, 280], "join": [50, 169, 202, 259, 267, 280, 299, 473, 483], "nearest": [50, 64, 133, 164, 207, 219, 280, 291, 339, 372, 414, 426, 557, 750], "rather": [50, 280, 649, 736], "asof_join": 50, "search": [50, 280], "last": [50, 62, 80, 83, 94, 126, 128, 145, 243, 280, 301, 304, 306, 332, 335, 352, 453, 559, 570, 586, 593, 604, 617, 643, 655, 658, 678, 685, 696, 709, 730, 773], "whose": [50, 62, 155, 280, 531], "less": [50, 280, 634, 638, 643, 649, 721, 725, 730, 736, 762], "greater": [50, 234, 280, 446, 643, 730], "numer": [50, 54, 134, 135, 136, 211, 280, 317, 342, 343, 344, 391, 434, 790], "By": [50, 80, 280, 450, 463, 470, 742, 752, 753], "done": [50, 116, 131, 280, 301, 337, 634, 638, 652, 721, 725, 752, 762], "within": [50, 280, 502, 774, 775], "distanc": [50, 280], "durat": [50, 97, 248, 280, 465, 515, 571, 574, 577, 579, 581, 584, 589, 595, 659, 662, 668, 670, 673, 676, 681, 687], "allow": [50, 51, 72, 210, 225, 279, 280, 283, 311, 417, 432, 434, 473, 522, 585, 646, 677, 733, 762, 764, 765, 766, 778, 779], "physic": [50, 132, 248, 256, 279, 280, 465, 568, 656, 752], "plan": [50, 51, 256, 261, 262, 272, 279, 280, 292, 299, 313], "up": [50, 133, 279, 280, 283, 339, 505, 649, 736], "gdp": 50, "2016": 50, "2017": 50, "2018": 50, "2019": 50, "record": 50, "jan": 50, "1st": 50, "4164": 50, "4411": 50, "4566": 50, "4696": 50, "popul": 50, "12th": 50, "82": 50, "66": 50, "83": 50, "52": [50, 102, 224, 310], "05": [50, 97, 515, 571, 588, 592, 684, 763, 774, 775], "object": [51, 90, 109, 110, 129, 132, 150, 240, 273, 277, 292, 317, 336, 338, 358, 451, 459, 515, 536, 742, 751, 752, 753, 754, 755, 756, 757, 758, 759, 764, 766, 777, 778, 779, 790], "execut": [51, 256, 290, 484, 602, 694], "until": [51, 473], "request": 51, "either": [51, 54, 70, 82, 778], "call": [51, 323, 778, 779, 785, 792], "fetch": [51, 257, 259, 276, 282, 307, 762], "small": [51, 236, 237, 267], "describe_plan": 51, "unoptim": [51, 262], "describe_optimized_plan": 51, "optim": [51, 65, 259, 261, 267, 283, 290, 299, 312, 483, 758, 762, 764, 765, 766], "show_graph": 51, "un": 51, "graphviz": [51, 299], "graph": [51, 277, 311, 483, 792], "advis": 51, "thei": [51, 155, 214, 421], "head": [52, 116, 186, 282, 396], "axi": [53, 54, 56, 57, 82, 287], "maximum": [53, 105, 134, 135, 193, 199, 208, 284, 342, 343, 399, 407, 411, 415, 597, 664, 689, 744, 752, 762, 777, 778, 779], "null_strategi": [54, 82], "nullstrategi": [54, 82], "ignor": [54, 82, 107, 146, 199, 200, 259, 267, 313, 354, 407, 408, 483, 601, 693, 778, 779], "propag": [54, 82, 199, 200, 407, 408], "uint8": [54, 143, 144, 242, 350, 351, 452, 473, 776], "666667": [54, 152, 308], "id_var": [56, 287], "value_var": [56, 287], "variable_nam": [56, 287], "value_nam": [56, 287], "unpivot": [56, 287], "wide": [56, 96, 287], "leav": [56, 287], "identifi": [56, 287], "massag": [56, 287], "variabl": [56, 88, 287, 460, 541], "while": [56, 93, 287, 753, 778, 779], "measur": [56, 287], "just": [56, 287, 762], "non": [56, 203, 214, 215, 216, 217, 218, 219, 221, 222, 223, 287, 410, 421, 422, 423, 424, 425, 426, 428, 429, 430, 463, 481, 486, 626, 631, 713, 718], "give": [56, 183, 211, 287, 394, 572, 660, 754, 758, 764, 765, 766, 790], "chunkedarrai": [58, 535], "per": [59, 105, 553, 555, 557, 560, 561, 562, 563, 564, 565, 566, 567, 602, 604, 694, 696, 777, 778], "as_dict": 60, "split": [60, 163, 544, 642, 643, 729, 730], "partit": [60, 758, 760, 763], "keep": [60, 94, 97, 182, 306, 481, 752, 762], "predict": [60, 62, 65, 97], "requir": [60, 90, 94, 102, 109, 152, 153, 154, 250, 306, 310, 362, 363, 364, 463, 467, 539, 646, 733, 774, 775], "distinct": [60, 208, 415, 514, 516, 517, 619, 710, 779], "k": [60, 183, 249, 394, 466, 568, 656], "l": [60, 163], "m": [60, 317, 458, 494, 495, 515, 517, 569, 572, 591, 595, 646, 657, 660, 683, 687, 733], "func": [61, 289, 323], "arg": [61, 90, 110, 289, 323, 463, 473, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 534], "kwarg": [61, 90, 102, 110, 289, 310, 463, 473, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512], "self": [61, 202, 259, 267, 289, 299, 322, 435, 436, 472, 483], "keyword": [61, 70, 289, 317, 758], "def": [61, 93, 289, 777, 778, 779], "cast_str_to_int": [61, 289], "col_nam": [61, 289], "aggregate_fn": 62, "pivotagg": 62, "sort_column": 62, "spreadsheet": [62, 753], "well": 62, "One": [62, 311, 317], "predefin": 62, "transpos": [62, 556], "discoveri": 62, "interpol": [64, 160, 195, 207, 219, 291, 414, 426, 557, 750], "interpolationmethod": [64, 207, 219, 291, 414, 426, 557, 750], "between": [64, 107, 131, 147, 170, 203, 207, 219, 291, 337, 355, 410, 414, 426, 484, 488, 557, 606, 624, 698, 711, 749, 750, 756, 769, 776, 777, 778, 779], "higher": [64, 109, 207, 219, 291, 414, 426, 557, 750], "midpoint": [64, 207, 219, 291, 414, 426, 557, 750], "contigu": [65, 484, 535, 539, 752, 754, 762, 764, 765, 766], "subsequ": 65, "old": [66, 293], "new_col": 67, "val": [69, 248, 568, 656], "by_pred": 70, "accord": [70, 663], "param": [70, 778, 779], "mutual": 70, "exclus": 70, "addition": 70, "ensur": [70, 253, 283, 463, 469, 781], "clariti": 70, "suppli": 70, "error": [70, 131, 317, 337, 519, 606, 627, 632, 646, 653, 698, 714, 719, 733, 752, 762], "anyth": 70, "toomanyrowsreturn": [70, 790], "norowsreturn": [70, 790], "inherit": 70, "rowsexcept": [70, 790], "columnar": [71, 538, 540], "frac": [72, 152, 153, 154, 225, 234, 249, 362, 363, 364, 432, 446, 466], "with_replac": [72, 225, 432], "shuffl": [72, 225, 432, 546], "item": [72, 157, 163, 225, 366, 432, 484, 600, 604, 606, 643, 692, 696, 698, 730], "fraction": [72, 105, 203, 225, 410, 432, 588, 646, 680, 774, 775], "onc": [72, 225, 256, 432, 752, 753], "gener": [72, 93, 225, 230, 432, 442, 618, 760, 776, 777, 778, 779], "shift_and_fil": 76, "shift": [77, 146, 203, 229, 298, 354, 410, 440, 485, 601, 693], "shrink": [78, 441], "usag": [78, 441, 752, 762, 778, 779], "fit": [78, 96, 441], "exact": [78, 646, 733, 777, 778, 779], "hold": [78, 482], "support": [79, 102, 109, 235, 300, 310, 317, 447, 535, 614, 640, 706, 727, 753, 760, 776, 779], "nulls_last": [80, 126, 128, 236, 301, 332, 335], "accept": [80, 751, 752, 754, 758], "descend": [80, 126, 128, 227, 301, 332, 335, 437], "ddof": [81, 98, 239, 254, 302, 308, 450, 470, 749, 769, 770, 782], "standard": [81, 153, 221, 234, 239, 302, 363, 446, 450, 575, 632, 663, 719, 768, 770], "deviat": [81, 153, 221, 239, 302, 363, 450, 770], "degre": [81, 98, 239, 254, 450, 470, 749, 769], "freedom": [81, 98, 239, 254, 450, 470, 749, 769], "21": [82, 592, 684], "nth": [84, 245, 305, 455, 643, 730], "arrow": [85, 106, 459, 463, 519, 535, 556, 754, 764], "mostli": [85, 161], "categoricaltyp": 85, "pyarrow": [85, 89, 90, 109, 317, 459, 462, 463, 535, 539, 752, 754, 758, 763, 768, 791], "large_str": 85, "as_seri": 86, "fruit": [86, 205, 213, 241, 629, 644, 716, 731], "car": [86, 205, 213, 241], "beetl": [86, 205, 213, 241], "audi": [86, 205, 213, 241], "28": [86, 595], "300": [86, 422, 423, 425], "slow": [87, 145, 352, 537, 540, 752, 762], "hot": 88, "encod": [88, 491, 512, 627, 714, 752, 762], "dummi": [88, 460, 541], "foo_1": 88, "foo_2": 88, "foo_3": 88, "bar_6": 88, "bar_7": 88, "bar_8": 88, "ham_a": 88, "ham_b": 88, "ham_c": 88, "u8": [88, 460, 473], "re": [89, 741], "attempt": [89, 463], "ll": [89, 463], "instal": [89, 90, 299, 463, 539, 752, 754, 758, 760, 768], "numpy_arrai": 89, "date_as_object": 90, "sent": [90, 463], "datetime64": 90, "pandas_df": 90, "core": 90, "struct": [92, 95, 110, 253, 307, 317, 618, 642, 643, 729, 730, 790], "three": [92, 771], "four": [92, 771], "five": 92, "num": [92, 170, 173, 649], "include_head": 93, "header_nam": 93, "column_nam": 93, "iter": [93, 145, 352], "diagon": [93, 484], "Will": [93, 259, 267, 299, 317, 483, 744, 747], "veri": [93, 109, 258, 345], "perhap": 93, "column_2": 93, "auto": [93, 758, 766], "name_gener": [93, 618], "base_nam": 93, "my_column_": 93, "my_column_0": 93, "my_column_1": 93, "my_column_2": 93, "uniquekeepstrategi": [94, 306], "origin": [94, 182, 210, 306, 626, 630, 631, 632, 634, 638, 649, 713, 717, 718, 719, 721, 725, 736, 752], "fail": [94, 306, 323, 646, 733], "decompos": [95, 307], "field": [95, 105, 307, 505, 618, 642, 643, 651, 729, 730, 739], "t_a": [95, 307], "t_b": [95, 307], "t_c": [95, 307], "t_d": [95, 307], "womp": [95, 307], "t_": [95, 307], "t_struct": [95, 307], "step": [96, 477], "unstackdirect": 96, "without": [96, 145, 215, 216, 217, 218, 219, 221, 222, 223, 352, 357, 489, 684, 755, 759, 763, 767], "much": [96, 145, 352], "pivot": [96, 790], "skip": [96, 323, 752, 753, 762], "phase": 96, "direct": [96, 758, 760, 766], "don": [96, 145, 352, 434, 471, 476, 484, 602, 694], "experiment": [96, 102, 145, 215, 216, 217, 218, 219, 221, 222, 223, 310, 352, 489, 684, 763], "subject": 96, "being": [96, 145, 215, 216, 217, 218, 219, 221, 222, 223, 352, 489, 684, 752, 762, 763, 783], "break": [96, 145, 215, 216, 217, 218, 219, 221, 222, 223, 352, 489, 684, 763], "ascii_uppercas": 96, "eager": [96, 477, 478, 742, 761, 771, 788, 790], "g": [96, 155, 227, 434, 437, 463, 531, 752, 753, 754, 758, 764, 766], "h": [96, 163], "col1_0": 96, "col1_1": 96, "col1_2": 96, "col2_0": 96, "col2_1": 96, "col2_2": 96, "time_column": 97, "regular": [97, 155, 482, 513, 531], "frequenc": 97, "ha": [97, 109, 117, 145, 249, 257, 341, 352, 373, 384, 466, 476, 621, 653], "forward_fil": 97, "06": [97, 587, 596], "varianc": [98, 154, 183, 223, 254, 308, 364, 394, 430, 470, 782], "grow": 99, "b_squar": [101, 309], "36": [101, 309], "named_expr": [102, 310], "overwrit": [102, 267, 309, 310, 752, 762], "provid": [102, 310, 627, 628, 630, 632, 653, 714, 715, 717, 719, 752, 760, 762, 778, 779, 795], "is_not": [102, 310], "opt": [102, 310], "via": [102, 310, 752, 753, 762, 764, 766], "flag": [102, 227, 283, 310, 317, 437, 776], "with_columns_kwarg": [102, 310], "row_nr": [103, 312], "binaryio": [104, 106, 751, 752, 753, 754, 755, 758, 759], "bytesio": [104, 105, 106, 109, 751, 752, 753, 754, 758], "path": [104, 105, 106, 107, 108, 109, 227, 292, 313, 437, 632, 719, 751, 752, 753, 754, 755, 756, 757, 758, 759, 762, 764, 765, 766], "compress": [104, 106, 109], "avrocompress": 104, "uncompress": [104, 106, 109, 754, 764], "write": [104, 105, 106, 107, 109, 134, 135, 136, 299, 313, 342, 343, 344], "apach": [104, 109, 751], "avro": [104, 751, 790], "written": [104, 105, 106, 107, 108, 109, 313], "snappi": [104, 109], "deflat": 104, "has_head": [105, 752, 753, 762], "sep": [105, 486, 752, 762], "quot": [105, 752, 762], "batch_siz": [105, 752, 765], "1024": [105, 752, 765], "datetime_format": 105, "date_format": 105, "time_format": 105, "float_precis": 105, "null_valu": [105, 752, 762], "textio": [105, 752], "_io": [105, 751, 753, 754], "pathlib": [105, 107, 108, 292, 313, 751, 753, 754, 755, 756, 757, 759, 762, 764, 765], "comma": 105, "csv": [105, 652, 752, 753, 762, 790], "symbol": 105, "process": 105, "thread": [105, 602, 694, 752, 760, 780], "chrono": [105, 590, 646, 682, 733], "crate": 105, "precis": [105, 569, 646, 657], "timeunit": [105, 458, 494, 495, 515, 569, 591, 595, 657, 683, 687], "decim": [105, 224, 431], "dirpath": [105, 762], "new_fil": 105, "ipccompress": 106, "ipc": [106, 754, 755, 763, 764, 790], "binari": 106, "stream": 106, "feather": [106, 754, 764, 790], "lz4": [106, 109], "zstd": [106, 109], "pretti": 107, "row_ori": 107, "json_lin": [107, 756], "to_str": [107, 313], "io": [107, 108, 292, 313, 756, 757, 795], "iobas": [107, 108, 292, 313, 756, 757], "serial": [107, 108], "json": [107, 108, 272, 292, 313, 632, 719, 756, 757, 765, 790], "represent": [107, 108, 248, 261, 262, 465, 568, 570, 573, 575, 576, 578, 580, 582, 583, 586, 587, 588, 593, 594, 596, 656, 658, 661, 663, 667, 669, 672, 674, 675, 678, 679, 680, 685, 686, 688, 792], "common": 107, "deprec": [107, 259, 267, 313, 483, 756, 785], "toggl": [107, 756, 781], "ndjson": [107, 756], "write_ndjson": 107, "newlin": [108, 757, 765], "delimit": [108, 624, 711, 752, 757, 762, 765], "parquetcompress": 109, "compression_level": 109, "row_group_s": 109, "use_pyarrow": [109, 462, 752, 754, 758], "pyarrow_opt": [109, 758], "parquet": [109, 758, 759, 766, 790], "gzip": 109, "lzo": 109, "brotli": 109, "actual": [109, 441, 753, 778, 779], "lz4raw": 109, "good": 109, "yet": 109, "been": [109, 208, 415], "older": 109, "reader": [109, 754, 758], "guarante": [109, 267, 752], "disk": [109, 299], "22": [109, 482, 592, 595, 646, 684, 733], "reduc": [109, 400, 413, 452, 551, 552, 554, 558, 752, 758, 762, 764, 765, 766], "pressur": [109, 758, 765, 766], "improv": [109, 754, 764], "speed": 109, "At": 109, "moment": [109, 183, 234, 394, 446], "featur": [109, 473], "write_t": 109, "context": [110, 112, 117, 161, 236, 237, 253, 311, 473, 476, 487, 532, 602, 620, 694, 767, 788], "arr": [110, 317, 463, 518, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 693, 694, 697, 698, 700, 705, 706, 709, 788, 793], "namespac": [110, 129, 132, 150, 240, 317, 336, 338, 358, 451, 785, 790, 792], "relat": [110, 129, 132, 150, 240, 317, 336, 338, 358, 451], "cat": [110, 248, 317, 473, 486, 489, 568, 625, 647, 648, 656, 712, 788, 793], "meta": [110, 790], "absolut": [111, 318, 774, 775], "94": 112, "renam": [113, 192, 461, 623, 651, 739, 752, 788], "confus": 114, "tt": 114, "tf": [114, 115], "ff": [114, 115], "upcast": 116, "supertyp": 116, "tail": [116, 234, 446, 544], "project": [117, 236, 237, 259, 267, 283, 290, 299, 483, 762, 764, 765, 766], "depend": [117, 208, 415, 476, 532, 597, 598, 620, 689, 690, 768], "expect": [117, 283, 476, 524, 527, 530], "assum": [117, 283, 653], "a_times_2": 117, "element": [118, 119, 120, 121, 122, 123, 137, 138, 140, 141, 142, 143, 144, 145, 156, 166, 174, 189, 203, 208, 211, 226, 231, 232, 233, 238, 246, 247, 249, 323, 324, 325, 326, 327, 328, 329, 346, 347, 348, 349, 350, 351, 352, 365, 370, 385, 398, 410, 415, 433, 443, 444, 445, 449, 450, 456, 457, 466, 467, 470, 602, 642, 643, 694, 729, 730], "invers": [118, 119, 120, 121, 122, 123, 324, 325, 326, 327, 328, 329], "cosin": [118, 119, 137, 138, 191, 324, 325, 346, 347], "570796": [118, 120, 324, 326], "hyperbol": [119, 121, 123, 138, 233, 247, 325, 327, 329, 347, 445, 457], "sine": [120, 121, 191, 232, 233, 326, 327, 444, 445], "881374": [121, 327], "tangent": [122, 123, 246, 247, 328, 329, 456, 457], "785398": [122, 328], "inf": [123, 172, 175, 329, 382, 386, 410, 489], "maxim": [124, 330, 551, 563], "minim": [125, 331, 402, 554, 566, 598, 690], "would": [126, 128, 208, 332, 335, 415, 463, 479, 604, 620, 696], "arg_sort": [128, 335], "exprlistnamespac": 129, "page": [129, 132, 240, 754, 764, 790], "full": [129, 132, 240, 494, 752, 762], "detail": [129, 132, 240, 760, 774, 775, 795], "next": [130, 208, 415], "strict": [131, 317, 337, 434, 627, 646, 714, 733], "throw": [131, 317, 337, 632, 719], "due": [131, 337], "overflow": [131, 143, 144, 242, 317, 337, 350, 351, 452], "i32": [131, 596, 778, 783], "exprcatnamespac": 132, "set_ord": 132, "round": [133, 164, 246, 339, 372], "min_val": [134, 136, 342, 344], "max_val": [134, 135, 342, 343], "otherwis": [134, 135, 136, 152, 153, 154, 210, 323, 342, 343, 344, 362, 363, 364, 417, 435, 436, 783], "foo_clip": 134, "clip": [135, 136, 343, 344], "543081": [138, 347], "cumul": [140, 141, 142, 143, 144, 348, 349, 350, 351], "len": [140, 212, 419, 489, 633, 634, 638, 649, 721, 725, 736, 777, 778, 779], "a_revers": [140, 141, 142, 143, 144, 192, 213, 241], "product": [143, 147, 350, 355], "int16": [143, 144, 242, 350, 351, 452], "uint16": [143, 144, 242, 350, 351, 452], "prevent": [143, 144, 242, 350, 351, 452], "issu": [143, 144, 242, 350, 351, 452, 752, 753, 762], "min_period": [145, 152, 153, 154, 214, 215, 216, 217, 218, 219, 221, 222, 223, 352, 362, 363, 364, 421, 422, 423, 424, 425, 426, 428, 429, 430], "slide": [145, 352], "increas": [145, 352, 758], "anoth": [145, 237, 323, 352, 434, 569, 657], "realli": [145, 352], "o": [145, 163, 249, 352, 466, 754, 764], "complex": [145, 249, 352, 466], "visit": [145, 352], "null_behavior": [146, 354, 601, 693], "nullbehavior": [146, 354, 601, 693], "th": [146, 234, 354, 446, 601, 693], "discret": [146, 151, 354, 360, 489, 601, 693], "handl": [146, 354, 601, 627, 649, 693, 714, 736, 752, 762], "44": 147, "drop_nul": 148, "drop_nan": 149, "exprdatetimenamespac": 150, "718281828459045": [151, 188, 360, 397], "formula": [151, 360], "pk": [151, 360], "log": [151, 249, 360, 466], "probabl": [151, 360], "doesn": [151, 360, 471, 762], "459148": 151, "754888": 151, "com": [152, 153, 154, 362, 363, 364, 630, 717], "span": [152, 153, 154, 362, 363, 364], "half_lif": [152, 153, 154, 362, 363, 364], "alpha": [152, 153, 154, 362, 363, 364], "adjust": [152, 153, 154, 234, 362, 363, 364, 446], "exponenti": [152, 153, 154, 156, 362, 363, 364, 365], "weight": [152, 153, 154, 214, 215, 216, 217, 218, 219, 221, 222, 223, 234, 362, 363, 364, 421, 422, 423, 424, 425, 426, 428, 429, 430, 446], "move": [152, 153, 154, 215, 216, 218, 222, 362, 363, 364, 422, 423, 425, 429], "averag": [152, 208, 362, 415], "decai": [152, 153, 154, 362, 363, 364], "term": [152, 153, 154, 362, 363, 364], "mass": [152, 153, 154, 362, 363, 364], "gamma": [152, 153, 154, 362, 363, 364], "foral": [152, 153, 154, 362, 363, 364], "geq": [152, 153, 154, 362, 363, 364], "theta": [152, 153, 154, 362, 363, 364], "half": [152, 153, 154, 362, 363, 364], "life": [152, 153, 154, 362, 363, 364], "exp": [152, 153, 154, 362, 363, 364], "ln": [152, 153, 154, 362, 363, 364], "smooth": [152, 153, 154, 362, 363, 364], "factor": [152, 153, 154, 248, 362, 363, 364, 465], "leq": [152, 153, 154, 362, 363, 364], "divid": [152, 153, 154, 183, 362, 363, 364, 394, 592, 684], "begin": [152, 153, 154, 362, 363, 364, 630, 717], "account": [152, 153, 154, 362, 363, 364, 585, 677], "imbal": [152, 153, 154, 362, 363, 364], "rel": [152, 153, 154, 362, 363, 364, 556, 585, 677, 774, 775], "ew": [152, 153, 154, 362, 363, 364], "w_i": [152, 153, 154, 362, 363, 364], "recurs": [152, 153, 154, 362, 363, 364], "y_0": [152, 153, 154, 362, 363, 364], "x_0": [152, 153, 154, 362, 363, 364], "y_t": [152, 153, 154, 362, 363, 364], "y_": [152, 153, 154, 362, 363, 364], "x_t": [152, 153, 154, 362, 363, 364], "observ": [152, 153, 154, 362, 363, 364], "428571": 152, "bia": [153, 154, 183, 220, 234, 363, 364, 394, 427, 446], "correct": [153, 154, 183, 220, 234, 283, 363, 364, 394, 427, 446, 753], "unbias": [153, 154, 363, 364], "963624": 153, "928571": 154, "wildcard": [155, 474, 482, 531, 533, 788], "regex": [155, 482, 531, 625, 626, 629, 630, 631, 636, 637, 644, 712, 713, 716, 717, 718, 723, 724, 731], "aa": [155, 531], "ba": [155, 531], "cc": [155, 531], "718282": 156, "389056": 156, "54": 156, "59815": 156, "expand": [157, 163, 211, 366], "extend": [158, 322, 367], "group_col": [161, 255], "g1": [161, 202, 255], "g2": [161, 202, 255], "lt": [161, 255], "gte": [161, 255], "explod": 163, "hello": [163, 474, 698, 720], "world": [163, 698, 720], "r": [163, 626, 630, 631, 636, 713, 717, 718, 723], "word": 163, "down": [164, 372, 762, 764, 765, 766], "latest": [165, 621], "2461716855791224000": 166, "16174362112783765148": 166, "13569566217648818014": 166, "11638928888656214026": 166, "6351727772611549480": 166, "fmt": [168, 277, 534, 590, 646, 682, 733], "cumsum": [168, 277], "regrid": 169, "grid": 169, "df_original_grid": 169, "grid_point": 169, "df_new_grid": 169, "include_bound": 170, "primit": [170, 174, 463], "exclud": [170, 482, 769, 778, 779], "finit": [172, 382, 769], "optional_memb": [174, 385], "infinit": [175, 386], "_isnan": 176, "a_isnan": 176, "b_isnan": 176, "negat": 177, "_is_not_nan": 178, "a_is_not_nan": 178, "b_is_not_nan": 178, "_not_nul": 179, "a_not_nul": 179, "b_not_nul": 179, "_isnul": 180, "a_isnul": 180, "b_isnul": 180, "root": [182, 192, 205, 238, 241, 449, 622], "With": [182, 753], "fisher": [183, 234, 394, 446], "pearson": [183, 234, 394, 446, 749], "dataset": [183, 394, 752, 762, 763, 790], "fourth": [183, 394], "central": [183, 234, 394, 446], "squar": [183, 238, 394, 449, 546], "definit": [183, 394], "subtract": [183, 394], "distribut": [183, 234, 394, 446], "elimin": [183, 394], "come": [183, 394, 785, 792], "bias": [183, 234, 394, 446], "scipi": [183, 234, 394, 446], "stat": [183, 234, 394, 446, 790], "153061": 183, "logarithm": [188, 189, 397, 398], "584963": 188, "30103": 189, "60206": 189, "lowest": 190, "9223372036854775808": 190, "agg_list": 191, "elementwis": [191, 214, 215, 216, 217, 218, 219, 221, 222, 223, 421, 422, 423, 424, 425, 426, 428, 429, 430, 474, 475], "third": 191, "parti": 191, "librari": [191, 519, 526, 795], "book": 191, "to_numpi": 191, "argmax": 191, "_revers": [192, 213, 241], "b_revers": [192, 213, 241], "most": [197, 203, 253, 403, 410, 469, 535, 621, 643, 730], "occur": [197, 208, 259, 267, 299, 403, 415, 483], "poison": [199, 200, 407, 408], "encount": [199, 200, 407, 408, 519, 632, 719, 769], "nanmax": [199, 200, 407, 408], "wherea": [199, 200, 276, 282, 407, 408], "subgroup": 202, "postgr": [202, 760], "max_by_group": 202, "percentag": [203, 410, 776, 778, 779], "recent": [203, 410], "least": [203, 253, 410, 469, 524, 778], "previou": [203, 410], "percent": [203, 410], "090909": 203, "expon": 204, "power": 204, "27": [204, 558, 587, 596], "64": [204, 410, 497, 500, 509], "reverse_": 205, "reverse_a": 205, "reverse_fruit": 205, "reverse_b": 205, "reverse_car": 205, "rankmethod": [208, 415], "deal": [208, 317, 415, 646, 733], "ti": [208, 415], "appropri": [208, 415], "dens": [208, 415], "ordin": [208, 415, 586, 678], "avail": [208, 267, 415, 777, 785, 788, 792, 793], "competit": [208, 415], "highest": [208, 252, 415, 769], "immedi": [208, 415, 771], "those": [208, 415], "correspond": [208, 415, 575, 663], "repeat": [209, 211, 754, 764], "sign": [210, 417, 498, 499, 500, 501, 585, 649, 677, 736], "bit": [210, 417, 496, 497, 498, 499, 500, 501, 507, 508, 509, 510, 625, 712], "unsign": [210, 417, 507, 508, 509, 510], "64bit": [210, 417], "safe": [210, 417, 463], "coerc": 211, "coercion": [211, 259, 267, 290, 299, 483], "op": [211, 779], "dim": [212, 419], "flat": [212, 419], "fruits_revers": [213, 241], "cars_revers": [213, 241], "window_s": [214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430], "specif": [214, 317, 421, 646, 733, 760, 771, 778], "rolling_min": [214, 421], "rolling_max": [214, 421], "rolling_mean": [214, 421], "rolling_sum": [214, 421], "multipli": [214, 215, 216, 217, 218, 219, 221, 222, 223, 421, 422, 423, 424, 425, 426, 428, 429, 430], "358899": 214, "041452": 214, "567764": 214, "travers": [215, 216, 218, 221, 222, 223, 422, 423, 425, 428, 429, 430], "vector": [215, 216, 218, 221, 222, 223, 422, 423, 425, 428, 429, 430], "fix": [215, 216, 217, 218, 219, 221, 222, 223, 595, 687, 753, 777, 778], "5h": [215, 216, 217, 218, 219, 221, 222, 223], "groupby_rol": [215, 216, 217, 218, 219, 221, 222, 223, 274], "quantil": [219, 426], "33": [219, 224, 482], "skew": [220, 427], "527525": 221, "333333": [223, 410], "digit": [224, 431, 649, 713, 736], "17": [224, 346], "maintain": [226, 250, 433, 467], "enabl": [227, 437], "downstream": [227, 437], "code": [227, 437], "fast": [227, 437], "incorrect": [227, 437, 595, 653, 687], "care": [227, 437], "content": [230, 253, 442], "modul": 230, "175201": [233, 445], "sampl": [234, 446, 546, 752], "about": [234, 446], "unimod": [234, 446], "continu": [234, 446], "skewtest": [234, 446], "enough": [234, 446, 602, 694], "speak": [234, 446], "coeffici": [234, 446], "g_1": [234, 446], "m_3": [234, 446], "m_2": [234, 446], "m_i": [234, 446], "sum_": [234, 446], "texttt": [234, 446], "k_3": [234, 446], "k_2": [234, 446], "sqrt": [234, 446], "343622": 234, "whole": [236, 237, 630, 717, 753], "larg": [236, 237, 556], "larger": [236, 769], "414214": [238, 449], "exprstringnamespac": 240, "to_uppercas": 240, "taken": [244, 614, 640, 706, 727], "56": [246, 768], "761594": [247, 457], "replic": [248, 465], "vals_phys": 248, "largest": [249, 466], "smallest": [249, 466], "appear": [251, 468], "value_count": 251, "might": [251, 620, 752, 762], "id": [251, 253, 468, 546, 636, 637], "9223372036854775807": 252, "multithread": 253, "ldf": [256, 258, 263, 264, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 652, 653, 654, 655], "hit": 256, "node": [256, 277, 283, 290], "type_coercion": [259, 261, 267, 290, 299, 483], "predicate_pushdown": [259, 261, 267, 283, 290, 299, 483], "projection_pushdown": [259, 261, 267, 283, 290, 299, 483], "simplify_express": [259, 261, 267, 290, 299, 483], "string_cach": [259, 267, 483], "no_optim": [259, 267, 283, 290, 483], "slice_pushdown": [259, 261, 267, 283, 290, 299, 483], "common_subplan_elimin": [259, 261, 267, 299, 483], "huge": 259, "saver": 259, "debug": [259, 267, 283], "pushdown": [259, 267, 283, 290, 299, 312, 435, 436, 483], "simplifi": [259, 267, 290, 299, 483], "pleas": [259, 267], "try": [259, 267, 299, 483, 528, 529, 752, 753, 754, 758, 762, 764, 766], "branch": [259, 267, 299, 483], "subplan": [259, 267, 299, 483], "lf": [265, 270, 295, 316], "n_row": [267, 751, 752, 754, 758, 762, 764, 765, 766], "500": [267, 422, 423, 425], "purpos": 267, "scan": [267, 276, 282, 537, 540, 752, 758, 762, 763, 764, 765, 766], "help": [267, 788], "final": [267, 766], "influenc": [267, 283], "read_json": [272, 313], "lazygroupbi": [273, 274, 275], "NOT": [273, 651], "typeerror": 273, "subscript": 273, "load": [276, 282, 760], "validate_output_schema": 283, "past": 283, "paramount": 283, "hard": 283, "bug": [283, 653], "caller": [283, 653], "invari": 283, "upheld": 283, "prune": 283, "from_json": 292, "write_json": 292, "output_path": 299, "raw_output": 299, "figsiz": 299, "plot": 299, "figur": 299, "dot": 299, "matplotlib": 299, "290994": 302, "extern": 311, "access": 311, "part": [311, 535, 642, 643, 658, 661, 667, 669, 672, 674, 675, 680, 688, 729, 730], "block": [312, 435, 436], "pars": [314, 646, 733, 752, 753, 762, 764, 765], "under": [316, 788, 793], "arraylik": 317, "nan_to_nul": 317, "dtype_if_empti": 317, "position": 317, "pattern": [317, 435, 436, 625, 626, 630, 631, 636, 637, 712, 713, 717, 718, 723, 724, 752, 762, 764, 766], "scenario": 317, "through": [317, 760], "s3": [317, 763], "inner_dtyp": 317, "time_unit": [317, 494, 495, 515, 595], "u": [317, 458, 494, 495, 515, 569, 572, 591, 595, 646, 657, 660, 683, 687, 761], "sr": 319, "new_aliased_sr": 319, "append_chunk": 322, "super": 322, "skip_nul": 323, "special": [323, 752, 762], "141593": 324, "292432": 325, "549306": 329, "listnamespac": 336, "catnamespac": 338, "math": [346, 444, 456], "pi": [346, 444, 456], "1232e": 346, "quick": 353, "mix": 353, "series_num": 353, "581139": 353, "series_str": 353, "datetimenamespac": 358, "005": 360, "06293300616044681": 360, "65": 360, "8568409950394724": 360, "4000000": 361, "814697265625": 361, "lit": [369, 533, 772, 783], "bitmask": 373, "swiftli": 373, "89438004737668041": 374, "14107061265552512458": 374, "15437026767517145468": 374, "datelik": 379, "sublist": [385, 597, 598, 600, 601, 603, 604, 605, 606, 607, 614, 617, 689, 690, 692, 693, 695, 696, 697, 698, 699, 706, 709], "timedelta": [399, 402, 407, 408, 481, 515, 570, 572, 573, 580, 582, 585, 586, 587, 588, 591, 592, 593, 594, 596, 664, 666, 671, 677, 684], "166667": 410, "142857": 410, "125": 410, "128": 410, "512": 410, "local": [411, 412], "peak": [411, 412], "i8": 420, "nanstd": 421, "858612": 421, "200": [422, 423, 425], "400": [422, 423, 425], "150": 423, "250": 423, "350": 423, "450": 423, "dev": 428, "12345": 431, "56789": 431, "901234": 431, "57": 431, "frequent": [435, 436], "mutat": 436, "exactli": [441, 642, 643, 729, 730, 774, 775, 778, 779], "2246e": [444, 456], "syntact": [449, 531, 532, 542, 750, 767, 772], "sugar": [449, 531, 532, 542, 750, 767, 772], "delta": [450, 470, 495, 749, 769], "divisor": [450, 470], "stringnamespac": 451, "6331e16": 456, "lib": 459, "int64arrai": 459, "a_1": [460, 642, 729], "a_2": 460, "a_3": 460, "123": [461, 626, 631, 637, 713, 718, 724], "456": 461, "xyz": [461, 626, 631, 713, 718], "convers": [462, 463, 646, 733, 790], "zero_copy_onli": 463, "writabl": 463, "complet": [463, 544], "view": 463, "know": [463, 471], "what": [463, 471], "presenc": 463, "immut": 463, "made": 463, "ignore_nul": 471, "seriesview": 471, "unless": [471, 536], "manag": 473, "categori": [473, 489, 568, 656, 781, 790], "invalid": [473, 627, 632, 714, 719, 752, 762], "outermost": 473, "exit": 473, "color": [473, 546], "red": [473, 546], "green": [473, 546], "blue": 473, "yellow": 473, "succe": [473, 752, 762], "df_join": 473, "thing": [474, 532, 762], "columnwis": [474, 475], "AND": 474, "bitwis": [474, 475], "OR": 475, "Be": 477, "eagerli": [478, 761], "oppos": 478, "lazili": [478, 752, 762, 764, 765, 766], "to_seri": [478, 618], "argsort": 479, "hamburg": 482, "lazy_fram": 483, "threadpool": 483, "concatmethod": 484, "relev": 484, "concat": [485, 486], "lag": 485, "mimic": 485, "a_lag_": 485, "a_rol": 485, "dog": [486, 625, 647, 648, 712], "plai": 486, "swim": 486, "walk": 486, "full_sent": 486, "covari": 488, "bin": 489, "break_point_label": 489, "break_point": 489, "category_label": 489, "breakpoint": 489, "string_repr": [490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512], "tu": [494, 495, 569, 572, 591, 595, 657, 660, 683, 687], "tz": 494, "time_zon": 494, "timezon": 494, "zoneinfo": 494, "available_timezon": 494, "wrap": 504, "arbitrari": [504, 778], "composit": 505, "static": [511, 653], "utf": 512, "polars_u64_idx": 513, "compon": [514, 516, 517, 588, 646, 680], "31": [514, 516, 570, 571, 582, 593, 646, 658, 733, 768], "granular": 515, "finer": 515, "permut": 515, "drang": 515, "1985": 515, "07": [515, 570, 586, 594, 646, 733], "add_week": 517, "add_dai": 517, "add_second": 517, "add_millisecond": 517, "add_hour": 517, "add_millisec": 517, "ond": 517, "001": [517, 577, 579, 584], "002": [517, 577, 579, 584], "eval": 518, "rank": [518, 602, 694, 769], "concat_list": [518, 602, 694], "mathemat": 518, "a_b_doubl": 518, "state": 526, "panic": 526, "mismatch": 528, "incompat": 529, "intoexpr": 533, "accumul": 533, "fn": 533, "new_valu": 533, "fstring": 534, "placehold": 534, "hello_": 534, "_world": 534, "foo_": 534, "_bar_": 534, "foo_a_bar_1": 534, "foo_b_bar_2": 534, "foo_c_bar_3": 534, "closest": 535, "infer_schema_length": [537, 540, 752, 753, 762, 765], "nan_to_non": 539, "datetimeindex": 539, "pd_df": 539, "pd_seri": 539, "agg_group": 542, "idiomat": 544, "_sum": 544, "_tail_sum": 544, "bar_sum": 544, "bar_tail_sum": 544, "sub": [546, 629, 644, 716, 731], "triangl": 546, "group_df": 546, "nr": [549, 559, 654, 655], "833333": 552, "pivot_column": 556, "values_column": 556, "pivotop": 556, "ideal": 556, "categoricalord": [568, 656], "lexic": [568, 656], "lose": [569, 657], "2001": [569, 570, 572, 573, 580, 582, 585, 586, 587, 588, 591, 592, 593, 594, 595, 596, 646, 684, 733], "tu_m": 569, "tu_n": 569, "extract": [570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 593, 594, 596, 631, 632, 658, 659, 661, 662, 663, 667, 668, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 681, 685, 686, 688, 718, 719], "stop": [570, 572, 573, 580, 582, 586, 587, 591, 592, 593, 594, 596, 684, 751, 752, 754, 758, 762, 764, 765, 766], "weekdai": [570, 586], "day_of_month": [570, 586, 594], "ordinal_dai": [570, 594], "day_of_year": [570, 586, 594], "diff": [571, 574, 577, 579, 581, 584, 589], "days_diff": 571, "epochtimeunit": [572, 660], "sinc": [572, 660], "unix": [572, 660], "epoch_n": 572, "epoch_": 572, "978307200000000": [572, 591], "978307200": 572, "978393600000000": [572, 591], "978393600": 572, "978480000000000": [572, 591], "978480000": 572, "hours_diff": 574, "iso": [575, 593, 663, 685], "microseconds_diff": 577, "1001": [577, 579, 584], "003": [577, 579, 584], "997": [577, 579, 584], "998": [577, 579, 584], "999": [577, 579, 584], "milliseconds_diff": 579, "59": [580, 588, 672, 680], "minutes_diff": 581, "1440": 581, "nanoseconds_diff": 584, "1000000": [584, 649], "leap": [585, 677], "minu": [585, 677], "dictat": [585, 677], "2000": 585, "2005": 585, "date_plus_1i": 585, "1y2mo": 585, "date_min": 585, "1998": 585, "2002": [585, 587, 596], "1999": 585, "2003": 585, "2004": 585, "2006": 585, "366": [586, 678], "180": [587, 596], "milli": [588, 680], "micro": [588, 680], "456789": 588, "654321": 588, "111110": 588, "765431": 588, "sec": 588, "11111": 588, "seconds_diff": 589, "timestamp_n": 591, "timestamp_m": 591, "978307200000": 591, "978393600000": 591, "978480000000": 591, "bucket": [592, 684], "49": [592, 684], "series_equ": [592, 684], "53": [593, 685], "mondai": [594, 686], "sundai": [594, 686], "tu_u": 595, "32971": 595, "32974": 595, "32976": 595, "compil": [597, 598, 689, 690], "membership": [600, 692], "against": [602, 694, 794], "activ": [602, 694], "blindli": [602, 694], "worth": [602, 694], "n_field_strategi": 618, "tostructstrategi": 618, "first_non_nul": 618, "max_width": 618, "field_0": 618, "field_1": 618, "field_n": 618, "col_name_": 618, "col_name_0": 618, "col_name_1": 618, "col_name_2": 618, "produc": [620, 743, 778, 779], "computeerror": [620, 790], "undo": 623, "keep_nam": 623, "substr": [625, 629, 636, 637, 641, 642, 643, 644, 712, 716, 723, 724, 728, 729, 730, 731], "treat": [625, 636, 637, 712, 723, 724], "starts_with": [625, 629, 716], "ends_with": [625, 644, 731], "crab": [625, 712], "rab": [625, 712], "success": [626, 631, 713, 718], "overlap": [626, 631, 713, 718], "captur": [626, 630, 631, 713, 717, 718], "bla": [626, 631, 713, 718], "asd": [626, 631, 713, 718], "678": [626, 631, 713, 718], "910t": [626, 631, 713, 718], "count_digit": 626, "transferencod": [627, 628, 714, 715], "hex": [627, 628, 714, 715], "base64": [627, 628, 714, 715], "thrown": [627, 714], "unabl": [627, 714], "unhandl": [627, 714], "666f6f": [627, 628, 714, 715], "626172": [627, 628, 714, 715], "mango": [629, 644, 716, 731], "go": [629, 716], "has_suffix": 629, "group_index": [630, 717], "target": [630, 646, 717, 733], "http": [630, 717, 795], "vote": [630, 717], "ballon_dor": [630, 717], "candid": [630, 717], "messi": [630, 717], "ref": [630, 717], "candidat": [630, 717], "jorginho": [630, 717], "ronaldo": [630, 717], "w": [630, 717], "extracted_nr": 631, "910": [631, 718], "json_path": [632, 719], "jsonpath": [632, 719], "regardless": [632, 719], "document": [632, 646, 719, 733, 753, 760], "here": [632, 719, 760, 777, 778, 779], "json_val": [632, 719], "bear": 633, "110": 633, "fillchar": [634, 638, 721, 725], "justifi": [634, 638, 721, 725], "pad": [634, 638, 649, 721, 725, 736], "cow": [634, 638, 721, 725], "monkei": [634, 638, 721, 725], "hippopotamu": [634, 638, 721, 725], "whitespac": [635, 639, 645, 722, 726, 732], "trail": [635, 639, 645, 726, 732], "replace_al": [636, 723], "text": [636, 637], "123abc": [636, 723], "abc456": [636, 723], "abc": [636, 723], "abcabc": [637, 724], "123a123": [637, 724], "bc": [637, 724], "subslic": [640, 727], "pear": [640, 727], "papaya": [640, 727], "dragonfruit": [640, 727], "s_slice": 640, "ear": [640, 727], "aya": [640, 727], "uit": [640, 727], "ya": [640, 727], "onf": [640, 727], "inclus": [641, 642, 728, 729], "d_4": [642, 729], "_": [642, 729], "rename_field": [642, 643, 729, 730], "first_part": [642, 643, 729, 730], "second_part": [642, 643, 729, 730], "unnest": [642, 643, 729, 730], "restrict": [643, 730], "remaind": [643, 730], "prefix": [644, 649, 731, 736], "app": [644, 731], "has_prefix": 644, "strftime": [646, 733], "anywher": [646, 733], "eg": 646, "3f": 646, "sun": [646, 733], "jul": [646, 733, 768], "34": [646, 733], "to_fram": [646, 650, 651, 729, 730, 733], "lowercas": [647, 734], "variant": [647, 648], "uppercas": [648, 735], "10000": 649, "100000": 649, "0010": 649, "0001": 649, "00000": 649, "00001": 649, "to_struct": [650, 651], "my_struct": [650, 651, 771], "anymor": 651, "panicexcept": [651, 790], "describ": [652, 778], "scan_csv": [652, 752], "n_uniqu": 652, "unique_nam": 652, "known": [653, 778], "equival": [734, 735], "export": 741, "allow_object": 742, "unknown": 742, "valueexcept": 742, "correl": [749, 769], "new_column": [752, 753], "comment_char": [752, 762], "quote_char": [752, 762], "skip_row": [752, 762], "ignore_error": [752, 762], "parse_d": [752, 762], "n_thread": 752, "8192": 752, "csvencod": [752, 762], "low_memori": [752, 758, 762, 765, 766], "storage_opt": [752, 754, 758, 764, 766], "skip_rows_after_head": [752, 762], "row_count_nam": [752, 754, 758, 762, 764, 765, 766], "row_count_offset": [752, 754, 758, 762, 764, 765, 766], "sample_s": 752, "eol_char": [752, 762], "handler": [752, 753], "builtin": [752, 753], "open": [752, 753, 754, 758, 764, 766], "stringio": 752, "fsspec": [752, 754, 758, 764, 766, 768], "remot": [752, 754, 758], "autogener": [752, 762], "column_x": [752, 762], "enumer": [752, 762], "shorter": 752, "comment": [752, 762], "line": [752, 753, 762], "escap": [752, 762], "cpu": 752, "system": 752, "multi": 752, "lossi": [752, 762], "decod": 752, "im": 752, "parser": 752, "even": 752, "regard": [752, 769], "storag": [752, 754, 758, 764, 766], "connect": [752, 754, 758, 760, 763, 764, 766, 791], "host": [752, 754, 758, 764, 766], "port": [752, 754, 758, 760, 764, 766], "usernam": [752, 754, 758, 760, 764, 766], "password": [752, 754, 758, 760, 764, 766], "row_count": [752, 754, 758, 762, 764, 765, 766], "glob": [752, 762, 764, 766], "sheet_id": 753, "sheet_nam": 753, "xlsx2csv_option": 753, "read_csv_opt": 753, "excel": [753, 790], "xlsx": 753, "sheet": 753, "xlsx2csv": [753, 768], "read_csv": [753, 762], "skip_empty_lin": 753, "my": [753, 763], "datasheet": 753, "excel_fil": 753, "As": [753, 761], "look": 753, "twice": 753, "xl": 753, "xlsm": 753, "xlsb": 753, "odf": 753, "od": 753, "odt": 753, "from_panda": [753, 760], "memory_map": [754, 758, 764], "v2": [754, 764], "greatli": [754, 764], "read_ndjson": 756, "parallelstrategi": [758, 766], "directori": 758, "awar": 758, "stabl": 758, "row_group": [758, 766], "read_tabl": 758, "connection_uri": 760, "partition_on": 760, "partition_rang": 760, "partition_num": 760, "protocol": 760, "mysql": 760, "sqlite": 760, "redshift": 760, "clickhous": 760, "databas": 760, "altern": 760, "solut": 760, "raw": 760, "connectorx": [760, 768], "uri": 760, "postgresql": 760, "server": 760, "backend": 760, "transfer": 760, "lineitem": 760, "partition_col": 760, "explicitli": [760, 777, 778], "mode": 761, "polarsdatatyp": 762, "with_column_nam": 762, "push": [762, 764, 765, 766], "therebi": [762, 764, 765, 766], "potenti": [762, 764, 765, 766], "overhead": [762, 764, 765, 766], "updat": 762, "my_long_fil": 762, "breezah": 762, "terribl": 762, "mydf": 762, "write_csv": 762, "cloud": 763, "dset": 763, "folder": 763, "1970": 763, "batch": 765, "version": 768, "stdout": 768, "info": 768, "platform": 768, "linux": 768, "microsoft": 768, "wsl2": 768, "x86_64": 768, "glibc2": 768, "main": 768, "gcc": 768, "20210110": 768, "propagate_nan": 769, "spearman": 769, "sever": 771, "a_and_b": 771, "across": 772, "get_column": 772, "check_dtyp": [774, 775], "check_exact": [774, 775], "check_column_nam": 774, "rtol": [774, 775], "1e": [774, 775], "atol": [774, 775], "nans_compare_equ": [774, 775], "assertionerror": [774, 775], "inexact": [774, 775], "check_nam": 775, "searchstrategi": [776, 778, 779], "null_prob": [776, 778, 779], "recognis": 776, "chanc": [776, 778, 779], "addit": [776, 777], "hypothesi": [776, 777, 778, 779, 795], "sampled_from": 776, "unique_small_int": 776, "ccy": 776, "gbp": 776, "jpy": 776, "min_col": [777, 778], "max_col": [777, 778], "suitabl": 777, "standalon": [777, 778], "itself": 777, "explicit": 777, "omit": 777, "mincol": 777, "control": 777, "especi": 777, "punctuat": 777, "test_special_char_colname_init": 777, "test_unique_xyz": 777, "assert_someth": 777, "min_siz": [778, 779], "max_siz": [778, 779], "include_col": 778, "allowed_dtyp": [778, 779], "excluded_dtyp": [778, 779], "desir": 778, "onto": 778, "exist": 778, "independ": [778, 779], "basi": 778, "pct": 778, "preced": 778, "deploi": [778, 779], "decor": [778, 779], "characterist": [778, 779], "develop": [778, 779], "concret": [778, 779], "test_repr": [778, 779], "repr": [778, 779], "df_strategi": 778, "15836": 778, "1755e": 778, "38": 778, "575050513": 778, "constructor": [779, 790], "max_data_s": 779, "54666": 779, "35": 779, "6414": 779, "63290": 779, "pool": 780, "isn": 783, "thens": 783, "chain": 783, "favor": 785, "These": 788, "sometim": 788, "polar": [788, 790, 792, 794, 795], "overview": 790, "public": 790, "expos": 790, "descript": 790, "manipul": 790, "timeseri": 790, "set_tbl_format": 790, "set_tbl_cell_align": 790, "set_ascii_t": 790, "set_fmt_str_length": 790, "set_global_string_cach": 790, "set_tbl_col": 790, "set_tbl_row": 790, "set_tbl_width_char": 790, "set_utf8_t": 790, "set_tbl_hide_column_separ": 790, "set_tbl_hide_dataframe_shap": 790, "set_tbl_change_column_data_type_position_format": 790, "set_tbl_hide_column_data_typ": 790, "set_tbl_hide_column_nam": 790, "unset_global_string_cach": 790, "toggle_string_cach": 790, "arrowerror": 790, "duplicateerror": 790, "invalidoperationerror": 790, "nodataerror": 790, "notfounderror": 790, "schemaerror": 790, "shapeerror": 790, "show_vers": 790, "sqlcontext": 794, "readthedoc": 795}, "objects": {"polars.Config": [[1, 0, 1, "", "set_ascii_tables"], [2, 0, 1, "", "set_fmt_str_lengths"], [3, 0, 1, "", "set_global_string_cache"], [4, 0, 1, "", "set_tbl_cell_alignment"], [5, 0, 1, "", "set_tbl_change_column_data_type_position_format"], [6, 0, 1, "", "set_tbl_cols"], [7, 0, 1, "", "set_tbl_formatting"], [8, 0, 1, "", "set_tbl_hide_column_data_types"], [9, 0, 1, "", "set_tbl_hide_column_names"], [10, 0, 1, "", "set_tbl_hide_column_separator"], [11, 0, 1, "", "set_tbl_hide_dataframe_shape"], [12, 0, 1, "", "set_tbl_rows"], [13, 0, 1, "", "set_tbl_width_chars"], [14, 0, 1, "", "set_utf8_tables"], [15, 0, 1, "", "unset_global_string_cache"]], "polars": [[16, 1, 1, "", "DataFrame"], [110, 1, 1, "", "Expr"], [792, 1, 1, "", "LazyFrame"], [794, 1, 1, "", "SQLContext"], [317, 1, 1, "", "Series"], [473, 1, 1, "", "StringCache"], [474, 3, 1, "", "all"], [475, 3, 1, "", "any"], [476, 3, 1, "", "apply"], [477, 3, 1, "", "arange"], [478, 3, 1, "", "arg_where"], [479, 3, 1, "", "argsort_by"], [480, 3, 1, "", "avg"], [481, 3, 1, "", "coalesce"], [482, 3, 1, "", "col"], [483, 3, 1, "", "collect_all"], [484, 3, 1, "", "concat"], [485, 3, 1, "", "concat_list"], [486, 3, 1, "", "concat_str"], [487, 3, 1, "", "count"], [488, 3, 1, "", "cov"], [489, 3, 1, "", "cut"], [514, 3, 1, "", "date"], [515, 3, 1, "", "date_range"], [516, 3, 1, "", "datetime"], [517, 3, 1, "", "duration"], [518, 3, 1, "", "element"], [531, 3, 1, "", "exclude"], [532, 3, 1, "", "first"], [533, 3, 1, "", "fold"], [534, 3, 1, "", "format"], [535, 3, 1, "", "from_arrow"], [536, 3, 1, "", "from_dict"], [537, 3, 1, "", "from_dicts"], [538, 3, 1, "", "from_numpy"], [539, 3, 1, "", "from_pandas"], [540, 3, 1, "", "from_records"], [541, 3, 1, "", "get_dummies"], [542, 3, 1, "", "groups"], [543, 3, 1, "", "head"], [741, 3, 1, "", "list"], [742, 3, 1, "", "lit"], [743, 3, 1, "", "map"], [744, 3, 1, "", "max"], [745, 3, 1, "", "mean"], [746, 3, 1, "", "median"], [747, 3, 1, "", "min"], [748, 3, 1, "", "n_unique"], [749, 3, 1, "", "pearson_corr"], [750, 3, 1, "", "quantile"], [751, 3, 1, "", "read_avro"], [752, 3, 1, "", "read_csv"], [753, 3, 1, "", "read_excel"], [754, 3, 1, "", "read_ipc"], [755, 3, 1, "", "read_ipc_schema"], [756, 3, 1, "", "read_json"], [757, 3, 1, "", "read_ndjson"], [758, 3, 1, "", "read_parquet"], [759, 3, 1, "", "read_parquet_schema"], [760, 3, 1, "", "read_sql"], [761, 3, 1, "", "repeat"], [762, 3, 1, "", "scan_csv"], [763, 3, 1, "", "scan_ds"], [764, 3, 1, "", "scan_ipc"], [765, 3, 1, "", "scan_ndjson"], [766, 3, 1, "", "scan_parquet"], [767, 3, 1, "", "select"], [768, 3, 1, "", "show_versions"], [769, 3, 1, "", "spearman_rank_corr"], [770, 3, 1, "", "std"], [771, 3, 1, "", "struct"], [772, 3, 1, "", "sum"], [773, 3, 1, "", "tail"], [780, 3, 1, "", "threadpool_size"], [781, 3, 1, "", "toggle_string_cache"], [782, 3, 1, "", "var"], [783, 3, 1, "", "when"]], "polars.DataFrame": [[16, 0, 1, "", "__init__"], [17, 0, 1, "", "apply"], [18, 0, 1, "", "cleared"], [19, 0, 1, "", "clone"], [20, 2, 1, "", "columns"], [21, 0, 1, "", "describe"], [22, 0, 1, "", "drop"], [23, 0, 1, "", "drop_in_place"], [24, 0, 1, "", "drop_nulls"], [25, 2, 1, "", "dtypes"], [26, 0, 1, "", "estimated_size"], [27, 0, 1, "", "explode"], [28, 0, 1, "", "extend"], [29, 0, 1, "", "fill_nan"], [30, 0, 1, "", "fill_null"], [31, 0, 1, "", "filter"], [32, 0, 1, "", "find_idx_by_name"], [33, 0, 1, "", "fold"], [34, 0, 1, "", "frame_equal"], [35, 0, 1, "", "get_column"], [36, 0, 1, "", "get_columns"], [37, 0, 1, "", "groupby"], [38, 0, 1, "", "groupby_dynamic"], [39, 0, 1, "", "groupby_rolling"], [40, 0, 1, "", "hash_rows"], [41, 0, 1, "", "head"], [42, 2, 1, "", "height"], [43, 0, 1, "", "hstack"], [44, 0, 1, "", "insert_at_idx"], [45, 0, 1, "", "interpolate"], [46, 0, 1, "", "is_duplicated"], [47, 0, 1, "", "is_empty"], [48, 0, 1, "", "is_unique"], [49, 0, 1, "", "join"], [50, 0, 1, "", "join_asof"], [51, 0, 1, "", "lazy"], [52, 0, 1, "", "limit"], [53, 0, 1, "", "max"], [54, 0, 1, "", "mean"], [55, 0, 1, "", "median"], [56, 0, 1, "", "melt"], [57, 0, 1, "", "min"], [58, 0, 1, "", "n_chunks"], [59, 0, 1, "", "null_count"], [60, 0, 1, "", "partition_by"], [61, 0, 1, "", "pipe"], [62, 0, 1, "", "pivot"], [63, 0, 1, "", "product"], [64, 0, 1, "", "quantile"], [65, 0, 1, "", "rechunk"], [66, 0, 1, "", "rename"], [67, 0, 1, "", "replace"], [68, 0, 1, "", "replace_at_idx"], [69, 0, 1, "", "reverse"], [70, 0, 1, "", "row"], [71, 0, 1, "", "rows"], [72, 0, 1, "", "sample"], [73, 2, 1, "", "schema"], [74, 0, 1, "", "select"], [75, 2, 1, "", "shape"], [76, 0, 1, "", "shift"], [77, 0, 1, "", "shift_and_fill"], [78, 0, 1, "", "shrink_to_fit"], [79, 0, 1, "", "slice"], [80, 0, 1, "", "sort"], [81, 0, 1, "", "std"], [82, 0, 1, "", "sum"], [83, 0, 1, "", "tail"], [84, 0, 1, "", "take_every"], [85, 0, 1, "", "to_arrow"], [86, 0, 1, "", "to_dict"], [87, 0, 1, "", "to_dicts"], [88, 0, 1, "", "to_dummies"], [89, 0, 1, "", "to_numpy"], [90, 0, 1, "", "to_pandas"], [91, 0, 1, "", "to_series"], [92, 0, 1, "", "to_struct"], [93, 0, 1, "", "transpose"], [94, 0, 1, "", "unique"], [95, 0, 1, "", "unnest"], [96, 0, 1, "", "unstack"], [97, 0, 1, "", "upsample"], [98, 0, 1, "", "var"], [99, 0, 1, "", "vstack"], [100, 2, 1, "", "width"], [101, 0, 1, "", "with_column"], [102, 0, 1, "", "with_columns"], [103, 0, 1, "", "with_row_count"], [104, 0, 1, "", "write_avro"], [105, 0, 1, "", "write_csv"], [106, 0, 1, "", "write_ipc"], [107, 0, 1, "", "write_json"], [108, 0, 1, "", "write_ndjson"], [109, 0, 1, "", "write_parquet"]], "polars.Expr": [[110, 0, 1, "", "__init__"], [111, 0, 1, "", "abs"], [112, 0, 1, "", "agg_groups"], [113, 0, 1, "", "alias"], [114, 0, 1, "", "all"], [115, 0, 1, "", "any"], [116, 0, 1, "", "append"], [117, 0, 1, "", "apply"], [118, 0, 1, "", "arccos"], [119, 0, 1, "", "arccosh"], [120, 0, 1, "", "arcsin"], [121, 0, 1, "", "arcsinh"], [122, 0, 1, "", "arctan"], [123, 0, 1, "", "arctanh"], [124, 0, 1, "", "arg_max"], [125, 0, 1, "", "arg_min"], [126, 0, 1, "", "arg_sort"], [127, 0, 1, "", "arg_unique"], [128, 0, 1, "", "argsort"], [129, 2, 1, "", "arr"], [130, 0, 1, "", "backward_fill"], [131, 0, 1, "", "cast"], [132, 2, 1, "", "cat"], [133, 0, 1, "", "ceil"], [134, 0, 1, "", "clip"], [135, 0, 1, "", "clip_max"], [136, 0, 1, "", "clip_min"], [137, 0, 1, "", "cos"], [138, 0, 1, "", "cosh"], [139, 0, 1, "", "count"], [140, 0, 1, "", "cumcount"], [141, 0, 1, "", "cummax"], [142, 0, 1, "", "cummin"], [143, 0, 1, "", "cumprod"], [144, 0, 1, "", "cumsum"], [145, 0, 1, "", "cumulative_eval"], [146, 0, 1, "", "diff"], [147, 0, 1, "", "dot"], [148, 0, 1, "", "drop_nans"], [149, 0, 1, "", "drop_nulls"], [150, 2, 1, "", "dt"], [151, 0, 1, "", "entropy"], [152, 0, 1, "", "ewm_mean"], [153, 0, 1, "", "ewm_std"], [154, 0, 1, "", "ewm_var"], [155, 0, 1, "", "exclude"], [156, 0, 1, "", "exp"], [157, 0, 1, "", "explode"], [158, 0, 1, "", "extend_constant"], [159, 0, 1, "", "fill_nan"], [160, 0, 1, "", "fill_null"], [161, 0, 1, "", "filter"], [162, 0, 1, "", "first"], [163, 0, 1, "", "flatten"], [164, 0, 1, "", "floor"], [165, 0, 1, "", "forward_fill"], [166, 0, 1, "", "hash"], [167, 0, 1, "", "head"], [168, 0, 1, "", "inspect"], [169, 0, 1, "", "interpolate"], [170, 0, 1, "", "is_between"], [171, 0, 1, "", "is_duplicated"], [172, 0, 1, "", "is_finite"], [173, 0, 1, "", "is_first"], [174, 0, 1, "", "is_in"], [175, 0, 1, "", "is_infinite"], [176, 0, 1, "", "is_nan"], [177, 0, 1, "", "is_not"], [178, 0, 1, "", "is_not_nan"], [179, 0, 1, "", "is_not_null"], [180, 0, 1, "", "is_null"], [181, 0, 1, "", "is_unique"], [182, 0, 1, "", "keep_name"], [183, 0, 1, "", "kurtosis"], [184, 0, 1, "", "last"], [185, 0, 1, "", "len"], [186, 0, 1, "", "limit"], [187, 0, 1, "", "list"], [188, 0, 1, "", "log"], [189, 0, 1, "", "log10"], [190, 0, 1, "", "lower_bound"], [191, 0, 1, "", "map"], [192, 0, 1, "", "map_alias"], [193, 0, 1, "", "max"], [194, 0, 1, "", "mean"], [195, 0, 1, "", "median"], [196, 0, 1, "", "min"], [197, 0, 1, "", "mode"], [198, 0, 1, "", "n_unique"], [199, 0, 1, "", "nan_max"], [200, 0, 1, "", "nan_min"], [201, 0, 1, "", "null_count"], [202, 0, 1, "", "over"], [203, 0, 1, "", "pct_change"], [204, 0, 1, "", "pow"], [205, 0, 1, "", "prefix"], [206, 0, 1, "", "product"], [207, 0, 1, "", "quantile"], [208, 0, 1, "", "rank"], [209, 0, 1, "", "rechunk"], [210, 0, 1, "", "reinterpret"], [211, 0, 1, "", "repeat_by"], [212, 0, 1, "", "reshape"], [213, 0, 1, "", "reverse"], [214, 0, 1, "", "rolling_apply"], [215, 0, 1, "", "rolling_max"], [216, 0, 1, "", "rolling_mean"], [217, 0, 1, "", "rolling_median"], [218, 0, 1, "", "rolling_min"], [219, 0, 1, "", "rolling_quantile"], [220, 0, 1, "", "rolling_skew"], [221, 0, 1, "", "rolling_std"], [222, 0, 1, "", "rolling_sum"], [223, 0, 1, "", "rolling_var"], [224, 0, 1, "", "round"], [225, 0, 1, "", "sample"], [226, 0, 1, "", "search_sorted"], [227, 0, 1, "", "set_sorted"], [228, 0, 1, "", "shift"], [229, 0, 1, "", "shift_and_fill"], [230, 0, 1, "", "shuffle"], [231, 0, 1, "", "sign"], [232, 0, 1, "", "sin"], [233, 0, 1, "", "sinh"], [234, 0, 1, "", "skew"], [235, 0, 1, "", "slice"], [236, 0, 1, "", "sort"], [237, 0, 1, "", "sort_by"], [238, 0, 1, "", "sqrt"], [239, 0, 1, "", "std"], [240, 2, 1, "", "str"], [241, 0, 1, "", "suffix"], [242, 0, 1, "", "sum"], [243, 0, 1, "", "tail"], [244, 0, 1, "", "take"], [245, 0, 1, "", "take_every"], [246, 0, 1, "", "tan"], [247, 0, 1, "", "tanh"], [248, 0, 1, "", "to_physical"], [249, 0, 1, "", "top_k"], [250, 0, 1, "", "unique"], [251, 0, 1, "", "unique_counts"], [252, 0, 1, "", "upper_bound"], [253, 0, 1, "", "value_counts"], [254, 0, 1, "", "var"], [255, 0, 1, "", "where"]], "polars.LazyFrame": [[256, 0, 1, "", "cache"], [257, 0, 1, "", "cleared"], [258, 0, 1, "", "clone"], [259, 0, 1, "", "collect"], [260, 2, 1, "", "columns"], [261, 0, 1, "", "describe_optimized_plan"], [262, 0, 1, "", "describe_plan"], [263, 0, 1, "", "drop"], [264, 0, 1, "", "drop_nulls"], [265, 2, 1, "", "dtypes"], [266, 0, 1, "", "explode"], [267, 0, 1, "", "fetch"], [268, 0, 1, "", "fill_nan"], [269, 0, 1, "", "fill_null"], [270, 0, 1, "", "filter"], [271, 0, 1, "", "first"], [272, 0, 1, "", "from_json"], [273, 0, 1, "", "groupby"], [274, 0, 1, "", "groupby_dynamic"], [275, 0, 1, "", "groupby_rolling"], [276, 0, 1, "", "head"], [277, 0, 1, "", "inspect"], [278, 0, 1, "", "interpolate"], [279, 0, 1, "", "join"], [280, 0, 1, "", "join_asof"], [281, 0, 1, "", "last"], [282, 0, 1, "", "limit"], [283, 0, 1, "", "map"], [284, 0, 1, "", "max"], [285, 0, 1, "", "mean"], [286, 0, 1, "", "median"], [287, 0, 1, "", "melt"], [288, 0, 1, "", "min"], [289, 0, 1, "", "pipe"], [290, 0, 1, "", "profile"], [291, 0, 1, "", "quantile"], [292, 0, 1, "", "read_json"], [293, 0, 1, "", "rename"], [294, 0, 1, "", "reverse"], [295, 2, 1, "", "schema"], [296, 0, 1, "", "select"], [297, 0, 1, "", "shift"], [298, 0, 1, "", "shift_and_fill"], [299, 0, 1, "", "show_graph"], [300, 0, 1, "", "slice"], [301, 0, 1, "", "sort"], [302, 0, 1, "", "std"], [303, 0, 1, "", "sum"], [304, 0, 1, "", "tail"], [305, 0, 1, "", "take_every"], [306, 0, 1, "", "unique"], [307, 0, 1, "", "unnest"], [308, 0, 1, "", "var"], [309, 0, 1, "", "with_column"], [310, 0, 1, "", "with_columns"], [311, 0, 1, "", "with_context"], [312, 0, 1, "", "with_row_count"], [313, 0, 1, "", "write_json"]], "polars.SQLContext": [[314, 0, 1, "", "execute"], [315, 0, 1, "", "query"], [316, 0, 1, "", "register"]], "polars.Series": [[317, 0, 1, "", "__init__"], [318, 0, 1, "", "abs"], [319, 0, 1, "", "alias"], [320, 0, 1, "", "all"], [321, 0, 1, "", "any"], [322, 0, 1, "", "append"], [323, 0, 1, "", "apply"], [324, 0, 1, "", "arccos"], [325, 0, 1, "", "arccosh"], [326, 0, 1, "", "arcsin"], [327, 0, 1, "", "arcsinh"], [328, 0, 1, "", "arctan"], [329, 0, 1, "", "arctanh"], [330, 0, 1, "", "arg_max"], [331, 0, 1, "", "arg_min"], [332, 0, 1, "", "arg_sort"], [333, 0, 1, "", "arg_true"], [334, 0, 1, "", "arg_unique"], [335, 0, 1, "", "argsort"], [336, 2, 1, "", "arr"], [337, 0, 1, "", "cast"], [338, 2, 1, "", "cat"], [339, 0, 1, "", "ceil"], [340, 0, 1, "", "chunk_lengths"], [341, 0, 1, "", "cleared"], [342, 0, 1, "", "clip"], [343, 0, 1, "", "clip_max"], [344, 0, 1, "", "clip_min"], [345, 0, 1, "", "clone"], [346, 0, 1, "", "cos"], [347, 0, 1, "", "cosh"], [348, 0, 1, "", "cummax"], [349, 0, 1, "", "cummin"], [350, 0, 1, "", "cumprod"], [351, 0, 1, "", "cumsum"], [352, 0, 1, "", "cumulative_eval"], [353, 0, 1, "", "describe"], [354, 0, 1, "", "diff"], [355, 0, 1, "", "dot"], [356, 0, 1, "", "drop_nans"], [357, 0, 1, "", "drop_nulls"], [358, 2, 1, "", "dt"], [359, 2, 1, "", "dtype"], [360, 0, 1, "", "entropy"], [361, 0, 1, "", "estimated_size"], [362, 0, 1, "", "ewm_mean"], [363, 0, 1, "", "ewm_std"], [364, 0, 1, "", "ewm_var"], [365, 0, 1, "", "exp"], [366, 0, 1, "", "explode"], [367, 0, 1, "", "extend_constant"], [368, 0, 1, "", "fill_nan"], [369, 0, 1, "", "fill_null"], [370, 0, 1, "", "filter"], [371, 2, 1, "", "flags"], [372, 0, 1, "", "floor"], [373, 0, 1, "", "has_validity"], [374, 0, 1, "", "hash"], [375, 0, 1, "", "head"], [376, 2, 1, "", "inner_dtype"], [377, 0, 1, "", "interpolate"], [378, 0, 1, "", "is_boolean"], [379, 0, 1, "", "is_datelike"], [380, 0, 1, "", "is_duplicated"], [381, 0, 1, "", "is_empty"], [382, 0, 1, "", "is_finite"], [383, 0, 1, "", "is_first"], [384, 0, 1, "", "is_float"], [385, 0, 1, "", "is_in"], [386, 0, 1, "", "is_infinite"], [387, 0, 1, "", "is_nan"], [388, 0, 1, "", "is_not_nan"], [389, 0, 1, "", "is_not_null"], [390, 0, 1, "", "is_null"], [391, 0, 1, "", "is_numeric"], [392, 0, 1, "", "is_unique"], [393, 0, 1, "", "is_utf8"], [394, 0, 1, "", "kurtosis"], [395, 0, 1, "", "len"], [396, 0, 1, "", "limit"], [397, 0, 1, "", "log"], [398, 0, 1, "", "log10"], [399, 0, 1, "", "max"], [400, 0, 1, "", "mean"], [401, 0, 1, "", "median"], [402, 0, 1, "", "min"], [403, 0, 1, "", "mode"], [404, 0, 1, "", "n_chunks"], [405, 0, 1, "", "n_unique"], [406, 2, 1, "", "name"], [407, 0, 1, "", "nan_max"], [408, 0, 1, "", "nan_min"], [409, 0, 1, "", "null_count"], [410, 0, 1, "", "pct_change"], [411, 0, 1, "", "peak_max"], [412, 0, 1, "", "peak_min"], [413, 0, 1, "", "product"], [414, 0, 1, "", "quantile"], [415, 0, 1, "", "rank"], [416, 0, 1, "", "rechunk"], [417, 0, 1, "", "reinterpret"], [418, 0, 1, "", "rename"], [419, 0, 1, "", "reshape"], [420, 0, 1, "", "reverse"], [421, 0, 1, "", "rolling_apply"], [422, 0, 1, "", "rolling_max"], [423, 0, 1, "", "rolling_mean"], [424, 0, 1, "", "rolling_median"], [425, 0, 1, "", "rolling_min"], [426, 0, 1, "", "rolling_quantile"], [427, 0, 1, "", "rolling_skew"], [428, 0, 1, "", "rolling_std"], [429, 0, 1, "", "rolling_sum"], [430, 0, 1, "", "rolling_var"], [431, 0, 1, "", "round"], [432, 0, 1, "", "sample"], [433, 0, 1, "", "search_sorted"], [434, 0, 1, "", "series_equal"], [435, 0, 1, "", "set"], [436, 0, 1, "", "set_at_idx"], [437, 0, 1, "", "set_sorted"], [438, 2, 1, "", "shape"], [439, 0, 1, "", "shift"], [440, 0, 1, "", "shift_and_fill"], [441, 0, 1, "", "shrink_to_fit"], [442, 0, 1, "", "shuffle"], [443, 0, 1, "", "sign"], [444, 0, 1, "", "sin"], [445, 0, 1, "", "sinh"], [446, 0, 1, "", "skew"], [447, 0, 1, "", "slice"], [448, 0, 1, "", "sort"], [449, 0, 1, "", "sqrt"], [450, 0, 1, "", "std"], [451, 2, 1, "", "str"], [452, 0, 1, "", "sum"], [453, 0, 1, "", "tail"], [454, 0, 1, "", "take"], [455, 0, 1, "", "take_every"], [456, 0, 1, "", "tan"], [457, 0, 1, "", "tanh"], [458, 2, 1, "", "time_unit"], [459, 0, 1, "", "to_arrow"], [460, 0, 1, "", "to_dummies"], [461, 0, 1, "", "to_frame"], [462, 0, 1, "", "to_list"], [463, 0, 1, "", "to_numpy"], [464, 0, 1, "", "to_pandas"], [465, 0, 1, "", "to_physical"], [466, 0, 1, "", "top_k"], [467, 0, 1, "", "unique"], [468, 0, 1, "", "unique_counts"], [469, 0, 1, "", "value_counts"], [470, 0, 1, "", "var"], [471, 0, 1, "", "view"], [472, 0, 1, "", "zip_with"]], "polars.StringCache": [[473, 0, 1, "", "__init__"]], "polars.datatypes": [[490, 1, 1, "", "Boolean"], [491, 1, 1, "", "Categorical"], [492, 1, 1, "", "DataType"], [493, 1, 1, "", "Date"], [494, 1, 1, "", "Datetime"], [495, 1, 1, "", "Duration"], [496, 1, 1, "", "Float32"], [497, 1, 1, "", "Float64"], [498, 1, 1, "", "Int16"], [499, 1, 1, "", "Int32"], [500, 1, 1, "", "Int64"], [501, 1, 1, "", "Int8"], [502, 1, 1, "", "List"], [503, 1, 1, "", "Null"], [504, 1, 1, "", "Object"], [505, 1, 1, "", "Struct"], [506, 1, 1, "", "Time"], [507, 1, 1, "", "UInt16"], [508, 1, 1, "", "UInt32"], [509, 1, 1, "", "UInt64"], [510, 1, 1, "", "UInt8"], [511, 1, 1, "", "Unknown"], [512, 1, 1, "", "Utf8"], [513, 3, 1, "", "get_idx_type"]], "polars.datatypes.Boolean": [[490, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[491, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[492, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[493, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[494, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[495, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[496, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[497, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[498, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[499, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[500, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[501, 0, 1, "", "__init__"]], "polars.datatypes.List": [[502, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[503, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[504, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[505, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[506, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[507, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[508, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[509, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[510, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[511, 0, 1, "", "__init__"]], "polars.datatypes.Utf8": [[512, 0, 1, "", "__init__"]], "polars.exceptions": [[519, 4, 1, "", "ArrowError"], [520, 4, 1, "", "ComputeError"], [521, 4, 1, "", "DuplicateError"], [522, 4, 1, "", "InvalidOperationError"], [523, 4, 1, "", "NoDataError"], [524, 4, 1, "", "NoRowsReturned"], [525, 4, 1, "", "NotFoundError"], [526, 4, 1, "", "PanicException"], [527, 4, 1, "", "RowsException"], [528, 4, 1, "", "SchemaError"], [529, 4, 1, "", "ShapeError"], [530, 4, 1, "", "TooManyRowsReturned"]], "polars.internals.dataframe.groupby.GroupBy": [[544, 0, 1, "", "agg"], [545, 0, 1, "", "agg_list"], [546, 0, 1, "", "apply"], [547, 0, 1, "", "count"], [548, 0, 1, "", "first"], [549, 0, 1, "", "head"], [550, 0, 1, "", "last"], [551, 0, 1, "", "max"], [552, 0, 1, "", "mean"], [553, 0, 1, "", "median"], [554, 0, 1, "", "min"], [555, 0, 1, "", "n_unique"], [556, 0, 1, "", "pivot"], [557, 0, 1, "", "quantile"], [558, 0, 1, "", "sum"], [559, 0, 1, "", "tail"]], "polars.internals.dataframe.pivot.PivotOps": [[560, 0, 1, "", "count"], [561, 0, 1, "", "first"], [562, 0, 1, "", "last"], [563, 0, 1, "", "max"], [564, 0, 1, "", "mean"], [565, 0, 1, "", "median"], [566, 0, 1, "", "min"], [567, 0, 1, "", "sum"]], "polars.internals.expr.categorical.ExprCatNameSpace": [[568, 0, 1, "", "set_ordering"]], "polars.internals.expr.datetime.ExprDateTimeNameSpace": [[569, 0, 1, "", "cast_time_unit"], [570, 0, 1, "", "day"], [571, 0, 1, "", "days"], [572, 0, 1, "", "epoch"], [573, 0, 1, "", "hour"], [574, 0, 1, "", "hours"], [575, 0, 1, "", "iso_year"], [576, 0, 1, "", "microsecond"], [577, 0, 1, "", "microseconds"], [578, 0, 1, "", "millisecond"], [579, 0, 1, "", "milliseconds"], [580, 0, 1, "", "minute"], [581, 0, 1, "", "minutes"], [582, 0, 1, "", "month"], [583, 0, 1, "", "nanosecond"], [584, 0, 1, "", "nanoseconds"], [585, 0, 1, "", "offset_by"], [586, 0, 1, "", "ordinal_day"], [587, 0, 1, "", "quarter"], [588, 0, 1, "", "second"], [589, 0, 1, "", "seconds"], [590, 0, 1, "", "strftime"], [591, 0, 1, "", "timestamp"], [592, 0, 1, "", "truncate"], [593, 0, 1, "", "week"], [594, 0, 1, "", "weekday"], [595, 0, 1, "", "with_time_unit"], [596, 0, 1, "", "year"]], "polars.internals.expr.list.ExprListNameSpace": [[597, 0, 1, "", "arg_max"], [598, 0, 1, "", "arg_min"], [599, 0, 1, "", "concat"], [600, 0, 1, "", "contains"], [601, 0, 1, "", "diff"], [602, 0, 1, "", "eval"], [603, 0, 1, "", "first"], [604, 0, 1, "", "get"], [605, 0, 1, "", "head"], [606, 0, 1, "", "join"], [607, 0, 1, "", "last"], [608, 0, 1, "", "lengths"], [609, 0, 1, "", "max"], [610, 0, 1, "", "mean"], [611, 0, 1, "", "min"], [612, 0, 1, "", "reverse"], [613, 0, 1, "", "shift"], [614, 0, 1, "", "slice"], [615, 0, 1, "", "sort"], [616, 0, 1, "", "sum"], [617, 0, 1, "", "tail"], [618, 0, 1, "", "to_struct"], [619, 0, 1, "", "unique"]], "polars.internals.expr.meta.ExprMetaNameSpace": [[620, 0, 1, "", "output_name"], [621, 0, 1, "", "pop"], [622, 0, 1, "", "root_names"], [623, 0, 1, "", "undo_aliases"]], "polars.internals.expr.string.ExprStringNameSpace": [[624, 0, 1, "", "concat"], [625, 0, 1, "", "contains"], [626, 0, 1, "", "count_match"], [627, 0, 1, "", "decode"], [628, 0, 1, "", "encode"], [629, 0, 1, "", "ends_with"], [630, 0, 1, "", "extract"], [631, 0, 1, "", "extract_all"], [632, 0, 1, "", "json_path_match"], [633, 0, 1, "", "lengths"], [634, 0, 1, "", "ljust"], [635, 0, 1, "", "lstrip"], [636, 0, 1, "", "replace"], [637, 0, 1, "", "replace_all"], [638, 0, 1, "", "rjust"], [639, 0, 1, "", "rstrip"], [640, 0, 1, "", "slice"], [641, 0, 1, "", "split"], [642, 0, 1, "", "split_exact"], [643, 0, 1, "", "splitn"], [644, 0, 1, "", "starts_with"], [645, 0, 1, "", "strip"], [646, 0, 1, "", "strptime"], [647, 0, 1, "", "to_lowercase"], [648, 0, 1, "", "to_uppercase"], [649, 0, 1, "", "zfill"]], "polars.internals.expr.struct.ExprStructNameSpace": [[650, 0, 1, "", "field"], [651, 0, 1, "", "rename_fields"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[652, 0, 1, "", "agg"], [653, 0, 1, "", "apply"], [654, 0, 1, "", "head"], [655, 0, 1, "", "tail"]], "polars.internals.series.categorical.CatNameSpace": [[656, 0, 1, "", "set_ordering"]], "polars.internals.series.datetime.DateTimeNameSpace": [[657, 0, 1, "", "cast_time_unit"], [658, 0, 1, "", "day"], [659, 0, 1, "", "days"], [660, 0, 1, "", "epoch"], [661, 0, 1, "", "hour"], [662, 0, 1, "", "hours"], [663, 0, 1, "", "iso_year"], [664, 0, 1, "", "max"], [665, 0, 1, "", "mean"], [666, 0, 1, "", "median"], [667, 0, 1, "", "microsecond"], [668, 0, 1, "", "microseconds"], [669, 0, 1, "", "millisecond"], [670, 0, 1, "", "milliseconds"], [671, 0, 1, "", "min"], [672, 0, 1, "", "minute"], [673, 0, 1, "", "minutes"], [674, 0, 1, "", "month"], [675, 0, 1, "", "nanosecond"], [676, 0, 1, "", "nanoseconds"], [677, 0, 1, "", "offset_by"], [678, 0, 1, "", "ordinal_day"], [679, 0, 1, "", "quarter"], [680, 0, 1, "", "second"], [681, 0, 1, "", "seconds"], [682, 0, 1, "", "strftime"], [683, 0, 1, "", "timestamp"], [684, 0, 1, "", "truncate"], [685, 0, 1, "", "week"], [686, 0, 1, "", "weekday"], [687, 0, 1, "", "with_time_unit"], [688, 0, 1, "", "year"]], "polars.internals.series.list.ListNameSpace": [[689, 0, 1, "", "arg_max"], [690, 0, 1, "", "arg_min"], [691, 0, 1, "", "concat"], [692, 0, 1, "", "contains"], [693, 0, 1, "", "diff"], [694, 0, 1, "", "eval"], [695, 0, 1, "", "first"], [696, 0, 1, "", "get"], [697, 0, 1, "", "head"], [698, 0, 1, "", "join"], [699, 0, 1, "", "last"], [700, 0, 1, "", "lengths"], [701, 0, 1, "", "max"], [702, 0, 1, "", "mean"], [703, 0, 1, "", "min"], [704, 0, 1, "", "reverse"], [705, 0, 1, "", "shift"], [706, 0, 1, "", "slice"], [707, 0, 1, "", "sort"], [708, 0, 1, "", "sum"], [709, 0, 1, "", "tail"], [710, 0, 1, "", "unique"]], "polars.internals.series.string.StringNameSpace": [[711, 0, 1, "", "concat"], [712, 0, 1, "", "contains"], [713, 0, 1, "", "count_match"], [714, 0, 1, "", "decode"], [715, 0, 1, "", "encode"], [716, 0, 1, "", "ends_with"], [717, 0, 1, "", "extract"], [718, 0, 1, "", "extract_all"], [719, 0, 1, "", "json_path_match"], [720, 0, 1, "", "lengths"], [721, 0, 1, "", "ljust"], [722, 0, 1, "", "lstrip"], [723, 0, 1, "", "replace"], [724, 0, 1, "", "replace_all"], [725, 0, 1, "", "rjust"], [726, 0, 1, "", "rstrip"], [727, 0, 1, "", "slice"], [728, 0, 1, "", "split"], [729, 0, 1, "", "split_exact"], [730, 0, 1, "", "splitn"], [731, 0, 1, "", "starts_with"], [732, 0, 1, "", "strip"], [733, 0, 1, "", "strptime"], [734, 0, 1, "", "to_lowercase"], [735, 0, 1, "", "to_uppercase"], [736, 0, 1, "", "zfill"]], "polars.internals.series.struct.StructNameSpace": [[737, 0, 1, "", "field"], [738, 2, 1, "", "fields"], [739, 0, 1, "", "rename_fields"], [740, 0, 1, "", "to_frame"]], "polars.testing": [[774, 3, 1, "", "assert_frame_equal"], [775, 3, 1, "", "assert_series_equal"], [776, 1, 1, "", "column"], [777, 3, 1, "", "columns"], [778, 3, 1, "", "dataframes"], [779, 3, 1, "", "series"]], "polars.testing.column": [[776, 0, 1, "", "__init__"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:property", "3": "py:function", "4": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "function", "Python function"], "4": ["py", "exception", "Python exception"]}, "titleterms": {"polar": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783], "config": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 784, 789], "set_ascii_t": 1, "set_fmt_str_length": 2, "set_global_string_cach": 3, "set_tbl_cell_align": 4, "set_tbl_change_column_data_type_position_format": 5, "set_tbl_col": 6, "set_tbl_format": 7, "set_tbl_hide_column_data_typ": 8, "set_tbl_hide_column_nam": 9, "set_tbl_hide_column_separ": 10, "set_tbl_hide_dataframe_shap": 11, "set_tbl_row": 12, "set_tbl_width_char": 13, "set_utf8_t": 14, "unset_global_string_cach": 15, "datafram": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 778, 785], "appli": [17, 117, 323, 476, 546, 653, 785, 788, 792], "clear": [18, 257, 341], "clone": [19, 258, 345], "column": [20, 260, 776, 777, 788], "describ": [21, 353], "drop": [22, 263], "drop_in_plac": 23, "drop_nul": [24, 149, 264, 357], "dtype": [25, 265, 359], "estimated_s": [26, 361], "explod": [27, 157, 266, 366], "extend": 28, "fill_nan": [29, 159, 268, 368], "fill_nul": [30, 160, 269, 369], "filter": [31, 161, 270, 370], "find_idx_by_nam": 32, "fold": [33, 533], "frame_equ": 34, "get_column": [35, 36], "groupbi": [37, 273, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 652, 653, 654, 655, 785, 792], "groupby_dynam": [38, 274], "groupby_rol": [39, 275], "hash_row": 40, "head": [41, 167, 276, 375, 543, 549, 605, 654, 697], "height": 42, "hstack": 43, "insert_at_idx": 44, "interpol": [45, 169, 278, 377], "is_dupl": [46, 171, 380], "is_empti": [47, 381], "is_uniqu": [48, 181, 392], "join": [49, 279, 606, 698], "join_asof": [50, 280], "lazi": [51, 789], "limit": [52, 186, 282, 396], "max": [53, 193, 284, 399, 551, 563, 609, 664, 701, 744], "mean": [54, 194, 285, 400, 552, 564, 610, 665, 702, 745], "median": [55, 195, 286, 401, 553, 565, 666, 746], "melt": [56, 287], "min": [57, 196, 288, 402, 554, 566, 611, 671, 703, 747], "n_chunk": [58, 404], "null_count": [59, 201, 409], "partition_bi": 60, "pipe": [61, 289], "pivot": [62, 556, 560, 561, 562, 563, 564, 565, 566, 567, 785], "product": [63, 206, 413], "quantil": [64, 207, 291, 414, 557, 750], "rechunk": [65, 209, 416], "renam": [66, 293, 418], "replac": [67, 636, 723], "replace_at_idx": 68, "revers": [69, 213, 294, 420, 612, 704], "row": [70, 71], "sampl": [72, 225, 432], "schema": [73, 295], "select": [74, 296, 767, 785, 788, 792, 793], "shape": [75, 438], "shift": [76, 228, 297, 439, 613, 705], "shift_and_fil": [77, 229, 298, 440], "shrink_to_fit": [78, 441], "slice": [79, 235, 300, 447, 614, 640, 706, 727], "sort": [80, 236, 301, 448, 615, 707], "std": [81, 239, 302, 450, 770], "sum": [82, 242, 303, 452, 558, 567, 616, 708, 772], "tail": [83, 243, 304, 453, 559, 617, 655, 709, 773], "take_everi": [84, 245, 305, 455], "to_arrow": [85, 459], "to_dict": [86, 87], "to_dummi": [88, 460], "to_numpi": [89, 463], "to_panda": [90, 464], "to_seri": 91, "to_struct": [92, 618], "transpos": 93, "uniqu": [94, 250, 306, 467, 619, 710], "unnest": [95, 307], "unstack": 96, "upsampl": 97, "var": [98, 254, 308, 470, 782], "vstack": 99, "width": 100, "with_column": [101, 102, 309, 310], "with_row_count": [103, 312], "write_avro": 104, "write_csv": 105, "write_ipc": 106, "write_json": [107, 313], "write_ndjson": 108, "write_parquet": 109, "expr": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651], "ab": [111, 318], "agg_group": 112, "alia": [113, 319], "all": [114, 320, 474], "ani": [115, 321, 475], "append": [116, 322], "arcco": [118, 324], "arccosh": [119, 325], "arcsin": [120, 326], "arcsinh": [121, 327], "arctan": [122, 328], "arctanh": [123, 329], "arg_max": [124, 330, 597, 689], "arg_min": [125, 331, 598, 690], "arg_sort": [126, 332], "arg_uniqu": [127, 334], "argsort": [128, 335], "arr": [129, 336], "backward_fil": 130, "cast": [131, 337], "cat": [132, 338], "ceil": [133, 339], "clip": [134, 342], "clip_max": [135, 343], "clip_min": [136, 344], "co": [137, 346], "cosh": [138, 347], "count": [139, 487, 547, 560], "cumcount": 140, "cummax": [141, 348], "cummin": [142, 349], "cumprod": [143, 350], "cumsum": [144, 351], "cumulative_ev": [145, 352], "diff": [146, 354, 601, 693], "dot": [147, 355], "drop_nan": [148, 356], "dt": [150, 358], "entropi": [151, 360], "ewm_mean": [152, 362], "ewm_std": [153, 363], "ewm_var": [154, 364], "exclud": [155, 531], "exp": [156, 365], "extend_const": [158, 367], "first": [162, 271, 532, 548, 561, 603, 695], "flatten": 163, "floor": [164, 372], "forward_fil": 165, "hash": [166, 374], "inspect": [168, 277], "is_between": 170, "is_finit": [172, 382], "is_first": [173, 383], "is_in": [174, 385], "is_infinit": [175, 386], "is_nan": [176, 387], "is_not": 177, "is_not_nan": [178, 388], "is_not_nul": [179, 389], "is_nul": [180, 390], "keep_nam": 182, "kurtosi": [183, 394], "last": [184, 281, 550, 562, 607, 699], "len": [185, 395], "list": [187, 502, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 741, 788, 793], "log": [188, 397], "log10": [189, 398], "lower_bound": 190, "map": [191, 283, 743], "map_alia": 192, "mode": [197, 403], "n_uniqu": [198, 405, 555, 748], "nan_max": [199, 407], "nan_min": [200, 408], "over": 202, "pct_chang": [203, 410], "pow": 204, "prefix": 205, "rank": [208, 415], "reinterpret": [210, 417], "repeat_bi": 211, "reshap": [212, 419], "rolling_appli": [214, 421], "rolling_max": [215, 422], "rolling_mean": [216, 423], "rolling_median": [217, 424], "rolling_min": [218, 425], "rolling_quantil": [219, 426], "rolling_skew": [220, 427], "rolling_std": [221, 428], "rolling_sum": [222, 429], "rolling_var": [223, 430], "round": [224, 431], "search_sort": [226, 433], "set_sort": [227, 437], "shuffl": [230, 442], "sign": [231, 443], "sin": [232, 444], "sinh": [233, 445], "skew": [234, 446], "sort_bi": 237, "sqrt": [238, 449], "str": [240, 451], "suffix": 241, "take": [244, 454], "tan": [246, 456], "tanh": [247, 457], "to_phys": [248, 465], "top_k": [249, 466], "unique_count": [251, 468], "upper_bound": 252, "value_count": [253, 469], "where": 255, "lazyfram": [256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 652, 653, 654, 655, 792], "cach": 256, "collect": 259, "describe_optimized_plan": 261, "describe_plan": 262, "fetch": 267, "from_json": 272, "profil": 290, "read_json": [292, 756], "show_graph": 299, "with_context": 311, "sqlcontext": [314, 315, 316], "execut": 314, "queri": 315, "regist": 316, "seri": [317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 779, 793], "arg_tru": 333, "chunk_length": 340, "flag": 371, "has_valid": 373, "inner_dtyp": 376, "is_boolean": 378, "is_datelik": 379, "is_float": 384, "is_numer": 391, "is_utf8": 393, "name": [406, 788], "peak_max": 411, "peak_min": 412, "series_equ": 434, "set": 435, "set_at_idx": 436, "time_unit": 458, "to_fram": [461, 740], "to_list": 462, "view": 471, "zip_with": 472, "stringcach": 473, "arang": 477, "arg_wher": 478, "argsort_bi": 479, "avg": 480, "coalesc": 481, "col": 482, "collect_al": 483, "concat": [484, 599, 624, 691, 711], "concat_list": 485, "concat_str": 486, "cov": 488, "cut": 489, "datatyp": [490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513], "boolean": [490, 788, 793], "categor": [491, 568, 656], "date": [493, 514, 786], "datetim": [494, 516, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688], "durat": [495, 517], "float32": 496, "float64": 497, "int16": 498, "int32": 499, "int64": 500, "int8": 501, "null": 503, "object": 504, "struct": [505, 650, 651, 737, 738, 739, 740, 771, 788, 793], "time": [506, 786], "uint16": 507, "uint32": 508, "uint64": 509, "uint8": 510, "unknown": 511, "utf8": 512, "get_idx_typ": 513, "date_rang": 515, "element": 518, "except": [519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 787], "arrowerror": 519, "computeerror": 520, "duplicateerror": 521, "invalidoperationerror": 522, "nodataerror": 523, "norowsreturn": 524, "notfounderror": 525, "panicexcept": 526, "rowsexcept": 527, "schemaerror": 528, "shapeerror": 529, "toomanyrowsreturn": 530, "format": 534, "from_arrow": 535, "from_dict": [536, 537], "from_numpi": 538, "from_panda": 539, "from_record": 540, "get_dummi": 541, "group": 542, "intern": [544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740], "agg": [544, 652], "agg_list": 545, "pivotop": [560, 561, 562, 563, 564, 565, 566, 567], "exprcatnamespac": 568, "set_ord": [568, 656], "exprdatetimenamespac": [569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596], "cast_time_unit": [569, 657], "dai": [570, 571, 658, 659], "epoch": [572, 660], "hour": [573, 574, 661, 662], "iso_year": [575, 663], "microsecond": [576, 577, 667, 668], "millisecond": [578, 579, 669, 670], "minut": [580, 581, 672, 673], "month": [582, 674], "nanosecond": [583, 584, 675, 676], "offset_bi": [585, 677], "ordinal_dai": [586, 678], "quarter": [587, 679], "second": [588, 589, 680, 681], "strftime": [590, 682], "timestamp": [591, 683], "truncat": [592, 684], "week": [593, 685], "weekdai": [594, 686], "with_time_unit": [595, 687], "year": [596, 688], "exprlistnamespac": [597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619], "contain": [600, 625, 692, 712], "eval": [602, 694], "get": [604, 696], "length": [608, 633, 700, 720], "meta": [620, 621, 622, 623, 788], "exprmetanamespac": [620, 621, 622, 623], "output_nam": 620, "pop": 621, "root_nam": 622, "undo_alias": 623, "string": [624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 788, 793], "exprstringnamespac": [624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649], "count_match": [626, 713], "decod": [627, 714], "encod": [628, 715], "ends_with": [629, 716], "extract": [630, 717], "extract_al": [631, 718], "json_path_match": [632, 719], "ljust": [634, 721], "lstrip": [635, 722], "replace_al": [637, 724], "rjust": [638, 725], "rstrip": [639, 726], "split": [641, 728], "split_exact": [642, 729], "splitn": [643, 730], "starts_with": [644, 731], "strip": [645, 732], "strptime": [646, 733], "to_lowercas": [647, 734], "to_uppercas": [648, 735], "zfill": [649, 736], "exprstructnamespac": [650, 651], "field": [650, 737, 738], "rename_field": [651, 739], "lazygroupbi": [652, 653, 654, 655], "catnamespac": 656, "datetimenamespac": [657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688], "listnamespac": [689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710], "stringnamespac": [711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736], "structnamespac": [737, 738, 739, 740], "lit": 742, "pearson_corr": 749, "read_avro": 751, "read_csv": 752, "read_excel": 753, "read_ipc": 754, "read_ipc_schema": 755, "read_ndjson": 757, "read_parquet": 758, "read_parquet_schema": 759, "read_sql": 760, "repeat": 761, "scan_csv": 762, "scan_d": 763, "scan_ipc": 764, "scan_ndjson": 765, "scan_parquet": 766, "show_vers": 768, "spearman_rank_corr": 769, "test": [774, 775, 776, 777, 778, 779, 795], "assert_frame_equ": 774, "assert_series_equ": 775, "threadpool_s": 780, "toggle_string_cach": 781, "when": 783, "constructor": [785, 788, 793], "attribut": [785, 788, 792, 793, 794], "convers": [785, 789, 792, 793], "aggreg": [785, 788, 792, 793], "descript": [785, 792, 793], "stat": [785, 792, 793], "comput": [785, 788, 793], "manipul": [785, 788, 792, 793], "variou": [785, 788, 792, 793], "data": 786, "type": 786, "numer": 786, "nest": 786, "other": 786, "function": [786, 788, 789], "express": 788, "window": 788, "timeseri": [788, 793], "categori": [788, 793], "eager": 789, "parallel": 789, "api": 790, "refer": 790, "input": 791, "output": 791, "csv": 791, "feather": 791, "ipc": 791, "parquet": 791, "sql": 791, "json": 791, "avro": 791, "excel": 791, "dataset": 791, "util": [794, 796], "assert": 795, "properti": 795, "base": 795, "strategi": 795, "helper": 795}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 56}})